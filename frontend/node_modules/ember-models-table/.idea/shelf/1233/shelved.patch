Index: addon/utils/column.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {\n  observer,\n  computed,\n  isEmpty,\n  Object: O,\n  set,\n  get,\n  A\n} = Ember;\n\n\n/**\n * @typedef {object} ModelsTable~ModelsTableColumn\n * @property {string} propertyName data's property shown in the current column\n * @property {string} title column's title\n * @property {string} component custom component used in the column's cells. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data\n * @property {string} componentForFilterCell custom component used in the header cell with filter. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data\n * @property {string} componentForSortCell custom component used in the header cell with sorting and column title. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data\n * @property {string} sortedBy custom data's property that is used to sort column\n * @property {string} sortDirection the default sorting direction of the column, asc or desc - only in effect if sortPrecedence is set!\n * @property {number} sortPrecedence the sort precedence for this column - needs to be larger than -1 for sortDirection to take effect\n * @property {boolean} disableSorting if sorting should be disabled for this column\n * @property {boolean} disableFiltering if filtering should be disabled for this column\n * @property {string} filterString a default filtering for this column\n * @property {string} filteredBy custom data's property that is used to filter column\n * @property {string} sorting is column sorted now\n * @property {boolean} isHidden is column hidden now\n * @property {boolean} mayBeHidden may this column be hidden\n * @property {boolean} filterWithSelect should select-box be used as filter for this column\n * @property {boolean} sortFilterOptions should options in the select-box be sorted (<code>false</code> by default)\n * @property {string[]|number[]} predefinedFilterOptions list of option to the filter-box (used if <code>filterWithSelect</code> is true)\n * @property {string} className custom classNames for column\n * @property {function} filterFunction custom function used to filter rows (used if <code>filterWithSelect</code> is false)\n * @property {string} filterPlaceholder placeholder for filter-input\n * @property {object} originalDefinition object containing the definition of the column passed into the component\n */\nexport default O.extend({\n\n  cssPropertyName: computed('propertyName', function () {\n    return get(this, 'propertyName').replace(/\\./g, '-');\n  }),\n\n  isVisible: computed.not('isHidden'),\n\n  sortAsc: computed.equal('sorting', 'asc'),\n\n  sortDesc: computed.equal('sorting', 'desc'),\n\n  filterUsed: computed.notEmpty('filterString'),\n\n  /**\n   * If preselected option doesn't exist after <code>filterOptions</code> update,\n   * <code>filterString</code> is reverted to empty string (basically, filtering for this column is dropped)\n   */\n  cleanFilterString: observer('filterWithSelect', 'filterOptions.[]', 'filterString', function () {\n    let filterOptions = get(this, 'filterOptions');\n    let filterWithSelect = get(this, 'filterWithSelect');\n    let filterString = get(this, 'filterString');\n    if (!filterWithSelect || isEmpty(filterOptions)) {\n      return;\n    }\n    const filterOptionExists = A(filterOptions).find(option => {\n      const value = get(option, 'value');\n      return [value, '' + value].indexOf(filterString) !== -1;\n    });\n    if (!filterOptionExists) {\n      set(this, 'filterString', '');\n    }\n  })\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/utils/column.js	(revision 4469481ea281f3738688f73bc95d7edee422bb13)
+++ addon/utils/column.js	(revision )
@@ -12,47 +12,252 @@
 
 
 /**
- * @typedef {object} ModelsTable~ModelsTableColumn
- * @property {string} propertyName data's property shown in the current column
- * @property {string} title column's title
- * @property {string} component custom component used in the column's cells. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
- * @property {string} componentForFilterCell custom component used in the header cell with filter. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
- * @property {string} componentForSortCell custom component used in the header cell with sorting and column title. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
- * @property {string} sortedBy custom data's property that is used to sort column
- * @property {string} sortDirection the default sorting direction of the column, asc or desc - only in effect if sortPrecedence is set!
- * @property {number} sortPrecedence the sort precedence for this column - needs to be larger than -1 for sortDirection to take effect
- * @property {boolean} disableSorting if sorting should be disabled for this column
- * @property {boolean} disableFiltering if filtering should be disabled for this column
- * @property {string} filterString a default filtering for this column
- * @property {string} filteredBy custom data's property that is used to filter column
- * @property {string} sorting is column sorted now
- * @property {boolean} isHidden is column hidden now
- * @property {boolean} mayBeHidden may this column be hidden
- * @property {boolean} filterWithSelect should select-box be used as filter for this column
- * @property {boolean} sortFilterOptions should options in the select-box be sorted (<code>false</code> by default)
- * @property {string[]|number[]} predefinedFilterOptions list of option to the filter-box (used if <code>filterWithSelect</code> is true)
- * @property {string} className custom classNames for column
- * @property {function} filterFunction custom function used to filter rows (used if <code>filterWithSelect</code> is false)
- * @property {string} filterPlaceholder placeholder for filter-input
- * @property {object} originalDefinition object containing the definition of the column passed into the component
+ * @class ModelsTableColumn
+ * @namespace Utils
  */
 export default O.extend({
 
+  /**
+   * Data's property shown in the current column
+   *
+   * @default ''
+   * @property propertyName
+   * @type string
+   */
+  propertyName: '',
+
+  /**
+   * Column's title
+   *
+   * @default ''
+   * @property title
+   * @type string
+   */
+  title: '',
+
+  /**
+   * Custom component used in the column's cells
+   *
+   * @type string
+   * @property component
+   * @default ''
+   */
+  component: '',
+
+  /**
+   * Custom component used in the header cell with filter
+   *
+   * @type string
+   * @property componentForFilterCell
+   * @default ''
+   */
+  componentForFilterCell: '',
+
+  /**
+   * Custom component used in the header cell with sorting and column title
+   *
+   * @type string
+   * @property componentForSortCell
+   * @default ''
+   */
+  componentForSortCell: '',
+
+  /**
+   * Custom data's property that is used to sort column
+   *
+   * @type string
+   * @property sortedBy
+   * @default ''
+   */
+  sortedBy: '',
+
+  /**
+   * Default sorting direction of the column, asc or desc - only in effect if sortPrecedence is set!
+   *
+   * @type string
+   * @property sortDirection
+   * @default ''
+   */
+  sortDirection: '',
+
+  /**
+   * Sort precedence for this column - needs to be larger than -1 for sortDirection to take effect
+   *
+   * @type number
+   * @property sortPrecedence
+   * @default ''
+   */
+  sortPrecedence: null,
+
+  /**
+   * If sorting should be disabled for this column
+   *
+   * @property disableSorting
+   * @type boolean
+   * @default false
+   */
+  disableSorting: false,
+
+  /**
+   * If filtering should be disabled for this column
+   *
+   * @property disableFiltering
+   * @type boolean
+   * @default false
+   */
+  disableFiltering: false,
+
+  /**
+   * FilterString a default filtering for this column
+   *
+   * @property filterString
+   * @type string
+   * @default ''
+   */
+  filterString: '',
+
+  /**
+   * Custom data's property that is used to filter column
+   *
+   * @type string
+   * @property filteredBy
+   * @default ''
+   */
+  filteredBy: '',
+
+  /**
+   * Sorting is column sorted now
+   *
+   * @property sorting
+   * @type boolean
+   * @default false
+   */
+  sorting: false,
+
+  /**
+   * Is column hidden now
+   *
+   * @property isHidden
+   * @default false
+   * @type boolean
+   */
+  isHidden: false,
+
+  /**
+   * May this column be hidden
+   *
+   * @property mayBeHidden
+   * @default true
+   * @type boolean
+   */
+  mayBeHidden: true,
+
+  /**
+   * Should select-box be used as filter for this column
+   *
+   * @property filterWithSelect
+   * @type boolean
+   * @default false
+   */
+  filterWithSelect: false,
+
+  /**
+   * Should options in the select-box be sorted
+   *
+   * @property sortFilterOptions
+   * @default false
+   * @type boolean
+   */
+  sortFilterOptions: false,
+
+  /**
+   * List of option to the filter-box (used if {{#crossLink "Utils.ModelsTableColumn/filterWithSelect:property"}}filterWithSelect{{/crossLink}} is true)
+   *
+   * @type string[]|number[]|boolean[]
+   * @property predefinedFilterOptions
+   * @default null
+   */
+  predefinedFilterOptions: null,
+
+  /**
+   * Custom classNames for column
+   *
+   * @property className
+   * @default ''
+   * @type string
+   */
+  className: '',
+
+  /**
+   * Custom function used to filter rows (used if {{#crossLink "Utils.ModelsTableColumn/filterWithSelect:property"}}filterWithSelect{{/crossLink}} is false)
+   *
+   * @property filterFunction
+   * @type function
+   */
+  filterFunction: null,
+
+  /**
+   * Placeholder for filter-input
+   *
+   * @property filterPlaceholder
+   * @type string
+   * @default ''
+   */
+  filterPlaceholder: '',
+
+  /**
+   * Object containing the definition of the column passed into the component
+   *
+   * @property originalDefinition
+   * @type object
+   * @default null
+   * @readOnly
+   */
+  originalDefinition: null,
+
+  /**
+   * @type string
+   * @property cssPropertyName
+   * @readOnly
+   */
   cssPropertyName: computed('propertyName', function () {
     return get(this, 'propertyName').replace(/\./g, '-');
   }),
 
+  /**
+   * @type boolean
+   * @property isVisible
+   * @readOnly
+   */
   isVisible: computed.not('isHidden'),
 
+  /**
+   * @type boolean
+   * @property sortAsc
+   * @readOnly
+   */
   sortAsc: computed.equal('sorting', 'asc'),
 
+  /**
+   * @type boolean
+   * @property sortDesc
+   * @readOnly
+   */
   sortDesc: computed.equal('sorting', 'desc'),
 
+  /**
+   * @type boolean
+   * @property filterUsed
+   * @readOnly
+   */
   filterUsed: computed.notEmpty('filterString'),
 
   /**
    * If preselected option doesn't exist after <code>filterOptions</code> update,
    * <code>filterString</code> is reverted to empty string (basically, filtering for this column is dropped)
+   *
+   * @method cleanFilterString
+   * @private
    */
   cleanFilterString: observer('filterWithSelect', 'filterOptions.[]', 'filterString', function () {
     let filterOptions = get(this, 'filterOptions');

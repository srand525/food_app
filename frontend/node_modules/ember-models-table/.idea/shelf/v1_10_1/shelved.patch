Index: addon/components/models-table.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table.js	(revision 9a55d6d53a2daf66b049ccfe87f6f7e7992bacae)
+++ addon/components/models-table.js	(revision )
@@ -549,7 +549,7 @@
    * @name ModelsTable#pagesCount
    */
   pagesCount: computed('arrangedContent.[]', 'pageSize', function () {
-    const pagesCount = get(this, 'arrangedContent.length') / get(this, 'pageSize');
+    const pagesCount = get(this, 'arrangedContent.length') / parseInt(get(this, 'pageSize'), 10);
     return (0 === pagesCount % 1) ? pagesCount : (Math.floor(pagesCount) + 1);
   }),
 
@@ -724,11 +724,12 @@
    * @name ModelsTable#visibleContent
    */
   visibleContent: computed('arrangedContent.[]', 'pageSize', 'currentPageNumber', function () {
-    const {
+    let {
       arrangedContent,
       pageSize,
       currentPageNumber
     } = getProperties(this, 'arrangedContent', 'pageSize', 'currentPageNumber');
+    pageSize = parseInt(pageSize, 10);
     const startIndex = pageSize * (currentPageNumber - 1);
     if (get(arrangedContent, 'length') < pageSize) {
       return arrangedContent;
@@ -779,7 +780,7 @@
       pageSize,
       arrangedContentLength
       } = getProperties(this, 'currentPageNumber', 'pageSize', 'arrangedContentLength');
-    return 0 === arrangedContentLength ? 0 : pageSize * (currentPageNumber - 1) + 1;
+    return 0 === arrangedContentLength ? 0 : parseInt(pageSize, 10) * (currentPageNumber - 1) + 1;
   }),
 
   /**
@@ -795,7 +796,7 @@
       isLastPage,
       arrangedContentLength
       } = getProperties(this, 'currentPageNumber', 'pageSize', 'isLastPage', 'arrangedContentLength');
-    return isLastPage ? arrangedContentLength : currentPageNumber * pageSize;
+    return isLastPage ? arrangedContentLength : currentPageNumber * parseInt(pageSize, 10);
   }),
 
   /**
@@ -1123,7 +1124,7 @@
       let settings = O.create({
         sort: get(this, 'sortProperties'),
         currentPageNumber: get(this, 'currentPageNumber'),
-        pageSize: get(this, 'pageSize'),
+        pageSize: parseInt(get(this, 'pageSize'), 10),
         filterString: get(this, 'filterString'),
         filteredContent: get(this, 'filteredContent'),
         selectedRowIndexes: get(this, '_selectedRowIndexes'),
@@ -1240,7 +1241,7 @@
         return;
       }
       var currentPageNumber = get(this, 'currentPageNumber');
-      var pageSize = get(this, 'pageSize');
+      var pageSize = parseInt(get(this, 'pageSize'), 10);
       var arrangedContentLength = get(this, 'arrangedContent.length');
       if (arrangedContentLength > pageSize * (currentPageNumber - 1)) {
         this.incrementProperty('currentPageNumber');
@@ -1252,7 +1253,7 @@
       if (!get(this, 'gotoForwardEnabled')) {
         return;
       }
-      var pageSize = get(this, 'pageSize');
+      var pageSize = parseInt(get(this, 'pageSize'), 10);
       var arrangedContentLength = get(this, 'arrangedContent.length');
       var pageNumber = arrangedContentLength / pageSize;
       pageNumber = (0 === pageNumber % 1) ? pageNumber : (Math.floor(pageNumber) + 1);

Index: addon/-private/column.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {\n  observer,\n  computed,\n  isEmpty,\n  Object: O,\n  set,\n  get,\n  A\n} = Ember;\n\n\n/**\n * @typedef {object} ModelsTable~ModelsTableColumn\n * @property {string} propertyName data's property shown in the current column\n * @property {string} title column's title\n * @property {string} template custom template used in the column's cells\n * @property {string} component custom component used in the column's cells. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data\n * @property {string} componentForFilterCell custom component used in the header cell with filter. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data\n * @property {string} componentForSortCell custom component used in the header cell with sorting and column title. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data\n * @property {string} sortedBy custom data's property that is used to sort column\n * @property {string} sortDirection the default sorting direction of the column, asc or desc - only in effect if sortPrecedence is set!\n * @property {number} sortPrecedence the sort precedence for this column - needs to be larger than -1 for sortDirection to take effect\n * @property {boolean} disableSorting if sorting should be disabled for this column\n * @property {boolean} disableFiltering if filtering should be disabled for this column\n * @property {string} filterString a default filtering for this column\n * @property {string} filteredBy custom data's property that is used to filter column\n * @property {string} sorting is column sorted now\n * @property {boolean} isHidden is column hidden now\n * @property {boolean} mayBeHidden may this column be hidden\n * @property {boolean} filterWithSelect should select-box be used as filter for this column\n * @property {boolean} sortFilterOptions should options in the select-box be sorted (<code>false</code> by default)\n * @property {string[]|number[]} predefinedFilterOptions list of option to the filter-box (used if <code>filterWithSelect</code> is true)\n * @property {string} className custom classNames for column\n * @property {function} filterFunction custom function used to filter rows (used if <code>filterWithSelect</code> is false)\n * @property {string} filterPlaceholder placeholder for filter-input\n * @property {object} originalDefinition object containing the definition of the column passed into the component\n */\nexport default O.extend({\n\n  cssPropertyName: computed('propertyName', function () {\n    return get(this, 'propertyName').replace(/\\./g, '-');\n  }),\n\n  isVisible: computed.not('isHidden'),\n\n  sortAsc: computed.equal('sorting', 'asc'),\n\n  sortDesc: computed.equal('sorting', 'desc'),\n\n  filterUsed: computed.notEmpty('filterString'),\n\n  /**\n   * If preselected option doesn't exist after <code>filterOptions</code> update,\n   * <code>filterString</code> is reverted to empty string (basically, filtering for this column is dropped)\n   */\n  cleanFilterString: observer('filterWithSelect', 'filterOptions.[]', 'filterString', function () {\n    let filterOptions = get(this, 'filterOptions');\n    let filterWithSelect = get(this, 'filterWithSelect');\n    let filterString = get(this, 'filterString');\n    if (!filterWithSelect || isEmpty(filterOptions)) {\n      return;\n    }\n    const filterOptionExists = A(filterOptions).find(option => {\n      const value = get(option, 'value');\n      return [value, '' + value].indexOf(filterString) !== -1;\n    });\n    if (!filterOptionExists) {\n      set(this, 'filterString', '');\n    }\n  })\n\n});\n
===================================================================
--- addon/-private/column.js	(revision 146369f11accfd0d6bcc354c8b0c6a62fa7c23ed)
+++ addon/-private/column.js	
@@ -15,7 +15,6 @@
  * @typedef {object} ModelsTable~ModelsTableColumn
  * @property {string} propertyName data's property shown in the current column
  * @property {string} title column's title
- * @property {string} template custom template used in the column's cells
  * @property {string} component custom component used in the column's cells. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
  * @property {string} componentForFilterCell custom component used in the header cell with filter. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
  * @property {string} componentForSortCell custom component used in the header cell with sorting and column title. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data

Index: app/templates/components/models-table/page-size.hbs
===================================================================
--- app/templates/components/models-table/page-size.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/page-size.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,9 +0,0 @@
-<div class="{{classes.pageSizeWrapper}}">
-  <div class="{{classes.pageSizeSelectWrapper}}">
-    {{models-select
-      options=pageSizeOptions
-      value=pageSize
-      class=(concat classes.input " changePageSize")
-    }}
-  </div>
-</div>
\ No newline at end of file
Index: app/components/models-table/pagination-numeric.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/pagination-numeric.js	(revision )
+++ app/components/models-table/pagination-numeric.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/pagination-numeric';
Index: tests/dummy/app/components/sort-cell.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport layout from '../templates/components/sort-cell';\n\nexport default Ember.Component.extend({\n  layout\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/sort-cell.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/components/sort-cell.js	(revision )
@@ -1,6 +1,6 @@
-import Ember from 'ember';
+import Component from '@ember/component';
 import layout from '../templates/components/sort-cell';
 
-export default Ember.Component.extend({
+export default Component.extend({
   layout
 });
Index: tests/dummy/app/templates/components/custom-pagination.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-pagination.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-pagination.hbs	(revision )
@@ -0,0 +1,5 @@
+<a href="#" {{action "gotoFirst"}} class={{gotoBackEnabled:enabled:disabled}}>F</a>&nbsp;
+<a href="#" {{action "gotoPrev"}} class={{gotoBackEnabled:enabled:disabled}}>P</a>&nbsp;
+<a href="#" {{action "gotoNext"}} class={{gotoForwardEnabled:enabled:disabled}}>N</a>&nbsp;
+<a href="#" {{action "gotoLast"}} class={{gotoForwardEnabled:enabled:disabled}}>L</a>
+{{yield}}
\ No newline at end of file
Index: addon/components/models-table/page-size-select.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/page-size-select.js	(revision )
+++ addon/components/models-table/page-size-select.js	(revision )
@@ -0,0 +1,70 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/page-size-select';
+
+/**
+ * Dropdown with page size values used within [models-table/footer](Components.ModelsTableFooter.html).
+ *
+ * Value from [ModelsTable.pageSizeOptions](Components.ModelsTable.html#property_pageSizeOptions) is used as a list of dropdown-options.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.footer as |footer|}}
+ *     {{footer.size-select}}
+ *     {{! ... }}
+ *   {{/mt.footer}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTablePageSizeSelect
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pageSizeOptions:property"}}ModelsTable.pageSizeOptions{{/crossLink}}
+   *
+   * @property pageSizeOptions
+   * @type object[]
+   * @default null
+   */
+  pageSizeOptions: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pageSize:property"}}ModelsTable.pageSize{{/crossLink}}
+   *
+   * @property pageSize
+   * @type number
+   * @default null
+   */
+  pageSize: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null
+});
Index: .eslintrc.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module.exports = {\n  root: true,\n  parserOptions: {\n    ecmaVersion: 2017,\n    sourceType: 'module'\n  },\n  extends: 'eslint:recommended',\n  env: {\n    browser: true,\n    jquery: true\n  },\n  rules: {\n  }\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .eslintrc.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ .eslintrc.js	(revision )
@@ -10,5 +10,12 @@
     jquery: true
   },
   rules: {
+    "valid-jsdoc": [2, {
+      "prefer": {
+        "return": "returns",
+      },
+      "requireParamDescription": false,
+      "requireReturnDescription": false
+    }]
   }
 };
Index: tests/helpers/module-for-acceptance.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { module } from 'qunit';\nimport Ember from 'ember';\nimport startApp from '../helpers/start-app';\nimport destroyApp from '../helpers/destroy-app';\n\nconst { RSVP: { resolve } } = Ember;\n\nexport default function(name, options = {}) {\n  module(name, {\n    beforeEach() {\n      this.application = startApp();\n\n      if (options.beforeEach) {\n        return options.beforeEach.apply(this, arguments);\n      }\n    },\n\n    afterEach() {\n      let afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n      return resolve(afterEach).then(() => destroyApp(this.application));\n    }\n  });\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/helpers/module-for-acceptance.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/helpers/module-for-acceptance.js	(revision )
@@ -1,10 +1,8 @@
+import { resolve } from 'rsvp';
 import { module } from 'qunit';
-import Ember from 'ember';
 import startApp from '../helpers/start-app';
 import destroyApp from '../helpers/destroy-app';
 
-const { RSVP: { resolve } } = Ember;
-
 export default function(name, options = {}) {
   module(name, {
     beforeEach() {
Index: addon/templates/components/models-table.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"models-table-wrapper {{classes.outerTableWrapper}}\">\n  <div class=\"{{classes.globalFilterDropdownWrapper}}\">\n    {{! global filter start }}\n    {{#if showGlobalFilter}}\n      {{partial globalFilterTemplate}}\n    {{/if}}\n    {{! global filter end }}\n    {{! columns dropdown start }}\n    {{#if showColumnsDropdown}}\n      {{partial columnsDropdownTemplate}}\n    {{/if}}\n    {{! columns dropdown end }}\n  </div>\n\n  <!-- Div needed by Firefox to reset floating positioning -->\n  <div class='models-table-clear'></div>\n\n  <div class=\"{{classes.innerTableWrapper}}\">\n    <table class=\"{{classes.table}}\">\n      {{! table header start }}\n      <thead class=\"{{if noHeaderFilteringAndSorting 'table-header-no-filtering-and-sorting'}} {{classes.thead}}\">\n        {{#if groupedHeaders.length}}\n          {{partial headerGroupedRowsTemplate}}\n        {{/if}}\n        {{partial headerSortingRowTemplate}}\n        {{#if useFilteringByColumns}}\n          {{partial headerFilteringRowTemplate}}\n        {{/if}}\n      </thead>\n      {{! table header end }}\n      {{! table body start }}\n      <tbody>\n        {{#if allColumnsAreHidden}}\n          {{partial allColumnsHiddenTemplate}}\n        {{else}}\n          {{#if visibleContent.length}}\n            {{! template-lint-disable unused-block-params}}\n            {{#each visibleContent as |record index|}}\n              {{partial rowTemplate}}\n            {{/each}}\n            {{! template-lint-enable unused-block-params}}\n          {{else}}\n            {{partial noDataShowTemplate}}\n          {{/if}}\n        {{/if}}\n      </tbody>\n      {{! table body end }}\n      {{! table footer start }}\n      <tfoot>\n        {{partial tableFooterTemplate}}\n      </tfoot>\n      {{! table footer end }}\n    </table>\n  </div>\n  {{! table footer start }}\n  {{#if showComponentFooter}}\n    {{partial componentFooterTemplate}}\n  {{/if}}\n  {{! table footer end }}\n</div>\n{{yield}}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/templates/components/models-table.hbs	(revision )
@@ -1,61 +1,145 @@
-<div class="models-table-wrapper {{classes.outerTableWrapper}}">
-  <div class="{{classes.globalFilterDropdownWrapper}}">
-    {{! global filter start }}
-    {{#if showGlobalFilter}}
-      {{partial globalFilterTemplate}}
-    {{/if}}
-    {{! global filter end }}
-    {{! columns dropdown start }}
-    {{#if showColumnsDropdown}}
-      {{partial columnsDropdownTemplate}}
-    {{/if}}
-    {{! columns dropdown end }}
-  </div>
+{{#if hasBlock}}
+  {{yield
+    (hash
+      global-filter=(
+        component "models-table/global-filter"
+        value=filterString
+        globalFilterUsed=globalFilterUsed
+        themeInstance=themeInstance
+        messages=messages
+        sendAction=(action "sendAction")
+      )
+      columns-dropdown=(
+        component "models-table/columns-dropdown"
+        processedColumns=processedColumns
+        columnDropdownOptions=columnDropdownOptions
+        themeInstance=themeInstance
+        messages=messages
+        showAllColumns=(action "showAllColumns")
+        hideAllColumns=(action "hideAllColumns")
+        restoreDefaultVisibility=(action "restoreDefaultVisibility")
+        toggleColumnSet=(action "toggleColumnSet")
+        toggleHidden=(action "toggleHidden")
+        sendAction=(action "sendAction")
+      )
+      table=(
+        component "models-table/table"
+        noHeaderFilteringAndSorting=noHeaderFilteringAndSorting
+        groupedHeaders=groupedHeaders
+        processedColumns=processedColumns
+        sort=(action "sort")
+        visibleContent=visibleContent
+        selectedItems=_selectedItems
+        expandedItems=_expandedItems
+        expandedRowComponent=expandedRowComponent
+        visibleProcessedColumns=visibleProcessedColumns
+        useFilteringByColumns=useFilteringByColumns
+        allColumnsAreHidden=allColumnsAreHidden
+        clickOnRow=(action "clickOnRow")
+        data=data
+        themeInstance=themeInstance
+        messages=messages
+        sendAction=(action "sendAction")
+        expandRow=(action "expandRow")
+        collapseRow=(action "collapseRow")
+        expandAllRows=(action "expandAllRows")
+        collapseAllRows=(action "collapseAllRows")
+        toggleAllSelection=(action "toggleAllSelection")
+      )
+      footer=(
+        component "models-table/footer"
+        firstIndex=firstIndex
+        lastIndex=lastIndex
+        recordsCount=arrangedContentLength
+        anyFilterUsed=anyFilterUsed
+        pageSizeOptions=pageSizeOptions
+        pageSize=pageSize
+        currentPageNumber=currentPageNumber
+        pagesCount=pagesCount
+        showPageSize=showPageSize
+        useNumericPagination=useNumericPagination
+        goToPage=(action "gotoCustomPage")
+        clearFilters=(action "clearFilters")
+        themeInstance=themeInstance
+        messages=messages
+        sendAction=(action "sendAction")
+      )
+    )
+  }}
+{{else}}
+  {{! global filter start }}
+  {{#if showGlobalFilter}}
+    {{models-table/global-filter
+      value=filterString
+      globalFilterUsed=globalFilterUsed
+      themeInstance=themeInstance
+      messages=messages
+      sendAction=(action "sendAction")
+    }}
+  {{/if}}
+  {{! global filter end }}
+  {{! columns dropdown start }}
+  {{#if showColumnsDropdown}}
+    {{models-table/columns-dropdown
+      processedColumns=processedColumns
+      columnDropdownOptions=columnDropdownOptions
+      themeInstance=themeInstance
+      messages=messages
+      showAllColumns=(action "showAllColumns")
+      hideAllColumns=(action "hideAllColumns")
+      restoreDefaultVisibility=(action "restoreDefaultVisibility")
+      toggleColumnSet=(action "toggleColumnSet")
+      toggleHidden=(action "toggleHidden")
+      sendAction=(action "sendAction")
+    }}
+  {{/if}}
+  {{! columns dropdown end }}
 
-  <!-- Div needed by Firefox to reset floating positioning -->
+  {{! Div needed by Firefox to reset floating positioning }}
   <div class='models-table-clear'></div>
 
-  <div class="{{classes.innerTableWrapper}}">
-    <table class="{{classes.table}}">
-      {{! table header start }}
-      <thead class="{{if noHeaderFilteringAndSorting 'table-header-no-filtering-and-sorting'}} {{classes.thead}}">
-        {{#if groupedHeaders.length}}
-          {{partial headerGroupedRowsTemplate}}
-        {{/if}}
-        {{partial headerSortingRowTemplate}}
-        {{#if useFilteringByColumns}}
-          {{partial headerFilteringRowTemplate}}
-        {{/if}}
-      </thead>
-      {{! table header end }}
-      {{! table body start }}
-      <tbody>
-        {{#if allColumnsAreHidden}}
-          {{partial allColumnsHiddenTemplate}}
-        {{else}}
-          {{#if visibleContent.length}}
-            {{! template-lint-disable unused-block-params}}
-            {{#each visibleContent as |record index|}}
-              {{partial rowTemplate}}
-            {{/each}}
-            {{! template-lint-enable unused-block-params}}
-          {{else}}
-            {{partial noDataShowTemplate}}
-          {{/if}}
-        {{/if}}
-      </tbody>
-      {{! table body end }}
-      {{! table footer start }}
-      <tfoot>
-        {{partial tableFooterTemplate}}
-      </tfoot>
-      {{! table footer end }}
-    </table>
-  </div>
+  {{models-table/table
+    noHeaderFilteringAndSorting=noHeaderFilteringAndSorting
+    groupedHeaders=groupedHeaders
+    processedColumns=processedColumns
+    sort=(action "sort")
+    visibleContent=visibleContent
+    selectedItems=_selectedItems
+    useFilteringByColumns=useFilteringByColumns
+    expandedItems=_expandedItems
+    visibleProcessedColumns=visibleProcessedColumns
+    allColumnsAreHidden=allColumnsAreHidden
+    clickOnRow=(action "clickOnRow")
+    sendAction=(action "sendAction")
+    data=data
+    themeInstance=themeInstance
+    messages=messages
+    expandedRowComponent=expandedRowComponent
+    expandRow=(action "expandRow")
+    collapseRow=(action "collapseRow")
+    expandAllRows=(action "expandAllRows")
+    collapseAllRows=(action "collapseAllRows")
+    toggleAllSelection=(action "toggleAllSelection")
+  }}
   {{! table footer start }}
   {{#if showComponentFooter}}
-    {{partial componentFooterTemplate}}
+    {{models-table/footer
+      firstIndex=firstIndex
+      lastIndex=lastIndex
+      recordsCount=arrangedContentLength
+      anyFilterUsed=anyFilterUsed
+      pageSizeOptions=pageSizeOptions
+      pageSize=pageSize
+      currentPageNumber=currentPageNumber
+      pagesCount=pagesCount
+      showPageSize=showPageSize
+      useNumericPagination=useNumericPagination
+      goToPage=(action "gotoCustomPage")
+      themeInstance=themeInstance
+      clearFilters=(action "clearFilters")
+      sendAction=(action "sendAction")
+      messages=messages
+    }}
   {{/if}}
   {{! table footer end }}
-</div>
-{{yield}}
+{{/if}}
Index: addon/components/models-table/select.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/select.js	(revision )
+++ addon/components/models-table/select.js	(revision )
@@ -0,0 +1,38 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/select';
+
+/**
+ * Select-dropdown with a list of options. Used as page-size select and for select-filters.
+ *
+ * @class ModelsTableSelect
+ * @namespace Components
+ * @extends Ember.Component
+ * @private
+ */
+export default Component.extend({
+
+  layout,
+  tagName: 'select',
+  classNameBindings: ['cssPropertyName', 'themeInstance.input', 'themeInstance.select'],
+
+  /**
+   * @type string
+   * @default ''
+   * @property cssPropertyName
+   */
+  cssPropertyName: '',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  change() {
+    this.set('value', this.$('option:selected').val());
+  }
+
+});
Index: addon/components/models-table/pagination-simple.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/pagination-simple.js	(revision )
+++ addon/components/models-table/pagination-simple.js	(revision )
@@ -0,0 +1,156 @@
+import Component from '@ember/component';
+import { get, computed } from '@ember/object';
+import layout from '../../templates/components/models-table/pagination-simple';
+
+/**
+ * Simple navigation (first, prev, next, last) used within [models-table/footer](Components.ModelsTableFooter.html).
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.footer as |footer|}}
+ *     {{footer.pagination-simple}}
+ *     {{! ... }}
+ *   {{/mt.footer}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTablePaginationSimple
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+
+  classNameBindings: ['themeInstance.paginationWrapper', 'themeInstance.paginationWrapperDefault'],
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/currentPageNumber:property"}}ModelsTable.currentPageNumber{{/crossLink}}
+   *
+   * @property currentPageNumber
+   * @type number
+   * @default null
+   */
+  currentPageNumber: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/arrangedContentLength:property"}}ModelsTable.arrangedContentLength{{/crossLink}}
+   *
+   * @property recordsCount
+   * @type number
+   * @default null
+   */
+  recordsCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pagesCount:property"}}ModelsTable.pagesCount{{/crossLink}}
+   *
+   * @property pagesCount
+   * @type number
+   * @default null
+   */
+  pagesCount: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.gotoCustomPage:method"}}ModelsTable.actions.gotoCustomPage{{/crossLink}}
+   *
+   * @event goToPage
+   */
+  goToPage: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pageSize:property"}}ModelsTable.pageSize{{/crossLink}}
+   *
+   * @property pageSize
+   * @type number
+   * @default null
+   */
+  pageSize: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Are buttons "Back" and "First" enabled
+   *
+   * @type boolean
+   * @property gotoBackEnabled
+   */
+  gotoBackEnabled: computed.gt('currentPageNumber', 1),
+
+  /**
+   * Are buttons "Next" and "Last" enabled
+   *
+   * @type boolean
+   * @property gotoForwardEnabled
+   */
+  gotoForwardEnabled: computed('currentPageNumber', 'pagesCount', function () {
+    return get(this, 'currentPageNumber') < get(this, 'pagesCount');
+  }),
+
+  actions: {
+    gotoFirst () {
+      if (!get(this, 'gotoBackEnabled')) {
+        return;
+      }
+      get(this, 'goToPage')(1);
+    },
+
+    gotoPrev () {
+      if (!get(this, 'gotoBackEnabled')) {
+        return;
+      }
+      const currentPageNumber = get(this, 'currentPageNumber');
+      if (currentPageNumber > 1) {
+        get(this, 'goToPage')(currentPageNumber - 1);
+      }
+    },
+
+    gotoNext () {
+      if (!get(this, 'gotoForwardEnabled')) {
+        return;
+      }
+      let currentPageNumber = get(this, 'currentPageNumber');
+      let pageSize = parseInt(get(this, 'pageSize'), 10);
+      let arrangedContentLength = get(this, 'recordsCount');
+      if (arrangedContentLength > pageSize * (currentPageNumber - 1)) {
+        get(this, 'goToPage')(currentPageNumber + 1);
+      }
+    },
+
+    gotoLast () {
+      if (!get(this, 'gotoForwardEnabled')) {
+        return;
+      }
+      let pageSize = parseInt(get(this, 'pageSize'), 10);
+      let arrangedContentLength = get(this, 'recordsCount');
+      let pageNumber = arrangedContentLength / pageSize;
+      pageNumber = (0 === pageNumber % 1) ? pageNumber : (Math.floor(pageNumber) + 1);
+      get(this, 'goToPage')(pageNumber);
+    }
+  }
+});
Index: addon/templates/components/models-table/row-filtering.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/row-filtering.hbs	(revision )
+++ addon/templates/components/models-table/row-filtering.hbs	(revision )
@@ -0,0 +1,60 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      themeInstance=themeInstance
+      sendAction=sendAction
+      selectedItems=selectedItems
+      expandedItems=expandedItems
+      expandAllRows=expandAllRows
+      collapseAllRows=collapseAllRows
+      toggleAllSelection=toggleAllSelection
+      processedColumns=processedColumns
+    )
+  }}
+{{else}}
+  {{#each processedColumns as |column|}}
+    {{#if column.isVisible}}
+      <th class="{{themeInstance.theadCell}} {{unless column.useFilter themeInstance.theadCellNoFiltering}} {{column.className}}">
+        {{#if column.componentForFilterCell}}
+          {{component
+            column.componentForFilterCell
+            column=column
+            data=data
+            selectedItems=selectedItems
+            expandedItems=expandedItems
+            sendAction=sendAction
+            themeInstance=themeInstance
+            expandAllRows=expandAllRows
+            collapseAllRows=collapseAllRows
+            toggleAllSelection=toggleAllSelection
+          }}
+        {{else}}
+          {{#if column.useFilter}}
+            <div class="{{if column.filterUsed "has-feedback"}}">
+              {{#if column.filterWithSelect}}
+                {{models-table/select
+                  options=column.filterOptions
+                  cssPropertyName=column.cssPropertyName
+                  value=column.filterString
+                  themeInstance=themeInstance
+                  sendAction=sendAction
+                  themeInstance=themeInstance
+                  class=(concat themeInstance.input " changeFilterForColumn")
+                  expandAllRows=expandAllRows
+                  collapseAllRows=collapseAllRows
+                }}
+              {{else}}
+                {{input type="text" value=column.filterString class=themeInstance.input enter="" placeholder=column.filterPlaceholder}}
+              {{/if}}
+              {{#if column.filterUsed}}
+                <span class="clearFilterIcon {{themeInstance.clearFilterIcon}}" onclick={{action (mut column.filterString) ""}}></span>
+              {{/if}}
+            </div>
+          {{else}}
+            &nbsp;
+          {{/if}}
+        {{/if}}
+      </th>
+    {{/if}}
+  {{/each}}
+{{/if}}
\ No newline at end of file
Index: addon/utils/fmt.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from \"ember\";\n\nexport default function fmt(str, formats) {\n  let cachedFormats = formats;\n\n  if (!Ember.isArray(cachedFormats) || arguments.length > 2) {\n    cachedFormats = new Array(arguments.length - 1);\n\n    for (let i = 1, l = arguments.length; i < l; i++) {\n      cachedFormats[i - 1] = arguments[i];\n    }\n  }\n\n  // first, replace any ORDERED replacements.\n  let idx  = 0; // the current index for non-numerical replacements\n  return str.replace(/%@([0-9]+)?/g, function(s, argIndex) {\n    argIndex = (argIndex) ? parseInt(argIndex, 10) - 1 : idx++;\n    return cachedFormats[argIndex];\n  });\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/utils/fmt.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/utils/fmt.js	(revision )
@@ -1,9 +1,9 @@
-import Ember from "ember";
+import { isArray } from '@ember/array';
 
 export default function fmt(str, formats) {
   let cachedFormats = formats;
 
-  if (!Ember.isArray(cachedFormats) || arguments.length > 2) {
+  if (!isArray(cachedFormats) || arguments.length > 2) {
     cachedFormats = new Array(arguments.length - 1);
 
     for (let i = 1, l = arguments.length; i < l; i++) {
Index: addon/utils/assign-poly.js
===================================================================
--- addon/utils/assign-poly.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/utils/assign-poly.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,15 +0,0 @@
-export default function assignPoly (original) {
-  for (let i = 1; i < arguments.length; i++) {
-    let arg = arguments[i];
-    if (!arg) { continue; }
-
-    let updates = Object.keys(arg);
-
-    for (let i = 0; i < updates.length; i++) {
-      let prop = updates[i];
-      original[prop] = arg[prop];
-    }
-  }
-
-  return original;
-}
\ No newline at end of file
Index: tests/dummy/app/components/custom-concat.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-concat.js	(revision )
+++ tests/dummy/app/components/custom-concat.js	(revision )
@@ -0,0 +1,6 @@
+import Component from '@ember/component';
+import layout from '../templates/components/custom-concat';
+
+export default Component.extend({
+  layout
+});
Index: tests/dummy/app/controllers/examples/display-data-changed-action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport generateContent from '../../utils/c';\n\nconst {A, set} = Ember;\n\nexport default Ember.Controller.extend({\n\n  title: '`displayDataChangedAction` argument',\n  model: generateContent(30),\n  actionData: null,\n  columns: A([\n    {propertyName: 'id'},\n    {propertyName: 'firstName'},\n    {propertyName: 'lastName'},\n    {propertyName: 'city'}\n  ]),\n\n  actions: {\n    myAction(data) {\n      data.filteredContent = [`/* array with filtered records (${data.filteredContent.length}) */`];\n      data.selectedItems = [`/* array with selected records (${data.selectedItems.length}) */`];\n      set(this, 'actionData', data);\n      this.toggleProperty('trigger');\n    }\n  }\n\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/examples/display-data-changed-action.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/display-data-changed-action.js	(revision )
@@ -1,24 +1,13 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
+import Controller from '@ember/controller';
+import { set, get } from '@ember/object';
 
-const {A, set} = Ember;
+export default Controller.extend({
 
-export default Ember.Controller.extend({
-
-  title: '`displayDataChangedAction` argument',
-  model: generateContent(30),
   actionData: null,
-  columns: A([
-    {propertyName: 'id'},
-    {propertyName: 'firstName'},
-    {propertyName: 'lastName'},
-    {propertyName: 'city'}
-  ]),
-
   actions: {
     myAction(data) {
-      data.filteredContent = [`/* array with filtered records (${data.filteredContent.length}) */`];
-      data.selectedItems = [`/* array with selected records (${data.selectedItems.length}) */`];
+      data.filteredContent = [`/* array with filtered records (${get(data, 'filteredContent.length')}) */`];
+      data.selectedItems = [`/* array with selected records (${get(data, 'selectedItems.length')}) */`];
       set(this, 'actionData', data);
       this.toggleProperty('trigger');
     }
Index: tests/dummy/app/controllers/examples/filtering-select-box-bool.js
===================================================================
--- tests/dummy/app/controllers/examples/filtering-select-box-bool.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/filtering-select-box-bool.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,33 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Filtering with select-box (by boolean values)',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    },
-    {
-      propertyName: 'rand',
-      filterWithSelect: true
-    }
-  ])
-
-});
\ No newline at end of file
Index: tests/dummy/app/models/user.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport DS from 'ember-data';\n\nconst {computed} = Ember;\n\nexport default DS.Model.extend({\n\n  index: DS.attr('number'),\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  age: DS.attr('number'),\n  city: DS.attr('string'),\n\n  cityWithHtml: computed('city', function () {\n    return `<i>${this.get('city')}</i>`;\n  })\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/models/user.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/models/user.js	(revision )
@@ -1,8 +1,6 @@
-import Ember from 'ember';
+import {computed} from '@ember/object';
 import DS from 'ember-data';
 
-const {computed} = Ember;
-
 export default DS.Model.extend({
 
   index: DS.attr('number'),
@@ -13,6 +11,8 @@
 
   cityWithHtml: computed('city', function () {
     return `<i>${this.get('city')}</i>`;
-  })
+  }),
+
+  canBuyBeer: computed.gt('age', 20)
 
 });
Index: tests/integration/components/models-table-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nimport {\n  moduleForComponent,\n  test\n} from 'ember-qunit';\n\nimport hbs from 'htmlbars-inline-precompile';\n\nimport * as dom from '../../helpers/dom';\n\nimport {\n  generateContent,\n  generateColumns\n} from '../../helpers/f';\n\nconst {\n  A,\n  typeOf,\n  Object: O\n} = Ember;\n\nlet selectors;\n\nconst oneTen = 'one|two|three|four|five|six|seven|eight|nine|ten';\nconst oneTenAsc = 'eight|five|four|nine|one|seven|six|ten|three|two';\nconst oneTenDesc = 'two|three|ten|six|seven|one|nine|four|five|eight';\n\nmoduleForComponent('models-table', 'ModelsTable | Integration', {\n  integration: true,\n\n  beforeEach() {\n    Object.keys(dom).forEach(m => {\n      let f = dom[m];\n      if ('function' === typeOf(f)) {\n        this[m] = f.bind(this);\n      }\n    });\n    selectors = dom.selectors;\n  }\n\n});\n\nfunction signFilter (cellValue, neededString) {\n  const signs = ['<', '>', '='];\n  let neededNumber = neededString;\n  let sign = '=';\n  if (-1 !== signs.indexOf(neededString[0])) {\n    sign = neededString[0];\n    neededNumber = parseInt(neededString.substring(1), 10);\n  }\n  let _cellValue = parseInt(cellValue, 10);\n  if ('=' === sign) {\n    return _cellValue === neededNumber;\n  }\n  if ('>' === sign) {\n    return _cellValue > neededNumber;\n  }\n  if ('<' === sign) {\n    return _cellValue < neededNumber;\n  }\n  return cellValue === neededNumber;\n}\n\ntest('summary', function (assert) {\n\n  var data = A([]);\n  this.setProperties({\n    data: data,\n    columns: generateColumns(['index'])\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 0 - 0 of 0', 'Empty content');\n\n  this.set('data', generateContent(10));\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'Content for 1 page');\n\n  this.set('data', generateContent(15));\n  this.nextPage();\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 15 of 15', 'Content for 2 pages. Last page selected');\n\n  this.set('data', generateContent(35));\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 20 of 35', 'Content for 4 pages. Middle page selected');\n\n});\n\ntest('basic render', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'reversedIndex']),\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.equal(this.getCount('table'), 1, 'Table exists');\n  assert.equal(this.getCount(selectors.allRows), 10, 'Table has 10 rows');\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'Summary is valid');\n  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 4, 'All navigation buttons are disabled');\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid');\n\n});\n\ntest('basic render with data update', function (assert) {\n  this.set('data', generateContent(10, 1));\n  this.set('columns', generateColumns(['index', 'reversedIndex']));\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getCount('table'), 1, 'Table exists');\n  assert.equal(this.getCount(selectors.allRows), 10, 'Table has 10 rows');\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'Summary is valid');\n  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 4, 'All navigation buttons are disabled');\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid');\n\n  this.set('data.0.index', 11);\n  assert.equal(this.getEachAsString(selectors.firstColumn), '112345678910', 'Content is valid after update');\n\n  this.set('data.firstObject.index', 12);\n  assert.equal(this.getEachAsString(selectors.firstColumn), '122345678910', 'Content is valid after second update');\n\n});\n\ntest('render without footer', function (assert) {\n\n  this.set('showComponentFooter', false);\n  this.render(hbs`{{models-table showComponentFooter=showComponentFooter}}`);\n\n  assert.equal(this.getCount('.table-footer'), 0, 'table footer isn\\'t rendered');\n\n});\n\ntest('pageSizeObserver', function (assert) {\n\n  this.set('data', generateContent(50, 1));\n  this.render(hbs`{{models-table data=data}}`);\n\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 50', 'init value');\n  this.nextPage();\n\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 20 of 50', 'value changed by user');\n  this.changePageSize(25);\n\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 25 of 50', 'value restored to 1');\n\n});\n\ntest('visibleContent', function (assert) {\n\n  var currentPageNumber = 1;\n  var data = generateContent(10);\n  var columns = generateColumns(['index']);\n  this.setProperties({\n    columns: columns,\n    data: data,\n    pageSize: 10,\n    currentPageNumber: currentPageNumber\n  });\n\n  this.render(hbs`{{models-table data=data currentPageNumber=currentPageNumber pageSize=pageSize columns=columns}}`);\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(10).mapBy('index').join('|'), 'One page');\n\n  this.setProperties({\n    data: generateContent(25, 1),\n    currentPageNumber: 2\n  });\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(10, 11).mapBy('index').join('|'), 'Second page');\n\n  this.setProperties({\n    data: generateContent(25, 1),\n    currentPageNumber: 1,\n    pageSize: 50\n  });\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(25, 1).mapBy('index').join('|'), 'One big page');\n\n  this.setProperties({\n    data: generateContent(25, 1),\n    currentPageNumber: 3,\n    pageSize: 10\n  });\n  this.nextPage();\n  this.nextPage();\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(5, 21).mapBy('index').join('|'), 'Last page');\n\n});\n\ntest('visibleContent with page size changing and pagination', function (assert) {\n\n  this.setProperties({\n    data: generateContent(1000, 1),\n    columns: generateColumns(['index'])\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  this.changePageSize(25);\n  assert.equal(this.getCount(selectors.tbodyAllRows), 25, '1st page has 25 rows');\n\n  this.nextPage();\n  assert.equal(this.getCount(selectors.tbodyAllRows), 25, '2nd page has 25 rows');\n\n  this.nextPage();\n  assert.equal(this.getCount(selectors.tbodyAllRows), 25, '3rd page has 25 rows');\n\n});\n\ntest('gotoBackEnabled', function (assert) {\n\n  this.setProperties({\n    data: generateContent(25, 1),\n    columns: generateColumns(['index'])\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  assert.ok(this.getEachClassAsString(selectors.tableNavBtnBack).indexOf('disabled') !== -1, 'Disabled, if user is on the 1st page');\n\n  this.nextPage();\n  assert.equal(this.getEachClassAsString(selectors.tableNavBtnBack).indexOf('disabled'), -1, `Enabled, if user isn't on the 1st page`);\n\n});\n\ntest('gotoForwardEnabled', function (assert) {\n\n  this.setProperties({\n    data: generateContent(10),\n    columns: generateColumns(['id'])\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n  assert.ok(this.getEachClassAsString(selectors.tableNavBtnNext).indexOf('disabled') !== -1, 'One page only');\n\n  this.set('data', generateContent(11));\n  assert.equal(this.getEachClassAsString(selectors.tableNavBtnNext).indexOf('disabled'), -1, `'One page + 1 record more`);\n\n  this.setProperties({\n    data: generateContent(25)\n  });\n  this.nextPage();\n  this.nextPage();\n  this.nextPage();\n  assert.ok(this.getEachClassAsString(selectors.tableNavBtnNext).indexOf('disabled') !== -1, 'Three pages, last one selected');\n\n});\n\ntest('render multi-pages table', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'reversedIndex']),\n    data: generateContent(20, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 2, '2 navigation buttons are disabled');\n  assert.equal(this.getCount(`${selectors.navigationLinks}.enabled`, '|'), 2, '2 navigation buttons are enabled');\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 20', 'Summary is valid');\n\n  this.nextPage();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '11121314151617181920', 'Content is valid');\n  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 2, '2 navigation buttons are disabled');\n  assert.equal(this.getCount(`${selectors.navigationLinks}.enabled`, '|'), 2, '2 navigation buttons are enabled');\n\n});\n\ntest('render custom template in the table cell', function (assert) {\n\n  var columns = generateColumns(['index', 'indexWithHtml']);\n  columns[1].template = 'custom/test';\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), '1+10|2+9|3+8|4+7|5+6|6+5|7+4|8+3|9+2|10+1', 'Content is valid');\n\n});\n\ntest('render custom component in the table cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].component = 'cell-component';\n  this.setProperties({\n    data: generateContent(20, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');\n\n});\n\ntest('render custom template (input) in the filter cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].templateForFilterCell = 'custom/filter-cell-input';\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');\n\n  this.filterSecondColumn('one');\n  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');\n\n  this.clearSecondColumnFilterByIcon();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');\n\n});\n\ntest('render custom template (select) in the filter cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  var data = generateContent(10, 1);\n  columns[1].templateForFilterCell = 'custom/filter-cell-select';\n  columns[1].filterWithSelect = true;\n  this.setProperties({\n    data: data,\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getEachAsString(`${selectors.theadSecondRowSecondColumnFilterSelect} option`, '|'), `|${oneTen}`, 'Filter options are correct');\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');\n\n  this.clearSecondColumnFilterByIcon();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');\n\n});\n\ntest('render custom component (input) in the filter cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].componentForFilterCell = 'filter-cell-input';\n\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');\n\n  this.filterSecondColumn('one');\n  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');\n\n  this.clearSecondColumnFilterByIcon();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');\n\n});\n\ntest('render custom component (select) in the filter cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].componentForFilterCell = 'filter-cell-select';\n\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n  assert.equal(this.getEachAsString(`${selectors.theadSecondRowSecondColumnFilterSelect} option`, '|'), `|${oneTen}`, 'Filter options are correct');\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');\n\n  this.clearSecondColumnFilterByIcon();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');\n\n});\n\ntest('render custom template in the sort cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].templateForSortCell = 'custom/sort-cell';\n\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);\n\n  this.sortSecondColumn();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenAsc, 'Content is valid (sorting 2nd column asc)');\n\n  this.sortSecondColumn();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenDesc, 'Content is valid (sorting 2nd column desc)');\n\n});\n\ntest('render custom component in the sort cell', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].componentForSortCell = 'sort-cell';\n\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);\n  this.sortSecondColumn();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenAsc, 'Content is valid (sorting 2nd column asc)');\n\n  this.sortSecondColumn();\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenDesc, 'Content is valid (sorting 2nd column desc)');\n\n});\n\ntest('render custom simple pagination', function (assert) {\n\n  this.set('simplePaginationTemplate', 'custom/pagination');\n\n  this.render(hbs`{{models-table simplePaginationTemplate=simplePaginationTemplate}}`);\n  assert.equal(this.getEachAsString('.table-nav').replace(/\\s+/g, ' '), 'F P N L', 'Custom labels are used');\n\n});\n\ntest('render show/hide columns', function (assert) {\n\n  var firstColumnIconSelector = '.columns-dropdown li:nth-child(5) a span';\n  var secondColumnIconSelector = '.columns-dropdown li:nth-child(6) a span';\n  var checkedClass = 'glyphicon-check';\n  var uncheckedClass = 'glyphicon-unchecked';\n  this.setProperties({\n    columns: generateColumns(['index', 'reversedIndex']),\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');\n\n  this.toggleFirstColumnVisibility();\n\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');\n  assert.equal(this.getEachAsString(selectors.theadFirstRowFirstCell), 'reversedIndex', 'Valid column is shown (thead)');\n  assert.equal(this.$(firstColumnIconSelector).hasClass(uncheckedClass), true, 'First column is unchecked');\n  assert.equal(this.$(secondColumnIconSelector).hasClass(checkedClass), true, 'Second column is checked');\n\n  this.toggleFirstColumnVisibility();\n\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');\n  assert.equal(this.$(firstColumnIconSelector).hasClass(checkedClass), true, 'First column is checked');\n  assert.equal(this.$(secondColumnIconSelector).hasClass(checkedClass), true, 'Second column is checked');\n\n  this.toggleSecondColumnVisibility();\n\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');\n  assert.equal(this.getEachAsString(selectors.theadFirstRowFirstCell), 'index', 'Valid column is shown (thead)');\n  assert.equal(this.$(firstColumnIconSelector).hasClass(checkedClass), true, 'First column is checked');\n  assert.equal(this.$(secondColumnIconSelector).hasClass(uncheckedClass), true, 'Second column is unchecked');\n\n  this.toggleFirstColumnVisibility();\n\n  assert.equal(this.getCount(selectors.allRows), 1, '1 row is shown when all columns are hidden');\n  assert.equal(this.getCount(selectors.tbodyAllCells), 1, 'with 1 cell');\n  assert.equal(this.$(selectors.tbodyAllCells).attr('colspan'), 2, 'it\\'s colspan is equal to the columns count');\n  assert.equal(this.getEachAsString(selectors.tbodyAllCells), 'All columns are hidden. Use columns-dropdown to show some of them', 'correct message is shown');\n  assert.equal(this.$(firstColumnIconSelector).hasClass(uncheckedClass), true, 'First column is unchecked');\n  assert.equal(this.$(secondColumnIconSelector).hasClass(uncheckedClass), true, 'Second column is unchecked');\n\n});\n\ntest('render show/hide all columns', function(assert) {\n  this.setProperties({\n    columns: generateColumns(['index', 'reversedIndex']),\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');\n\n  this.hideAllColumns();\n\n  assert.equal(this.getCount(selectors.allRows), 1, '1 row is shown when all columns are hidden');\n  assert.equal(this.getCount(selectors.tbodyAllCells), 1, 'with 1 cell');\n  assert.equal(this.getEachAsString(selectors.tbodyAllCells), 'All columns are hidden. Use columns-dropdown to show some of them', 'correct message is shown');\n\n  this.showAllColumns();\n\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 2, '2 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');\n\n});\n\ntest('render columns-dropdown with mayBeHidden = false for some columns', function (assert) {\n\n  var columns = generateColumns(['index', 'reversedIndex']);\n  columns[0].mayBeHidden = false;\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  assert.equal(this.getEachAsString('.columns-dropdown li a').replace(/\\s+/g, ''), ('Show All' + 'Hide All' + 'Restore Defaults' + 'reversedIndex').replace(/\\s+/g, ''), 'Column with mayBeHidden = false is not shown in the columns dropdown');\n\n  this.toggleFirstColumnVisibility();\n\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells).replace(/\\s+/g,''), 'index', 'Valid column is shown (thead)');\n  this.toggleFirstColumnVisibility();\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown');\n\n  this.hideAllColumns();\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 1, '1 column is shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells).replace(/\\s+/g,''), 'index', 'Valid column is shown (thead)');\n\n});\n\ntest('render columnSets in columns-dropdown', function(assert) {\n  let customFunctionCalled = null;\n  this.setProperties({\n    columns: generateColumns(['index', 'index2', 'reversedIndex', 'id']),\n    data: generateContent(10, 1),\n    columnSets: [\n      {\n        label: 'Set 1',\n        showColumns: ['index', 'id']\n      },\n      {\n        label: 'Set 2',\n        showColumns: ['index', 'id'],\n        hideOtherColumns: false\n      },\n      {\n        label: 'Set 3',\n        showColumns: ['index', 'id'],\n        toggleSet: true\n      },\n      {\n        label: 'Set 4',\n        showColumns(columns) {\n          customFunctionCalled = columns;\n        }\n      }\n    ]\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data columnSets=columnSets}}`);\n  assert.equal(this.getCount(selectors.theadFirstRowCells), 4, '4 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.theadSecondRowCells), 4, '4 columns are shown (thead)');\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, '4 columns are shown (tbody)');\n\n  this.hideAllColumns();\n  this.toggleColumnsDropdownItem(3);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown for default settings');\n\n  this.toggleColumnsDropdownItem(3);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are still shown after repeated click');\n\n  this.showAllColumns();\n  this.toggleColumnsDropdownItem(3);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, 'other columns are hidden if hideOtherColumns=true');\n\n  this.showAllColumns();\n  this.toggleColumnsDropdownItem(8); // This is the first regular column\n  this.toggleColumnsDropdownItem(4);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'other columns are not hidden if hideOtherColumns=false');\n\n  this.toggleColumnsDropdownItem(4);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'columns remain visible after repeated click with hideOtherColumns=false');\n\n  this.toggleColumnsDropdownItem(5);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, 'columns are hidden if toggleSet=true and both columns are visible');\n\n  this.toggleColumnsDropdownItem(5);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'columns are shown if toggleSet=true and both columns are hidden');\n\n  this.toggleColumnsDropdownItem(8); // This is the first regular column\n  this.toggleColumnsDropdownItem(5);\n  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'columns are shown if toggleSet=true and one of them is hidden');\n\n  this.toggleColumnsDropdownItem(6);\n  assert.ok(customFunctionCalled, 'custom function is called if showColumns is a function');\n  assert.deepEqual(customFunctionCalled.mapBy('propertyName'), ['index', 'index2', 'reversedIndex', 'id'], 'custom function gets columns as argument');\n});\n\ntest('global filtering (ignore case OFF)', function(assert) {\n\n  var columns = generateColumns(['index', 'reversedIndex']);\n  columns[1].template = 'custom/test';\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  this.globalFilter('1');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn, '|'), '1|10', 'Content is filtered correctly');\n\n  this.globalFilter('');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');\n\n  this.globalFilter('invalid input');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');\n  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');\n\n});\n\ntest('global filtering (ignore case ON)', function(assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  this.setProperties({\n      filteringIgnoreCase: true,\n      columns: columns,\n      data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data filteringIgnoreCase=filteringIgnoreCase}}`);\n\n  this.globalFilter('One');\n\n  assert.equal(this.getEachAsString(selectors.tbodyFirstRowCells), '1one', 'Content is filtered correctly');\n\n  this.globalFilter('');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');\n\n  this.globalFilter('invalid input');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');\n  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');\n\n  this.globalFilter('');\n  this.sortFirstColumn();\n  this.sortFirstColumn();\n\n  this.globalFilter('One');\n\n  assert.equal(this.getEachAsString(selectors.tbodySecondColumnCells), 'one', 'Content is filtered correctly when sorting is not done');\n\n});\n\ntest('filtering by columns (ignore case OFF)', function (assert) {\n\n  var columns = generateColumns(['index', 'reversedIndex']);\n  columns[1].template = 'custom/test';\n  columns[0].filterPlaceholder = 'custom placeholder';\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1),\n    useFilteringByColumns: true\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}`);\n  this.filterFirstColumn('1');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn, '|'), '1|10', 'Content is filtered correctly');\n\n  this.filterFirstColumn('');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');\n\n  this.filterFirstColumn('invalid input');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');\n  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');\n\n  assert.equal(this.getEachAttrAsString(selectors.theadSecondRowFirstColumnFilter, 'placeholder'), 'custom placeholder', 'Placeholder is correct');\n\n  this.set('useFilteringByColumns', false);\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filtering by columns is ignored');\n  assert.equal(this.getCount('thead input'), 0, 'Columns filters are hidden');\n\n});\n\ntest('filtering by columns (ignore case ON)', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  this.setProperties({\n    filteringIgnoreCase: true,\n    useFilteringByColumns: true,\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table filteringIgnoreCase=filteringIgnoreCase columns=columns data=data useFilteringByColumns=useFilteringByColumns}}`);\n  this.filterSecondColumn('One');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstRowCells), '1one', 'Content is filtered correctly');\n\n  this.filterSecondColumn('');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');\n\n  this.filterSecondColumn('invalid input');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');\n  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');\n\n  this.filterSecondColumn('');\n\n  this.filterSecondColumn('One');\n  assert.equal(this.getEachAsString(selectors.tbodySecondColumnCells), 'one', 'Content is filtered correctly when sorting is not done');\n\n  this.set('useFilteringByColumns', false);\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filtering by columns is ignored');\n  assert.equal(this.getCount('thead input'), 0, 'Columns filters are hidden');\n\n});\n\ntest('filtering by columns with custom functions', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[0].filterFunction = signFilter;\n\n  this.setProperties({\n    useFilteringByColumns: true,\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data useFilteringByColumns=useFilteringByColumns}}`);\n  this.filterFirstColumn('=1');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '1', `Content is filtered correctly (with '=1')`);\n\n  this.filterFirstColumn('>5');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '678910', `Content is filtered correctly (with '>5')`);\n\n  this.filterFirstColumn('<6');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345', `Content is filtered correctly (with '<6')`);\n\n});\n\ntest('filtering by columns with custom functions and predefined filter options', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[0].filterFunction = signFilter;\n  columns[0].filterWithSelect = true;\n  columns[0].predefinedFilterOptions = ['=1', '>5', '<6'];\n\n  this.setProperties({\n    useFilteringByColumns: true,\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data useFilteringByColumns=useFilteringByColumns}}`);\n  this.filterWithSelectFirstColumn('=1');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '1', `Content is filtered correctly (with '=1')`);\n\n  this.filterWithSelectFirstColumn('>5');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '678910', `Content is filtered correctly (with '>5')`);\n\n  this.filterWithSelectFirstColumn('<6');\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345', `Content is filtered correctly (with '<6')`);\n\n});\n\ntest('filtering with filterWithSelect (without predefinedFilterOptions)', function (assert) {\n\n  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  var data = generateContent(10, 1);\n  data[data.length - 1].someWord = '';\n  var concatenatedWords = data.mapBy('someWord').join('');\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.equal(this.getCount(`${selectSelector}  option`), 10, 'Empty data-value was excluded');\n  assert.equal(this.getEachAsString(`${selectSelector}  option:last-child`), 'nine', 'Last option is not empty string');\n\n  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');\n  assert.equal(this.getEachAsString(`${selectSelector}  option`).replace(/\\s+/g, ''), concatenatedWords, 'Options for select are valid');\n\n  this.filterWithSelectSecondColumn('one');\n\n  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');\n\n  this.set('data.0.someWord', 'not a number');\n\n  assert.equal(this.$(selectSelector + ' option:selected').val(), '', 'Filter is reverted to the default value');\n\n  this.filterWithSelectSecondColumn('');\n\n  assert.equal(this.getCount(selectors.allRows), 10, 'All rows are shown after clear filter');\n\n});\n\ntest('filtering with filterWithSelect (without predefinedFilterOptions), `sortFilterOptions` is true', function (assert) {\n\n  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  columns[1].sortFilterOptions = true;\n  var data = generateContent(10, 1);\n  data[data.length - 1].someWord = '';\n  var words = data.mapBy('someWord').sort();\n  var concatenatedWords = words.join('');\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');\n  assert.equal(this.getEachAsString(`${selectSelector}  option`).replace(/\\s+/g, ''), concatenatedWords, 'Options for select are valid');\n\n  this.filterWithSelectSecondColumn('one');\n\n  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');\n\n});\n\ntest('filtering with filterWithSelect (without predefinedFilterOptions), sort by property with boolean values', function (assert) {\n\n  var columns = generateColumns(['index', 'rand']);\n  columns[1].filterWithSelect = true;\n  var data = generateContent(10, 1);\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.equal(this.getCount(selectors.allRows), 10, '10 rows exist before filtering');\n\n  this.filterWithSelectSecondColumn('true');\n  assert.equal(this.getCount(selectors.allRows), 5, '5 rows exist after filtering');\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), 'true|true|true|true|true', 'valid rows are shown');\n\n  this.filterWithSelectSecondColumn('false');\n  assert.equal(this.getCount(selectors.allRows), 5, '5 rows exist after filtering (2)');\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), 'false|false|false|false|false', 'valid rows are shown (2)');\n\n});\n\ntest('filtering with filterWithSelect (with predefinedFilterOptions as primitives)', function (assert) {\n\n  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  columns[1].predefinedFilterOptions = ['one', 'two'];\n  var data = generateContent(10, 1);\n\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');\n  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\\s+/g, ''), 'onetwo', 'Options for select are valid');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Proper option is selected');\n  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');\n\n  this.set('data', generateContent(9, 2));\n\n  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Filter is not reverted to the default value');\n  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\\s+/g, ''), 'onetwo', 'Options for select are valid');\n\n  this.filterWithSelectSecondColumn('');\n\n  assert.equal(this.getCount(selectors.allRows), 9, 'All rows are shown after clear filter');\n\n});\n\ntest('filtering with filterWithSelect (with predefinedFilterOptions as objects)', function (assert) {\n\n  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  columns[1].predefinedFilterOptions = [{label: '1', value: 'one'}, {label: '2', value: 'two'}];\n  var data = generateContent(10, 1);\n\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');\n  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\\s+/g, ''), '12', 'Options for select are valid');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Proper option is selected');\n  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');\n\n  this.set('data', generateContent(9, 2));\n\n  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Filter is not reverted to the default value');\n  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\\s+/g, ''), '12', 'Options for select are valid');\n\n  this.filterWithSelectSecondColumn('');\n\n  assert.equal(this.getCount(selectors.allRows), 9, 'All rows are shown after clear filter');\n\n});\n\ntest('filtering with filterWithSelect (with predefinedFilterOptions as empty array)', function (assert) {\n\n  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  columns[1].predefinedFilterOptions = [];\n  var data = generateContent(10, 1);\n\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  assert.notOk(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` does not exist if empty predefinedFilterOptions are given');\n});\n\ntest('filtering with `filteredBy`', function (assert) {\n\n  var columns = generateColumns(['index', 'index']);\n  delete columns[0].propertyName;\n  columns[0].template = 'custom/test';\n  columns[0].filteredBy = 'index';\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1),\n    useFilteringByColumns: true\n  });\n  this.render(hbs`{{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}`);\n\n  this.filterSecondColumn('1');\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), '1|10', 'Content is filtered correctly');\n\n  this.filterSecondColumn('');\n  assert.equal(this.getEachAsString(selectors.secondColumn), '12345678910', 'Filter is empty and all rows are shown');\n\n});\n\ntest('`filteredBy` hash higher priority than `propertyName`', function (assert) {\n\n  var columns = generateColumns(['someWord']);\n  columns[0].filteredBy = 'index';\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n  this.globalFilter('2');\n  assert.equal(this.getEachAsString(selectors.firstColumn), 'two', 'Content is filtered correctly (global filter)');\n\n  this.globalFilter('');\n  this.filterFirstColumn('2');\n  assert.equal(this.getEachAsString(selectors.firstColumn), 'two', 'Content is filtered correctly (filter by column)');\n\n});\n\ntest('icons for clearing filters exist', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');\n\n  this.globalFilter(2);\n  assert.ok(this.elementExist(selectors.filterStringClearIcon),'`Clear global filter` icon exists');\n  assert.ok(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon exists');\n  this.globalFilter('');\n  assert.notOk(this.elementExist(selectors.filterStringClearIcon), '`Clear global filter` icon does not exist');\n  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');\n\n  this.filterFirstColumn(1);\n  assert.ok(this.elementExist(selectors.theadSecondRowFirstColumnClearFilterIcon), '`Clear first column filter` icon exists');\n  assert.ok(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon exists');\n  this.filterFirstColumn('');\n  assert.notOk(this.elementExist(selectors.theadSecondRowFirstColumnClearFilterIcon), '`Clear first column filter` icon does not exist');\n  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.ok(this.elementExist(selectors.theadSecondRowSecondColumnClearFilterIcon), '`Clear second column select filter` icon exists');\n  assert.ok(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon exists');\n  this.filterWithSelectSecondColumn('');\n  assert.notOk(this.elementExist(selectors.theadSecondRowSecondColumnClearFilterIcon), '`Clear second column select filter` icon does not exist');\n  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');\n\n});\n\ntest('clear filters using icons', function (assert) {\n\n  var columns = generateColumns(['index', 'someWord']);\n  columns[1].filterWithSelect = true;\n  var data = generateContent(10, 1);\n  this.setProperties({\n    columns: columns,\n    data: data\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns}}`);\n\n  this.globalFilter(2);\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Global filter is used');\n  this.clearGlobalFilterByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Global filter is clear (1)');\n\n  this.globalFilter(2);\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Global filter is used');\n  this.clearAllFiltersByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Global filter is clear (2)');\n\n  this.filterFirstColumn(2);\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for first column is used');\n  this.clearFirstColumnFilterByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for first column is clear (1)');\n\n  this.filterFirstColumn(2);\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for first column is used');\n  this.clearAllFiltersByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for first column is clear (2)');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for second column is used');\n  this.clearSecondColumnFilterByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for second column is clear (1)');\n\n  this.filterWithSelectSecondColumn('one');\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for second column is used');\n  this.clearAllFiltersByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for second column is clear (2)');\n\n  this.globalFilter(2);\n  this.filterFirstColumn(2);\n  this.filterWithSelectSecondColumn('two');\n  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'All filters are used, 1 row shown');\n  this.clearAllFiltersByIcon();\n  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'All filters are clear');\n\n});\n\ntest('custom messages', function (assert) {\n\n  var messages = O.create({\n    searchLabel: 'Se@rch:',\n    'columns-title': 'ColumnZ',\n    'columns-showAll': 'Show Me All!',\n    'columns-hideAll': 'Hide All!',\n    'columns-restoreDefaults': 'Restore My Columns',\n    tableSummary: 'Now are showing %@ - %@ of %@',\n    allColumnsAreHidden: 'No visible columns, dude!',\n    noDataToShow: 'No data. Sorry, bro...'\n  });\n\n  var messages2 = O.create({\n    searchLabel: 'SEARCH',\n    'columns-title': 'COLUMNS',\n    'columns-showAll': 'SHOW All',\n    'columns-hideAll': 'HIDE ALL',\n    'columns-restoreDefaults': 'RESTORE MY COLUMNS',\n    tableSummary: 'DISPLAY %@ - %@ OF %@',\n    allColumnsAreHidden: 'NO COLUMNS',\n    noDataToShow: 'NO DATA'\n  });\n\n  this.setProperties({\n    columns: generateColumns(['index', 'reversedIndex']),\n    data: generateContent(10, 1),\n    customMessages: messages\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns customMessages=customMessages}}`);\n\n  assert.equal(this.getEachAsString(selectors.summary), 'Now are showing 1 - 10 of 10', 'Summary is valid');\n  assert.equal(this.getEachAsString('.columns-dropdown button'), messages['columns-title'], 'Columns-dropdown title is valid');\n  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(0)'), messages['columns-showAll'], 'Columns-dropdown \"showAll\" is valid');\n  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(1)'), messages['columns-hideAll'], 'Columns-dropdown \"hideAll\" is valid');\n  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(2)'), messages['columns-restoreDefaults'], 'Columns-dropdown \"restoreDefaults\" is valid');\n  assert.equal(this.getEachAsString('.globalSearch label'), messages.searchLabel, 'Global-search label is valid');\n\n  this.hideAllColumns();\n\n  assert.equal(this.getEachAsString(selectors.tbodyAllCells), messages.allColumnsAreHidden, 'Message about all hidden columns is valid');\n\n  this.showAllColumns();\n  this.globalFilter('invalid string');\n\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), messages.noDataToShow, 'Message about no data is valid');\n\n  this.set('customMessages', messages2);\n\n  this.globalFilter('');\n\n  assert.equal(this.getEachAsString(selectors.summary), 'DISPLAY 1 - 10 OF 10', 'Summary is valid (2)');\n  assert.equal(this.getEachAsString('.columns-dropdown button'), messages2['columns-title'], 'Columns-dropdown title is valid (2)');\n  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(0)'), messages2['columns-showAll'], 'Columns-dropdown \"showAll\" is valid (2)');\n  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(1)'), messages2['columns-hideAll'], 'Columns-dropdown \"hideAll\" is valid (2)');\n  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(2)'), messages2['columns-restoreDefaults'], 'Columns-dropdown \"restoreDefaults\" is valid (2)');\n  assert.equal(this.getEachAsString('.globalSearch label'), messages2.searchLabel, 'Global-search label is valid (2)');\n\n  this.hideAllColumns();\n\n  assert.equal(this.getEachAsString(selectors.tbodyAllCells), messages2.allColumnsAreHidden, 'Message about all hidden columns is valid (2)');\n\n  this.showAllColumns();\n  this.globalFilter('invalid string');\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), messages2.noDataToShow, 'Message about no data is valid (2)');\n\n});\n\ntest('custom icons', function (assert) {\n\n  const customIcons = {\n    'sort-asc': 'sort-asc',\n    'sort-desc': 'sort-desc',\n    'column-visible': 'column-visible',\n    'column-hidden': 'column-hidden',\n    'nav-first': 'nav-first',\n    'nav-prev': 'nav-prev',\n    'nav-next': 'nav-next',\n    'nav-last': 'nav-last'\n  };\n\n  this.setProperties({\n    columns: generateColumns(['index', 'reversedIndex']),\n    data: generateContent(10, 1),\n    customIcons: customIcons\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns customIcons=customIcons}}`);\n  this.sortFirstColumn();\n\n  assert.equal(this.getCount('.sort-asc'), 1, 'sort asc 1 column');\n\n  this.sortSecondColumn();\n  assert.equal(this.getCount('.sort-asc'), 2, 'sort asc 2 columns');\n\n  this.sortSecondColumn();\n  assert.equal(this.getCount('.sort-asc'), 1, 'sort asc 1 column');\n  assert.equal(this.getCount('.sort-desc'), 1, 'sort desc 1 column');\n\n  assert.equal(this.getCount(`${selectors.columnsDropdown} .column-visible`), 2, 'all columns are visible');\n\n  this.toggleFirstColumnVisibility();\n  assert.equal(this.getCount(`${selectors.columnsDropdown} .column-visible`), 1, '1 column is visible');\n  assert.equal(this.getCount(`${selectors.columnsDropdown} .column-hidden`), 1, '1 column is hidden');\n\n  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnFirst} span`), 'nav-first', 'First-button has valid class');\n  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnBack} span`), 'nav-prev', 'Prev-button has valid class');\n  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnNext} span`), 'nav-next', 'Next-button has valid class');\n  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnLast} span`), 'nav-last', 'Last-button has valid class');\n\n});\n\ntest('columns column cell classes', function (assert) {\n\n  var columns = generateColumns(['index', 'reversedIndex']);\n  columns[0].className = 'custom-column-class';\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.equal(this.getCount('tbody .custom-column-class'), 10, 'Custom column class exists on each column cell');\n\n});\n\ntest('column title auto generation', function (assert) {\n\n  var columns = generateColumns(['index', 'reversedIndex']);\n  columns.setEach('title', null);\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  assert.equal(this.getEachAsString('thead th:eq(0)'), 'Index', 'Title for one word is correct');\n  assert.equal(this.getEachAsString('thead th:eq(1)'), 'Reversed index', 'Title for camelCase is correct');\n\n});\n\ntest('`sortedBy` has higher priority than `propertyName`', function (assert) {\n\n  var columns = generateColumns(['someWord', 'index']);\n  columns[0].sortedBy = 'index';\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n\n  this.sortSecondColumn();\n  assert.equal(this.getEachAsString(selectors.secondColumn), '12345678910', 'Content is valid (sorting by `index` desc)');\n\n  this.sortSecondColumn();\n  assert.equal(this.getEachAsString(selectors.secondColumn), '10987654321', 'Content is valid (sorting by `index` asc)');\n\n});\n\ntest('sorting (multi `true`)', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'index2']),\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data}}`);\n  this.sortFirstColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc)');\n\n  this.sortFirstColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '10987654321', 'Content is valid (sorting 1st column desc)');\n\n  this.sortFirstColumn();\n  this.sortSecondColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc) - restore defaults');\n  assert.equal(this.getEachAsString(selectors.secondColumn), '1122334455', 'Content is valid (sorting 2nd column asc) - restore defaults');\n\n  this.sortFirstColumn();\n  this.sortFirstColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '21436587109', 'Content is valid (sorting 1st column desc)');\n  assert.equal(this.getEachAsString(selectors.secondColumn), '1122334455', 'Content is valid (sorting 2nd column asc)');\n\n});\n\ntest('sorting (multi `false`)', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'index2']),\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);\n  this.sortFirstColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc)');\n\n  this.sortFirstColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '10987654321', 'Content is valid (sorting 1st column desc)');\n\n  this.sortFirstColumn();\n  this.sortSecondColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc) - restore defaults');\n  assert.equal(this.getEachAsString(selectors.secondColumn), '1122334455', 'Content is valid (sorting 2nd column asc) - restore defaults');\n\n  this.sortFirstColumn();\n  this.sortFirstColumn();\n\n  assert.equal(this.getEachAsString(selectors.firstColumn), '10987654321', 'Content is valid (sorting 1st column desc)');\n  assert.equal(this.getEachAsString(selectors.secondColumn), '5544332211', 'Content is valid (sorting 2nd reverted)');\n\n});\n\ntest('column is sorted with `sortedBy` when `propertyName` is not provided', function (assert) {\n\n  var columns = generateColumns(['index', 'index2']);\n  columns[1].sortedBy = 'index';\n  delete columns[1].propertyName;\n  columns[1].template = 'custom/test';\n\n  this.setProperties({\n    columns: columns,\n    data: generateContent(3, 1).reverse()\n  });\n  this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);\n\n  this.sortSecondColumn();\n\n  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), '1+3|2+2|3+1', 'Content is sorted by `index`');\n\n});\n\ntest('table is not sorted by first column with `propertyName` or `sortedBy` by default', function (assert) {\n\n  var data = generateContent(10, 1).reverse();\n  var columns = generateColumns(['indexWithHtml', 'index']);\n  delete columns[0].propertyName;\n  columns[0].template = 'custom/delete';\n\n  this.setProperties({\n    data: data,\n    columns: columns\n  });\n  this.on('deleteRecord', function () {return this;});\n  this.render(hbs`{{models-table data=data columns=columns delete='deleteRecord'}}`);\n\n  assert.equal(this.getEachAsString(selectors.secondColumn), '10987654321', 'Content is sorted correctly');\n\n});\n\ntest('sendAction can trigger actions outside the component', function (assert) {\n\n  var columns = generateColumns(['index', 'indexWithHtml']);\n  columns[1].template = 'custom/action';\n\n  this.on('externalAction', function () {\n    assert.ok(true, 'external Action was called!');\n  });\n\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: columns,\n    action: 'externalAction'\n  });\n  this.render(hbs`{{models-table data=data columns=columns action=action}}`);\n\n  this.$('.action').first().click();\n});\n\ntest('visiblePageNumbers', function (assert) {\n\n  this.setProperties({\n    data: generateContent(10, 1),\n    columns: generateColumns(['index']),\n    currentPageNumber: 1,\n    useNumericPagination: true,\n    pageSize: 1\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns currentPageNumber=currentPageNumber pageSize=pageSize useNumericPagination=useNumericPagination}}`);\n\n  A([\n    {\n      currentPageNumber: 1,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:true},{label:2,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 2,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:2,isLink:true,isActive:true},{label:3,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 3,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:2,isLink:true,isActive:false},{label:3,isLink:true,isActive:true},{label:4,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 4,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:3,isLink:true,isActive:false},{label:4,isLink:true,isActive:true},{label:5,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 5,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:4,isLink:true,isActive:false},{label:5,isLink:true,isActive:true},{label:6,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 6,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:5,isLink:true,isActive:false},{label:6,isLink:true,isActive:true},{label:7,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 7,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:6,isLink:true,isActive:false},{label:7,isLink:true,isActive:true},{label:8,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 8,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:7,isLink:true,isActive:false},{label:8,isLink:true,isActive:true},{label:9,isLink:true,isActive:false},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 9,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:8,isLink:true,isActive:false},{label:9,isLink:true,isActive:true},{label:10,isLink:true,isActive:false}]\n    },\n    {\n      currentPageNumber: 10,\n      visiblePageNumbers: [{label:1,isLink:true,isActive:false},{label:'...',isLink:false,isActive:false},{label:9,isLink:true,isActive:false},{label:10,isLink:true,isActive:true}]\n    }\n  ]).forEach(test => {\n    this.set('currentPageNumber', test.currentPageNumber);\n    assert.equal(this.getEachAsString(selectors.navigationButtons,'|'), A(test.visiblePageNumbers).mapBy('label').join('|'), `10 pages, active is ${test.currentPageNumber}`);\n  }, this);\n\n  this.set('data', generateContent(10, 1));\n  this.set('pageSize', 10);\n\n  assert.equal(this.getEachAsString(selectors.navigationButtons,'|'), '1', 'Only 1 page');\n\n});\n\ntest('event on user interaction (filtering by column)', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'someWord']),\n    data: generateContent(10, 1),\n    displayDataChangedAction: 'displayDataChanged'\n  });\n\n  this.on('displayDataChanged', function () {\n    assert.ok(true, '`displayDataChanged`-action was called!');\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=true}}`);\n  this.filterSecondColumn('One');\n\n});\n\ntest('event on user interaction (global filtering)', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'someWord']),\n    data: generateContent(10, 1),\n    displayDataChangedAction: 'displayDataChanged'\n  });\n\n  this.on('displayDataChanged', function () {\n    assert.ok(true, '`displayDataChanged`-action was called!');\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=true}}`);\n  this.globalFilter('One');\n});\n\ntest('event on user interaction (sorting)', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'someWord']),\n    data: generateContent(10, 1),\n    displayDataChangedAction: 'displayDataChanged',\n    sendDisplayDataChangedAction: true\n  });\n\n  this.on('displayDataChanged', function () {\n    assert.ok(true, '`displayDataChanged`-action was called!');\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction}}`);\n  this.sortFirstColumn();\n});\n\ntest('event on user interaction (expanding rows)', function (assert) {\n\n  let columns = generateColumns(['id']);\n  columns.splice(0, 0, {\n    template: 'components/models-table/expand-row-cell',\n    mayBeHidden: false\n  });\n  this.setProperties({\n    columns: columns,\n    expandedRowTemplate: 'custom/expanded-row',\n    data: generateContent(30, 1),\n    displayDataChangedAction: 'displayDataChanged',\n    sendDisplayDataChangedAction: true\n  });\n\n  this.on('displayDataChanged', function () {\n    assert.ok(true, '`displayDataChanged`-action was called!');\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowTemplate=expandedRowTemplate}}`);\n  this.expandFirstRow();\n\n});\n\ntest('event on user interaction (selecting rows)', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['id']),\n    data: generateContent(30, 1),\n    displayDataChangedAction: 'displayDataChanged',\n    sendDisplayDataChangedAction: true\n  });\n\n  this.on('displayDataChanged', function () {\n    assert.ok(true, '`displayDataChanged`-action was called!');\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowTemplate=expandedRowTemplate}}`);\n  this.clickOnRow(0);\n\n});\n\ntest('event on user interaction (clear all filters)', function (assert) {\n\n  var calls = [\n    // after render\n    {\n      filterString: '',\n      columnFilters: {}\n    },\n    // after filter by first column\n    {\n      filterString: '',\n      columnFilters: {id: '1'}\n    },\n    // after global filter\n    {\n      filterString: '1',\n      columnFilters: {id: '1'}\n    },\n    // after clear all filters\n    {\n      filterString: '',\n      columnFilters: {}\n    }\n  ];\n  var indx = 0;\n  this.setProperties({\n    columns: generateColumns(['id']),\n    data: generateContent(30, 1),\n    displayDataChangedAction: 'displayDataChanged',\n    sendDisplayDataChangedAction: true\n  });\n\n  this.on('displayDataChanged', function (settings) {\n    var call = calls[indx];\n    assert.equal(call.filterString, settings.filterString, `#${indx + 1}. filterString`);\n    assert.deepEqual(call.columnFilters, settings.columnFilters, `#${indx + 1}. columnFilters`);\n    indx++;\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowTemplate=expandedRowTemplate}}`);\n  this.filterFirstColumn(1);\n  this.globalFilter(1);\n  this.clearAllFiltersByIcon();\n});\n\ntest('show first page if for some reasons there is no content for current page, but table data exists', function (assert) {\n\n  assert.expect(1);\n\n  var data = generateContent(11, 1);\n  var columns = generateColumns(['index', 'indexWithHtml']);\n  columns[1].template = 'custom/delete';\n  var self = this;\n  this.setProperties({\n    data: data,\n    columns: columns\n  });\n  this.on('deleteRecord', function (record) {\n    self.set('data', data.without(record));\n  });\n  this.render(hbs`{{models-table data=data columns=columns delete='deleteRecord'}}`);\n  // move to the 2nd page and delete 1 row there\n  this.nextPage();\n  this.$('td button').first().click();\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'First page is shown');\n});\n\ntest('row deleted in the middle page', function (assert) {\n\n  assert.expect(1);\n\n  var data = generateContent(31, 1);\n  var columns = generateColumns(['index', 'indexWithHtml']);\n  columns[1].template = 'custom/delete';\n  var self = this;\n  this.setProperties({\n    data: data,\n    columns: columns\n  });\n  this.on('deleteRecord', function (record) {\n    self.set('data', data.without(record));\n  });\n  this.render(hbs`{{models-table data=data columns=columns delete='deleteRecord'}}`);\n  // move to the 2nd page and delete 1 row there\n  this.nextPage();\n  this.$('td button').first().click();\n  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 20 of 30', 'Second page is shown');\n});\n\ntest('updateable columns (disabled)', function (assert) {\n\n  var columns1 = generateColumns(['index', 'someWord']);\n  var columns2 = generateColumns(['index', 'index2', 'someWord']);\n\n  this.setProperties({\n    columns: columns1,\n    data: generateContent(10, 1),\n    columnsAreUpdateable: false\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data columnsAreUpdateable=columnsAreUpdateable}}`);\n  this.filterFirstColumn('1');\n  this.sortFirstColumn();\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|someWord', 'two columns are shown');\n  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|someWord', 'two columns are in columns dropdown');\n\n  this.set('columns', columns2);\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|someWord', 'columns are not updated');\n  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|someWord', 'columns dropdown is not updated');\n  assert.equal(this.getEachValueAsString(selectors.theadSecondRowFirstColumnFilter), '1', 'column filter was not dropped');\n  assert.equal(this.getEachClassAsString(selectors.theadFirstRowFirstCellSort), 'glyphicon glyphicon-triangle-top', 'column sorting was not dropped');\n});\n\ntest('updateable columns (enabled)', function (assert) {\n\n  var columns1 = generateColumns(['index', 'someWord']);\n  var columns2 = generateColumns(['index', 'index2', 'someWord']);\n\n  this.setProperties({\n    columns: columns1,\n    data: generateContent(10, 1),\n    columnsAreUpdateable: true\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data columnsAreUpdateable=columnsAreUpdateable}}`);\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|someWord', 'two columns are shown');\n  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|someWord', 'two columns are in columns dropdown');\n  this.filterFirstColumn('1');\n  this.sortFirstColumn();\n\n  this.set('columns', columns2);\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|index2|someWord', 'columns are updated');\n  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|index2|someWord', 'columns dropdown is updated');\n  assert.equal(this.getEachValueAsString(selectors.theadSecondRowFirstColumnFilter), '', 'column filter was dropped');\n\n});\n\ntest('filtering with `doFilteringByHiddenColumns` = false', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'someWord']),\n    data: generateContent(10, 1),\n    doFilteringByHiddenColumns: false\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data doFilteringByHiddenColumns=doFilteringByHiddenColumns}}`);\n\n  this.toggleSecondColumnVisibility();\n  this.globalFilter('one');\n\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345678910', 'Content is not changed');\n\n  this.set('doFilteringByHiddenColumns', true);\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345678910', 'Content is not changed after `doFilteringByHiddenColumns` updating');\n\n  this.globalFilter('');\n  this.globalFilter('one');\n\n  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '1', 'Content is filtered');\n\n});\n\ntest('grouped headers', function (assert) {\n\n  this.setProperties({\n    columns: generateColumns(['index', 'index2', 'reversedIndex', 'indexWithHtml', 'someWord']),\n    data: generateContent(10, 1),\n    groupedHeaders: [\n      [{title: 'BigTitle', colspan: 5}],\n      [{title: 'SubTitle1', colspan: 2}, {title: 'SubTitle2', colspan: 3}]\n    ]\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data groupedHeaders=groupedHeaders}}`);\n\n  assert.equal(this.getEachAsString(selectors.theadFirstRowCells), 'BigTitle', '');\n  assert.equal(this.getEachAttrAsString(selectors.theadFirstRowCells, 'colspan'), '5', '');\n\n  assert.equal(this.getEachAsString(selectors.theadSecondRowCells, '|'), 'SubTitle1|SubTitle2', '');\n  assert.equal(this.getEachAttrAsString(selectors.theadSecondRowCells, 'colspan', '|'), '2|3', '');\n\n});\n\ntest('expandable rows (multipleExpand = true)', function (assert) {\n\n  let columns = generateColumns(['id']);\n  columns.splice(0, 0, {\n    template: 'components/models-table/expand-row-cell',\n    mayBeHidden: false\n  });\n  this.setProperties({\n    columns: columns,\n    expandedRowTemplate: 'custom/expanded-row',\n    data: generateContent(30, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data expandedRowTemplate=expandedRowTemplate multipleExpand=true}}`);\n\n  assert.equal(this.getCount(selectors.collapseRow), 0, 'All rows are collapsed by default');\n\n  this.expandFirstRow();\n  assert.ok(this.firstRowIsExpanded(), 'First row is expanded');\n  assert.equal(this.getCount('.expand-0'), 1, 'Expanded row content exists');\n  assert.equal(this.getEachAsString('.expand-0 .id'), 1, 'Expanded row content is valid');\n\n  this.expandSecondRow();\n  assert.ok(this.firstRowIsExpanded(), 'First row is still expanded');\n  assert.ok(this.secondRowIsExpanded(), 'Second row is expanded');\n\n  this.collapseFirstRow();\n  assert.ok(this.firstRowIsCollapsed(), 'First row is collapsed');\n  assert.ok(this.secondRowIsExpanded(), 'Second row is still expanded');\n\n  this.collapseSecondRow();\n  assert.ok(this.secondRowIsCollapsed(), 'Second row is collapsed');\n\n  this.expandFirstRow();\n  this.nextPage();\n  assert.ok(this.firstRowIsCollapsed(), 'First row on the second page is collapsed');\n\n});\n\ntest('expandable rows (multipleExpand = true, expand all rows)', function (assert) {\n\n  let columns = generateColumns(['id']);\n  columns.splice(0, 0, {\n    template: 'components/models-table/expand-row-cell',\n    templateForFilterCell: 'components/models-table/expand-all-rows-cell',\n    mayBeHidden: false\n  });\n  this.setProperties({\n    columns: columns,\n    expandedRowTemplate: 'custom/expanded-row',\n    data: generateContent(30, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data expandedRowTemplate=expandedRowTemplate multipleExpand=true}}`);\n\n  assert.equal(this.getCount(selectors.collapseRow), 0, 'All rows are collapsed by default');\n\n  this.expandAllRows();\n  assert.equal(this.getCount('tr.expand-row'), 10, 'All rows are expanded');\n  assert.equal(this.getEachAsString('.expand-row .id', '|'), '1|2|3|4|5|6|7|8|9|10', 'Expanded rows content is valid');\n\n  this.collapseAllRows();\n  assert.equal(this.getCount('tr.expand-row'), 0, 'All rows are collapsed');\n\n  this.expandAllRows();\n  this.nextPage();\n  assert.equal(this.getCount('tr.expand-row'), 0, 'All rows on the second page are collapsed');\n\n});\n\ntest('expandable rows (multipleExpand = false)', function (assert) {\n\n  let columns = generateColumns(['id']);\n  columns.splice(0, 0, {\n    template: 'components/models-table/expand-row-cell',\n    mayBeHidden: false\n  });\n  this.setProperties({\n    columns: columns,\n    expandedRowTemplate: 'custom/expanded-row',\n    data: generateContent(30, 1)\n  });\n\n  this.render(hbs`{{models-table columns=columns data=data expandedRowTemplate=expandedRowTemplate multipleExpand=false}}`);\n\n  assert.equal(this.getCount(selectors.collapseRow), 0, 'All rows are collapsed by default');\n\n  this.expandFirstRow();\n  assert.ok(this.firstRowIsExpanded(), 'First row is expanded');\n  assert.equal(this.getCount('.expand-0'), 1, 'Expanded row content exists');\n  assert.equal(this.getEachAsString('.expand-0 .id'), 1, 'Expanded row content is valid');\n\n  this.expandSecondRow();\n  assert.ok(this.firstRowIsCollapsed(), 'First row is collapsed');\n  assert.ok(this.secondRowIsExpanded(), 'Second row is expanded');\n\n  this.collapseSecondRow();\n  assert.ok(this.secondRowIsCollapsed(), 'Second row is collapsed');\n\n  this.expandFirstRow();\n  this.nextPage();\n  assert.ok(this.firstRowIsCollapsed(), 'First row on the second page is collapsed');\n\n});\n\ntest('selectable rows (multipleSelect = true)', function (assert) {\n\n  this.setProperties({\n    data: generateContent(30, 1),\n    columns: generateColumns(['id'])\n  });\n  this.render(hbs`{{models-table data=data column=columns multipleSelect=true}}`);\n\n  assert.equal(this.getAllSelectedRows(), 0, 'No selected rows by default');\n\n  this.clickOnRow(0);\n  assert.ok(this.firstRowIsSelected(), 'First row is selected');\n\n  this.clickOnRow(1);\n  assert.ok(this.firstRowIsSelected(), 'First row is still selected');\n  assert.ok(this.secondRowIsSelected(), 'Second row is selected');\n\n  this.clickOnRow(0);\n  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');\n  assert.ok(this.secondRowIsSelected(), 'Second row is selected');\n\n  this.clickOnRow(1);\n  assert.notOk(this.firstRowIsSelected(), 'First row still is not selected');\n  assert.notOk(this.secondRowIsSelected(), 'Second row is not selected');\n\n});\n\ntest('selectable rows (multipleSelect = false)', function (assert) {\n\n  this.setProperties({\n    data: generateContent(30, 1),\n    columns: generateColumns(['id'])\n  });\n  this.render(hbs`{{models-table data=data column=columns multipleSelect=false}}`);\n\n  assert.equal(this.getAllSelectedRows(), 0, 'No selected rows by default');\n\n  this.clickOnRow(0);\n  assert.ok(this.firstRowIsSelected(), 'First row is selected');\n\n  this.clickOnRow(1);\n  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');\n  assert.ok(this.secondRowIsSelected(), 'Second row is selected');\n\n  this.clickOnRow(0);\n  assert.ok(this.firstRowIsSelected(), 'First row is selected');\n  assert.notOk(this.secondRowIsSelected(), 'Second row is not selected');\n\n  this.clickOnRow(1);\n  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');\n  assert.ok(this.secondRowIsSelected(), 'Second row is selected');\n\n});\n\ntest('row-expand should trigger select/deselect row', function (assert) {\n\n  let columns = generateColumns(['index']);\n  columns = [{\n    template: 'components/models-table/expand-row-cell',\n    mayBeHidden: false\n  }, ...columns];\n  this.setProperties({\n    columns: columns,\n    expandedRowTemplate: 'custom/expanded-row',\n    data: generateContent(30, 1)\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns expandedRowTemplate=expandedRowTemplate}}`);\n\n  this.expandFirstRow();\n  this.clickOnRow(0);\n  assert.ok(this.firstRowIsExpanded(), 'First row is expanded');\n  assert.ok(this.firstRowIsSelected(), 'First row is selected');\n\n  $(selectors.tbodyFirstRowExpand).click();\n  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');\n\n  $(selectors.tbodyFirstRowExpand).click();\n  assert.ok(this.firstRowIsSelected(), 'First row is selected');\n\n});\n\ntest('columns column contains original definition as a nested property', function (assert) {\n\n  var columns = generateColumns(['index1', 'index2']);\n  columns[0].templateForSortCell = 'custom/sort-cell-original-definition';\n  columns[0].CustomColumString = 'custom-column-string';\n  columns[0].CustomColumObject = { name: 'custom-column-object' };\n  columns[0].CustomColumBool = true;\n  columns[0].CustomColumNumber = 1;\n\n  this.setProperties({\n    columns: columns,\n    data: generateContent(10, 1)\n  });\n  this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);\n\n  assert.equal(\n    this.getEachAsString(selectors.theadFirstRowFirstCell),\n    'custom-column-string|custom-column-object|true|1',\n    'Custom column properties present in originalDefinition property in processedColumns');\n});\n\ntest('rows may be preselected with `preselectedItems`', function (assert) {\n  var data = generateContent(30, 1);\n  this.setProperties({\n    columns: generateColumns(['index1', 'index2']),\n    data: data,\n    preselectedItems: data.filter((itemn, index) => index % 2 === 0)\n  });\n\n  this.render(hbs`{{models-table data=data columns=columns preselectedItems=preselectedItems}}`);\n\n  assert.equal(this.getAllSelectedRows(), 5, 'Rows are initially selected correctly');\n\n  this.clickOnRow(1);\n  assert.equal(this.getAllSelectedRows(), 6, 'One more row become selected');\n\n  this.clickOnRow(0);\n  assert.equal(this.getAllSelectedRows(), 5, 'One row become deselected');\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table-test.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/integration/components/models-table-test.js	(revision )
@@ -1,4 +1,6 @@
-import Ember from 'ember';
+import { A } from '@ember/array';
+import O from '@ember/object';
+import BootstrapTheme from 'ember-models-table/themes/bootstrap3';
 
 import {
   moduleForComponent,
@@ -7,36 +9,38 @@
 
 import hbs from 'htmlbars-inline-precompile';
 
-import * as dom from '../../helpers/dom';
-
 import {
   generateContent,
   generateColumns
 } from '../../helpers/f';
 
+import ModelsTableBs from '../../pages/models-table-bs';
+
 const {
-  A,
-  typeOf,
-  Object: O
-} = Ember;
+  rows,
+  navigation,
+  filters,
+  sorting,
+  headers,
+  rowExpands,
+  columnsDropDown
+} = ModelsTableBs;
 
-let selectors;
-
-const oneTen = 'one|two|three|four|five|six|seven|eight|nine|ten';
-const oneTenAsc = 'eight|five|four|nine|one|seven|six|ten|three|two';
-const oneTenDesc = 'two|three|ten|six|seven|one|nine|four|five|eight';
+const oneTenArray = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];
+const oneTenArrayDig = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];
+const tenOneArrayDig = oneTenArrayDig.slice().reverse();
+const oneTenAscArray = ['eight', 'five', 'four', 'nine', 'one', 'seven', 'six', 'ten', 'three', 'two'];
+const oneTenDescArray = ['two', 'three', 'ten', 'six', 'seven', 'one', 'nine', 'four', 'five', 'eight'];
 
 moduleForComponent('models-table', 'ModelsTable | Integration', {
   integration: true,
 
   beforeEach() {
-    Object.keys(dom).forEach(m => {
-      let f = dom[m];
-      if ('function' === typeOf(f)) {
-        this[m] = f.bind(this);
-      }
-    });
-    selectors = dom.selectors;
+    ModelsTableBs.setContext(this);
+  },
+
+  afterEach() {
+    ModelsTableBs.removeContext();
   }
 
 });
@@ -64,24 +68,23 @@
 
 test('summary', function (assert) {
 
-  var data = A([]);
   this.setProperties({
-    data: data,
+    data: A([]),
     columns: generateColumns(['index'])
   });
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 0 - 0 of 0', 'Empty content');
+  assert.equal(ModelsTableBs.summary, 'Show 0 - 0 of 0', 'Empty content');
 
   this.set('data', generateContent(10));
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'Content for 1 page');
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 10', 'Content for 1 page');
 
   this.set('data', generateContent(15));
-  this.nextPage();
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 15 of 15', 'Content for 2 pages. Last page selected');
+  navigation.goToNextPage();
+  assert.equal(ModelsTableBs.summary, 'Show 11 - 15 of 15', 'Content for 2 pages. Last page selected');
 
   this.set('data', generateContent(35));
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 20 of 35', 'Content for 4 pages. Middle page selected');
+  assert.equal(ModelsTableBs.summary, 'Show 11 - 20 of 35', 'Content for 4 pages. Middle page selected');
 
 });
 
@@ -94,11 +97,11 @@
 
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.equal(this.getCount('table'), 1, 'Table exists');
-  assert.equal(this.getCount(selectors.allRows), 10, 'Table has 10 rows');
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'Summary is valid');
-  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 4, 'All navigation buttons are disabled');
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid');
+  assert.equal(ModelsTableBs.tablesCount, 1, 'Table exists');
+  assert.equal(rows().count, 10, 'Table has 10 rows');
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 10', 'Summary is valid');
+  assert.equal(navigation.disabledNavigationLinksCount, 4, 'All navigation buttons are disabled');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Content is valid');
 
 });
 
@@ -107,17 +110,17 @@
   this.set('columns', generateColumns(['index', 'reversedIndex']));
 
   this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getCount('table'), 1, 'Table exists');
-  assert.equal(this.getCount(selectors.allRows), 10, 'Table has 10 rows');
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'Summary is valid');
-  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 4, 'All navigation buttons are disabled');
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid');
+  assert.equal(ModelsTableBs.tablesCount, 1, 'Table exists');
+  assert.equal(rows().count, 10, 'Table has 10 rows');
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 10', 'Summary is valid');
+  assert.equal(navigation.disabledNavigationLinksCount, 4, 'All navigation buttons are disabled');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Content is valid');
 
   this.set('data.0.index', 11);
-  assert.equal(this.getEachAsString(selectors.firstColumn), '112345678910', 'Content is valid after update');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['11', '2', '3', '4', '5', '6', '7', '8', '9', '10'], 'Content is valid after update');
 
   this.set('data.firstObject.index', 12);
-  assert.equal(this.getEachAsString(selectors.firstColumn), '122345678910', 'Content is valid after second update');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['12', '2', '3', '4', '5', '6', '7', '8', '9', '10'], 'Content is valid after second update');
 
 });
 
@@ -126,7 +129,7 @@
   this.set('showComponentFooter', false);
   this.render(hbs`{{models-table showComponentFooter=showComponentFooter}}`);
 
-  assert.equal(this.getCount('.table-footer'), 0, 'table footer isn\'t rendered');
+  assert.equal(ModelsTableBs.tableFooterCount, 0, 'table footer isn\'t rendered');
 
 });
 
@@ -135,52 +138,49 @@
   this.set('data', generateContent(50, 1));
   this.render(hbs`{{models-table data=data}}`);
 
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 50', 'init value');
-  this.nextPage();
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 50', 'init value');
+  navigation.goToNextPage();
 
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 20 of 50', 'value changed by user');
-  this.changePageSize(25);
+  assert.equal(ModelsTableBs.summary, 'Show 11 - 20 of 50', 'value changed by user');
+  ModelsTableBs.changePageSize(25);
 
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 25 of 50', 'value restored to 1');
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 25 of 50', 'value restored to 1');
 
 });
 
 test('visibleContent', function (assert) {
 
-  var currentPageNumber = 1;
-  var data = generateContent(10);
-  var columns = generateColumns(['index']);
   this.setProperties({
-    columns: columns,
-    data: data,
+    columns: generateColumns(['index']),
+    data: generateContent(10),
     pageSize: 10,
-    currentPageNumber: currentPageNumber
+    currentPageNumber: 1
   });
 
   this.render(hbs`{{models-table data=data currentPageNumber=currentPageNumber pageSize=pageSize columns=columns}}`);
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(10).mapBy('index').join('|'), 'One page');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), generateContent(10).mapBy('index').map(c => `${c}`), 'One page');
 
   this.setProperties({
     data: generateContent(25, 1),
     currentPageNumber: 2
   });
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(10, 11).mapBy('index').join('|'), 'Second page');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), generateContent(10, 11).mapBy('index').map(c => `${c}`), 'Second page');
 
   this.setProperties({
     data: generateContent(25, 1),
     currentPageNumber: 1,
     pageSize: 50
   });
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(25, 1).mapBy('index').join('|'), 'One big page');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), generateContent(25, 1).mapBy('index').map(c => `${c}`), 'One big page');
 
   this.setProperties({
     data: generateContent(25, 1),
     currentPageNumber: 3,
     pageSize: 10
   });
-  this.nextPage();
-  this.nextPage();
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells, '|'), generateContent(5, 21).mapBy('index').join('|'), 'Last page');
+  navigation.goToNextPage();
+  navigation.goToNextPage();
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), generateContent(5, 21).mapBy('index').map(c => `${c}`), 'Last page');
 
 });
 
@@ -193,14 +193,14 @@
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  this.changePageSize(25);
-  assert.equal(this.getCount(selectors.tbodyAllRows), 25, '1st page has 25 rows');
+  ModelsTableBs.changePageSize(25);
+  assert.equal(rows().count, 25, '1st page has 25 rows');
 
-  this.nextPage();
-  assert.equal(this.getCount(selectors.tbodyAllRows), 25, '2nd page has 25 rows');
+  navigation.goToNextPage();
+  assert.equal(rows().count, 25, '2nd page has 25 rows');
 
-  this.nextPage();
-  assert.equal(this.getCount(selectors.tbodyAllRows), 25, '3rd page has 25 rows');
+  navigation.goToNextPage();
+  assert.equal(rows().count, 25, '3rd page has 25 rows');
 
 });
 
@@ -212,10 +212,10 @@
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  assert.ok(this.getEachClassAsString(selectors.tableNavBtnBack).indexOf('disabled') !== -1, 'Disabled, if user is on the 1st page');
+  assert.ok(navigation.goToPrevPageDisabled, 'Disabled, if user is on the 1st page');
 
-  this.nextPage();
-  assert.equal(this.getEachClassAsString(selectors.tableNavBtnBack).indexOf('disabled'), -1, `Enabled, if user isn't on the 1st page`);
+  navigation.goToNextPage();
+  assert.notOk(navigation.goToPrevPageDisabled, `Enabled, if user isn't on the 1st page`);
 
 });
 
@@ -227,18 +227,18 @@
   });
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
-  assert.ok(this.getEachClassAsString(selectors.tableNavBtnNext).indexOf('disabled') !== -1, 'One page only');
+  assert.ok(navigation.goToNextPageDisabled, 'One page only');
 
   this.set('data', generateContent(11));
-  assert.equal(this.getEachClassAsString(selectors.tableNavBtnNext).indexOf('disabled'), -1, `'One page + 1 record more`);
+  assert.notOk(navigation.goToNextPageDisabled, `'One page + 1 record more`);
 
   this.setProperties({
     data: generateContent(25)
   });
-  this.nextPage();
-  this.nextPage();
-  this.nextPage();
-  assert.ok(this.getEachClassAsString(selectors.tableNavBtnNext).indexOf('disabled') !== -1, 'Three pages, last one selected');
+  navigation.goToNextPage();
+  navigation.goToNextPage();
+  navigation.goToNextPage();
+  assert.ok(navigation.goToNextPageDisabled, 'Three pages, last one selected');
 
 });
 
@@ -250,226 +250,144 @@
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 2, '2 navigation buttons are disabled');
-  assert.equal(this.getCount(`${selectors.navigationLinks}.enabled`, '|'), 2, '2 navigation buttons are enabled');
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 20', 'Summary is valid');
+  assert.notOk(navigation.goToNextPageDisabled, 'next enabled');
+  assert.notOk(navigation.goToLastPageDisabled, 'last enabled');
+  assert.ok(navigation.goToPrevPageDisabled, 'prev disabled');
+  assert.ok(navigation.goToFirstPageDisabled, 'first disabled');
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 20', 'Summary is valid');
 
-  this.nextPage();
+  navigation.goToNextPage();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '11121314151617181920', 'Content is valid');
-  assert.equal(this.getCount(`${selectors.navigationLinks}.disabled`, '|'), 2, '2 navigation buttons are disabled');
-  assert.equal(this.getCount(`${selectors.navigationLinks}.enabled`, '|'), 2, '2 navigation buttons are enabled');
-
-});
-
-test('render custom template in the table cell', function (assert) {
-
-  var columns = generateColumns(['index', 'indexWithHtml']);
-  columns[1].template = 'custom/test';
-  this.setProperties({
-    data: generateContent(10, 1),
-    columns: columns
-  });
-
-  this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), '1+10|2+9|3+8|4+7|5+6|6+5|7+4|8+3|9+2|10+1', 'Content is valid');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20'], 'Content is valid');
+  assert.ok(navigation.goToNextPageDisabled, 'next disabled');
+  assert.ok(navigation.goToLastPageDisabled, 'last disabled');
+  assert.notOk(navigation.goToPrevPageDisabled, 'prev enabled');
+  assert.notOk(navigation.goToFirstPageDisabled, 'first enabled');
 
 });
 
 test('render custom component in the table cell', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].component = 'cell-component';
   this.setProperties({
     data: generateContent(20, 1),
-    columns: columns
+    columns
   });
 
   this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');
-
-});
-
-test('render custom template (input) in the filter cell', function (assert) {
-
-  var columns = generateColumns(['index', 'someWord']);
-  columns[1].templateForFilterCell = 'custom/filter-cell-input';
-  this.setProperties({
-    data: generateContent(10, 1),
-    columns: columns
-  });
-
-  this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');
-
-  this.filterSecondColumn('one');
-  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');
-
-  this.clearSecondColumnFilterByIcon();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');
-
-});
-
-test('render custom template (select) in the filter cell', function (assert) {
-
-  var columns = generateColumns(['index', 'someWord']);
-  var data = generateContent(10, 1);
-  columns[1].templateForFilterCell = 'custom/filter-cell-select';
-  columns[1].filterWithSelect = true;
-  this.setProperties({
-    data: data,
-    columns: columns
-  });
-
-  this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getEachAsString(`${selectors.theadSecondRowSecondColumnFilterSelect} option`, '|'), `|${oneTen}`, 'Filter options are correct');
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');
-
-  this.filterWithSelectSecondColumn('one');
-  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');
-
-  this.clearSecondColumnFilterByIcon();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArray, 'Content is valid');
 
 });
 
 test('render custom component (input) in the filter cell', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].componentForFilterCell = 'filter-cell-input';
 
   this.setProperties({
     data: generateContent(10, 1),
-    columns: columns
+    columns
   });
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArray, 'Content is valid');
 
-  this.filterSecondColumn('one');
-  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');
+  filters(1).inputFilter('one');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['one'], 'Content is filtered');
 
-  this.clearSecondColumnFilterByIcon();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');
+  filters(1).clearFilter();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArray, 'Content is restored');
 
 });
 
 test('render custom component (select) in the filter cell', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].componentForFilterCell = 'filter-cell-select';
 
   this.setProperties({
     data: generateContent(10, 1),
-    columns: columns
+    columns
   });
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
-  assert.equal(this.getEachAsString(`${selectors.theadSecondRowSecondColumnFilterSelect} option`, '|'), `|${oneTen}`, 'Filter options are correct');
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is valid');
+  assert.deepEqual(filters(1).selectOptions, ['', ...oneTenArray], 'Filter options are correct');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArray, 'Content is valid');
 
-  this.filterWithSelectSecondColumn('one');
-  assert.equal(this.getEachAsString(selectors.secondColumn, ''), 'one', 'Content is filtered');
+  filters(1).selectFilter('one');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['one'], 'Content is filtered');
 
-  this.clearSecondColumnFilterByIcon();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTen, 'Content is restored');
-
-});
-
-test('render custom template in the sort cell', function (assert) {
-
-  var columns = generateColumns(['index', 'someWord']);
-  columns[1].templateForSortCell = 'custom/sort-cell';
-
-  this.setProperties({
-    data: generateContent(10, 1),
-    columns: columns
-  });
-
-  this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);
-
-  this.sortSecondColumn();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenAsc, 'Content is valid (sorting 2nd column asc)');
-
-  this.sortSecondColumn();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenDesc, 'Content is valid (sorting 2nd column desc)');
+  filters(1).clearFilter();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArray, 'Content is restored');
 
 });
 
 test('render custom component in the sort cell', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].componentForSortCell = 'sort-cell';
 
   this.setProperties({
     data: generateContent(10, 1),
-    columns: columns
+    columns
   });
 
   this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);
-  this.sortSecondColumn();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenAsc, 'Content is valid (sorting 2nd column asc)');
+  sorting(1).click();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenAscArray, 'Content is valid (sorting 2nd column asc)');
 
-  this.sortSecondColumn();
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), oneTenDesc, 'Content is valid (sorting 2nd column desc)');
-
-});
-
-test('render custom simple pagination', function (assert) {
-
-  this.set('simplePaginationTemplate', 'custom/pagination');
-
-  this.render(hbs`{{models-table simplePaginationTemplate=simplePaginationTemplate}}`);
-  assert.equal(this.getEachAsString('.table-nav').replace(/\s+/g, ' '), 'F P N L', 'Custom labels are used');
+  sorting(1).click();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenDescArray, 'Content is valid (sorting 2nd column desc)');
 
 });
 
 test('render show/hide columns', function (assert) {
 
-  var firstColumnIconSelector = '.columns-dropdown li:nth-child(5) a span';
-  var secondColumnIconSelector = '.columns-dropdown li:nth-child(6) a span';
-  var checkedClass = 'glyphicon-check';
-  var uncheckedClass = 'glyphicon-unchecked';
+  const firstColumnIconSelector = '.columns-dropdown li:nth-child(5) a span';
+  const secondColumnIconSelector = '.columns-dropdown li:nth-child(6) a span';
+  const checkedClass = 'glyphicon-check';
+  const uncheckedClass = 'glyphicon-unchecked';
   this.setProperties({
     columns: generateColumns(['index', 'reversedIndex']),
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');
+  assert.equal(sorting().count, 2, '2 columns are shown (thead)');
+  assert.equal(filters().count, 2, '2 columns are shown (thead)');
+  assert.equal(rows(0).cells().count, 2, '2 columns are shown (tbody)');
 
-  this.toggleFirstColumnVisibility();
+  columnsDropDown(3).click();
 
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');
-  assert.equal(this.getEachAsString(selectors.theadFirstRowFirstCell), 'reversedIndex', 'Valid column is shown (thead)');
+  assert.equal(sorting().count, 1, '1 column is shown (thead)');
+  assert.equal(filters().count, 1, '1 column is shown (thead)');
+  assert.equal(rows(0).cells().count, 1, '1 column is shown (tbody)');
+  assert.deepEqual(sorting().mapBy('title'), ['reversedIndex'], 'Valid column is shown (thead)');
   assert.equal(this.$(firstColumnIconSelector).hasClass(uncheckedClass), true, 'First column is unchecked');
   assert.equal(this.$(secondColumnIconSelector).hasClass(checkedClass), true, 'Second column is checked');
 
-  this.toggleFirstColumnVisibility();
+  columnsDropDown(3).click();
 
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');
+  assert.equal(sorting().count, 2, '2 columns are shown (thead)');
+  assert.equal(filters().count, 2, '2 columns are shown (tbody)');
   assert.equal(this.$(firstColumnIconSelector).hasClass(checkedClass), true, 'First column is checked');
   assert.equal(this.$(secondColumnIconSelector).hasClass(checkedClass), true, 'Second column is checked');
 
-  this.toggleSecondColumnVisibility();
+  columnsDropDown(4).click();
 
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');
-  assert.equal(this.getEachAsString(selectors.theadFirstRowFirstCell), 'index', 'Valid column is shown (thead)');
+  assert.equal(sorting().count, 1, '1 column is shown (thead)');
+  assert.equal(filters().count, 1, '1 column is shown (tbody)');
+  assert.deepEqual(sorting().mapBy('title'), ['index'], 'Valid column is shown (thead)');
   assert.equal(this.$(firstColumnIconSelector).hasClass(checkedClass), true, 'First column is checked');
   assert.equal(this.$(secondColumnIconSelector).hasClass(uncheckedClass), true, 'Second column is unchecked');
 
-  this.toggleFirstColumnVisibility();
+  columnsDropDown(3).click();
 
-  assert.equal(this.getCount(selectors.allRows), 1, '1 row is shown when all columns are hidden');
-  assert.equal(this.getCount(selectors.tbodyAllCells), 1, 'with 1 cell');
-  assert.equal(this.$(selectors.tbodyAllCells).attr('colspan'), 2, 'it\'s colspan is equal to the columns count');
-  assert.equal(this.getEachAsString(selectors.tbodyAllCells), 'All columns are hidden. Use columns-dropdown to show some of them', 'correct message is shown');
+  assert.equal(rows().count, 1, '1 row is shown when all columns are hidden');
+  assert.equal(ModelsTableBs.getCellsCount(), 1, 'with 1 cell');
+  assert.equal(rows(0).getCellColspans(), 2, 'it\'s colspan is equal to the columns count');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['All columns are hidden. Use columns-dropdown to show some of them'], 'correct message is shown');
   assert.equal(this.$(firstColumnIconSelector).hasClass(uncheckedClass), true, 'First column is unchecked');
   assert.equal(this.$(secondColumnIconSelector).hasClass(uncheckedClass), true, 'Second column is unchecked');
 
@@ -482,50 +400,51 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');
+  assert.equal(sorting().count, 2, '2 columns are shown (thead)');
+  assert.equal(filters().count, 2, '2 columns are shown (thead)');
+  assert.equal(rows(0).cells().count, 2, '2 columns are shown (tbody)');
 
-  this.hideAllColumns();
+  columnsDropDown(1).click();
 
-  assert.equal(this.getCount(selectors.allRows), 1, '1 row is shown when all columns are hidden');
-  assert.equal(this.getCount(selectors.tbodyAllCells), 1, 'with 1 cell');
-  assert.equal(this.getEachAsString(selectors.tbodyAllCells), 'All columns are hidden. Use columns-dropdown to show some of them', 'correct message is shown');
+  assert.equal(rows().count, 1, '1 row is shown when all columns are hidden');
+  assert.equal(ModelsTableBs.getCellsCount(), 1, 'with 1 cell');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['All columns are hidden. Use columns-dropdown to show some of them'], 'correct message is shown');
 
-  this.showAllColumns();
+  columnsDropDown(0).click();
 
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 2, '2 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown (tbody)');
+  assert.equal(sorting().count, 2, '2 columns are shown (thead)');
+  assert.equal(filters().count, 2, '2 columns are shown (thead)');
+  assert.equal(rows(0).cells().count, 2, '2 columns are shown (tbody)');
 
 });
 
 test('render columns-dropdown with mayBeHidden = false for some columns', function (assert) {
 
-  var columns = generateColumns(['index', 'reversedIndex']);
+  const columns = generateColumns(['index', 'reversedIndex']);
   columns[0].mayBeHidden = false;
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
 
   this.render(hbs`{{models-table columns=columns data=data}}`);
-  assert.equal(this.getEachAsString('.columns-dropdown li a').replace(/\s+/g, ''), ('Show All' + 'Hide All' + 'Restore Defaults' + 'reversedIndex').replace(/\s+/g, ''), 'Column with mayBeHidden = false is not shown in the columns dropdown');
+  assert.deepEqual(columnsDropDown().mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'reversedIndex'], 'Column with mayBeHidden = false is not shown in the columns dropdown');
 
-  this.toggleFirstColumnVisibility();
+  columnsDropDown(3).click();
 
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells).replace(/\s+/g,''), 'index', 'Valid column is shown (thead)');
-  this.toggleFirstColumnVisibility();
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 2, '2 columns are shown');
+  assert.equal(sorting().count, 1, '1 column are shown (thead)');
+  assert.equal(filters().count, 1, '1 column are shown (thead)');
+  assert.equal(rows(0).cells().count, 1, '1 column are shown (tbody)');
+  assert.deepEqual(sorting().mapBy('title'), ['index'], 'Valid column is shown (thead)');
 
-  this.hideAllColumns();
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 1, '1 column is shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 1, '1 column is shown (tbody)');
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells).replace(/\s+/g,''), 'index', 'Valid column is shown (thead)');
+  columnsDropDown(3).click();
+  assert.equal(sorting().count, 2, '2 columns are shown (thead)');
+
+  columnsDropDown(1).click();
+  assert.equal(sorting().count, 1, '1 column are shown (thead)');
+  assert.equal(filters().count, 1, '1 column are shown (thead)');
+  assert.equal(rows(0).cells().count, 1, '1 column are shown (tbody)');
+  assert.deepEqual(sorting().mapBy('title'), ['index'], 'Valid column is shown (thead)');
 
 });
 
@@ -559,515 +478,495 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data columnSets=columnSets}}`);
-  assert.equal(this.getCount(selectors.theadFirstRowCells), 4, '4 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.theadSecondRowCells), 4, '4 columns are shown (thead)');
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, '4 columns are shown (tbody)');
+  assert.equal(sorting().count, 4, '4 columns are shown (thead)');
+  assert.equal(filters().count, 4, '4 columns are shown (thead)');
+  assert.equal(rows(0).cells().count, 4, '4 columns are shown (tbody)');
 
-  this.hideAllColumns();
-  this.toggleColumnsDropdownItem(3);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are shown for default settings');
+  columnsDropDown(1).click();
+  columnsDropDown(3).click();
+  assert.equal(rows(0).cells().count, 2, '2 columns are shown for default settings');
 
-  this.toggleColumnsDropdownItem(3);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, '2 columns are still shown after repeated click');
+  columnsDropDown(3).click();
+  assert.equal(rows(0).cells().count, 2, '2 columns are still shown after repeated click');
 
-  this.showAllColumns();
-  this.toggleColumnsDropdownItem(3);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, 'other columns are hidden if hideOtherColumns=true');
+  columnsDropDown(0).click();
+  columnsDropDown(3).click();
+  assert.equal(rows(0).cells().count, 2, 'other columns are hidden if hideOtherColumns=true');
 
-  this.showAllColumns();
-  this.toggleColumnsDropdownItem(8); // This is the first regular column
-  this.toggleColumnsDropdownItem(4);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'other columns are not hidden if hideOtherColumns=false');
+  columnsDropDown(0).click();
+  columnsDropDown(7).click(); // This is the first regular column
+  columnsDropDown(4).click();
+  assert.equal(rows(0).cells().count, 4, 'other columns are not hidden if hideOtherColumns=false');
 
-  this.toggleColumnsDropdownItem(4);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'columns remain visible after repeated click with hideOtherColumns=false');
+  columnsDropDown(4).click();
+  assert.equal(rows(0).cells().count, 4, 'columns remain visible after repeated click with hideOtherColumns=false');
 
-  this.toggleColumnsDropdownItem(5);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 2, 'columns are hidden if toggleSet=true and both columns are visible');
+  columnsDropDown(5).click();
+  assert.equal(rows(0).cells().count, 2, 'columns are hidden if toggleSet=true and both columns are visible');
 
-  this.toggleColumnsDropdownItem(5);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'columns are shown if toggleSet=true and both columns are hidden');
+  columnsDropDown(5).click();
+  assert.equal(rows(0).cells().count, 4, 'columns are shown if toggleSet=true and both columns are hidden');
 
-  this.toggleColumnsDropdownItem(8); // This is the first regular column
-  this.toggleColumnsDropdownItem(5);
-  assert.equal(this.getCount(selectors.tbodyFirstRowCells), 4, 'columns are shown if toggleSet=true and one of them is hidden');
+  columnsDropDown(7).click(); // This is the first regular column
+  columnsDropDown(5).click();
+  assert.equal(rows(0).cells().count, 4, 'columns are shown if toggleSet=true and one of them is hidden');
 
-  this.toggleColumnsDropdownItem(6);
+  columnsDropDown(6).click();
   assert.ok(customFunctionCalled, 'custom function is called if showColumns is a function');
   assert.deepEqual(customFunctionCalled.mapBy('propertyName'), ['index', 'index2', 'reversedIndex', 'id'], 'custom function gets columns as argument');
 });
 
 test('global filtering (ignore case OFF)', function(assert) {
 
-  var columns = generateColumns(['index', 'reversedIndex']);
-  columns[1].template = 'custom/test';
+  const columns = generateColumns(['index', 'reversedIndex']);
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  this.globalFilter('1');
+  ModelsTableBs.doGlobalFilter('1');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn, '|'), '1|10', 'Content is filtered correctly');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1', '10'], 'Content is filtered correctly');
 
-  this.globalFilter('');
+  ModelsTableBs.doGlobalFilter('');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Filter is empty and all rows are shown');
 
-  this.globalFilter('invalid input');
+  ModelsTableBs.doGlobalFilter('invalid input');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');
-  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');
+  assert.equal(rows(0).getCellColspans(), columns.length, 'cell with message has correct colspan');
 
 });
 
 test('global filtering (ignore case ON)', function(assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   this.setProperties({
       filteringIgnoreCase: true,
-      columns: columns,
+      columns,
       data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data filteringIgnoreCase=filteringIgnoreCase}}`);
 
-  this.globalFilter('One');
+  ModelsTableBs.doGlobalFilter('One');
 
-  assert.equal(this.getEachAsString(selectors.tbodyFirstRowCells), '1one', 'Content is filtered correctly');
+  assert.deepEqual(rows(0).cells().mapBy('content'), ['1', 'one'], 'Content is filtered correctly');
 
-  this.globalFilter('');
+  ModelsTableBs.doGlobalFilter('');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Filter is empty and all rows are shown');
 
-  this.globalFilter('invalid input');
+  ModelsTableBs.doGlobalFilter('invalid input');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');
-  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');
+  assert.equal(rows(0).getCellColspans(), columns.length, 'cell with message has correct colspan');
 
-  this.globalFilter('');
-  this.sortFirstColumn();
-  this.sortFirstColumn();
+  ModelsTableBs.doGlobalFilter('');
+  sorting(0).click();
+  sorting(0).click();
 
-  this.globalFilter('One');
+  ModelsTableBs.doGlobalFilter('One');
 
-  assert.equal(this.getEachAsString(selectors.tbodySecondColumnCells), 'one', 'Content is filtered correctly when sorting is not done');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['one'], 'Content is filtered correctly when sorting is not done');
 
 });
 
 test('filtering by columns (ignore case OFF)', function (assert) {
 
-  var columns = generateColumns(['index', 'reversedIndex']);
-  columns[1].template = 'custom/test';
+  const columns = generateColumns(['index', 'reversedIndex']);
   columns[0].filterPlaceholder = 'custom placeholder';
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1),
     useFilteringByColumns: true
   });
 
   this.render(hbs`{{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}`);
-  this.filterFirstColumn('1');
+  filters(0).inputFilter('1');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn, '|'), '1|10', 'Content is filtered correctly');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1', '10'], 'Content is filtered correctly');
 
-  this.filterFirstColumn('');
+  filters(0).inputFilter('');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Filter is empty and all rows are shown');
 
-  this.filterFirstColumn('invalid input');
+  filters(0).inputFilter('invalid input');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');
-  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');
+  assert.equal(rows(0).getCellColspans(), columns.length, 'cell with message has correct colspan');
 
-  assert.equal(this.getEachAttrAsString(selectors.theadSecondRowFirstColumnFilter, 'placeholder'), 'custom placeholder', 'Placeholder is correct');
+  assert.equal(filters(0).inputPlaceholder, 'custom placeholder', 'Placeholder is correct');
 
   this.set('useFilteringByColumns', false);
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filtering by columns is ignored');
-  assert.equal(this.getCount('thead input'), 0, 'Columns filters are hidden');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Filtering by columns is ignored');
+  assert.equal($('thead input').length, 0, 'Columns filters are hidden');
 
 });
 
 test('filtering by columns (ignore case ON)', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   this.setProperties({
     filteringIgnoreCase: true,
     useFilteringByColumns: true,
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
 
   this.render(hbs`{{models-table filteringIgnoreCase=filteringIgnoreCase columns=columns data=data useFilteringByColumns=useFilteringByColumns}}`);
-  this.filterSecondColumn('One');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstRowCells), '1one', 'Content is filtered correctly');
+  filters(1).inputFilter('One');
+  assert.deepEqual(rows(0).cells().mapBy('content'), ['1', 'one'], 'Content is filtered correctly');
 
-  this.filterSecondColumn('');
+  filters(1).inputFilter('');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filter is empty and all rows are shown');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Filter is empty and all rows are shown');
 
-  this.filterSecondColumn('invalid input');
+  filters(1).inputFilter('invalid input');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), 'No records to show', 'All rows are filtered out and proper message is shown');
-  assert.equal(this.getEachAttrAsString(selectors.firstColumn, 'colspan'), columns.length, 'cell with message has correct colspan');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['No records to show'], 'All rows are filtered out and proper message is shown');
+  assert.equal(rows(0).getCellColspans(), columns.length, 'cell with message has correct colspan');
 
-  this.filterSecondColumn('');
+  filters(1).inputFilter('');
 
-  this.filterSecondColumn('One');
-  assert.equal(this.getEachAsString(selectors.tbodySecondColumnCells), 'one', 'Content is filtered correctly when sorting is not done');
+  filters(1).inputFilter('One');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['one'], 'Content is filtered correctly when sorting is not done');
 
   this.set('useFilteringByColumns', false);
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Filtering by columns is ignored');
-  assert.equal(this.getCount('thead input'), 0, 'Columns filters are hidden');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Filtering by columns is ignored');
+  assert.equal(filters().count, 0, 'Columns filters are hidden');
 
 });
 
 test('filtering by columns with custom functions', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[0].filterFunction = signFilter;
 
   this.setProperties({
     useFilteringByColumns: true,
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
 
   this.render(hbs`{{models-table columns=columns data=data useFilteringByColumns=useFilteringByColumns}}`);
-  this.filterFirstColumn('=1');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '1', `Content is filtered correctly (with '=1')`);
+  filters(0).inputFilter('=1');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1'], `Content is filtered correctly (with '=1')`);
 
-  this.filterFirstColumn('>5');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '678910', `Content is filtered correctly (with '>5')`);
+  filters(0).inputFilter('>5');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['6', '7', '8', '9', '10'], `Content is filtered correctly (with '>5')`);
 
-  this.filterFirstColumn('<6');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345', `Content is filtered correctly (with '<6')`);
+  filters(0).inputFilter('<6');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1', '2', '3', '4', '5'], `Content is filtered correctly (with '<6')`);
 
 });
 
 test('filtering by columns with custom functions and predefined filter options', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[0].filterFunction = signFilter;
   columns[0].filterWithSelect = true;
   columns[0].predefinedFilterOptions = ['=1', '>5', '<6'];
 
   this.setProperties({
     useFilteringByColumns: true,
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
 
   this.render(hbs`{{models-table columns=columns data=data useFilteringByColumns=useFilteringByColumns}}`);
-  this.filterWithSelectFirstColumn('=1');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '1', `Content is filtered correctly (with '=1')`);
+  filters(0).selectFilter('=1');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1'], `Content is filtered correctly (with '=1')`);
 
-  this.filterWithSelectFirstColumn('>5');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '678910', `Content is filtered correctly (with '>5')`);
+  filters(0).selectFilter('>5');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['6', '7', '8', '9', '10'], `Content is filtered correctly (with '>5')`);
 
-  this.filterWithSelectFirstColumn('<6');
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345', `Content is filtered correctly (with '<6')`);
+  filters(0).selectFilter('<6');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1', '2', '3', '4', '5'], `Content is filtered correctly (with '<6')`);
 
 });
 
 test('filtering with filterWithSelect (without predefinedFilterOptions)', function (assert) {
 
-  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;
-
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
   data[data.length - 1].someWord = '';
-  var concatenatedWords = data.mapBy('someWord').join('');
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.equal(this.getCount(`${selectSelector}  option`), 10, 'Empty data-value was excluded');
-  assert.equal(this.getEachAsString(`${selectSelector}  option:last-child`), 'nine', 'Last option is not empty string');
+  assert.equal(filters(1).selectOptions.length, 10, 'Empty data-value was excluded');
 
-  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');
-  assert.equal(this.getEachAsString(`${selectSelector}  option`).replace(/\s+/g, ''), concatenatedWords, 'Options for select are valid');
+  assert.deepEqual(filters(1).selectOptions, ['', ...data.mapBy('someWord').slice(0, -1)], 'Options for select are valid');
 
-  this.filterWithSelectSecondColumn('one');
+  filters(1).selectFilter('one');
 
-  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');
+  assert.equal(rows().count, 1, 'Only one row exist after filtering');
 
   this.set('data.0.someWord', 'not a number');
 
-  assert.equal(this.$(selectSelector + ' option:selected').val(), '', 'Filter is reverted to the default value');
+  assert.equal(filters(1).selectValue, '', 'Filter is reverted to the default value');
 
-  this.filterWithSelectSecondColumn('');
+  filters(1).selectFilter('');
 
-  assert.equal(this.getCount(selectors.allRows), 10, 'All rows are shown after clear filter');
+  assert.equal(rows().count, 10, 'All rows are shown after clear filter');
 
 });
 
 test('filtering with filterWithSelect (without predefinedFilterOptions), `sortFilterOptions` is true', function (assert) {
 
-  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;
-
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
   columns[1].sortFilterOptions = true;
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
   data[data.length - 1].someWord = '';
-  var words = data.mapBy('someWord').sort();
-  var concatenatedWords = words.join('');
+  const words = data.mapBy('someWord').sort();
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');
-  assert.equal(this.getEachAsString(`${selectSelector}  option`).replace(/\s+/g, ''), concatenatedWords, 'Options for select are valid');
+  assert.deepEqual(filters(1).selectOptions, words, 'Options for select are valid');
 
-  this.filterWithSelectSecondColumn('one');
+  filters(1).selectFilter('one');
 
-  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');
+  assert.equal(rows().count, 1, 'Only one row exist after filtering');
 
 });
 
 test('filtering with filterWithSelect (without predefinedFilterOptions), sort by property with boolean values', function (assert) {
 
-  var columns = generateColumns(['index', 'rand']);
+  const columns = generateColumns(['index', 'rand']);
   columns[1].filterWithSelect = true;
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.equal(this.getCount(selectors.allRows), 10, '10 rows exist before filtering');
+  assert.equal(rows().count, 10, '10 rows exist before filtering');
 
-  this.filterWithSelectSecondColumn('true');
-  assert.equal(this.getCount(selectors.allRows), 5, '5 rows exist after filtering');
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), 'true|true|true|true|true', 'valid rows are shown');
+  filters(1).selectFilter('true');
+  assert.equal(rows().count, 5, '5 rows exist after filtering');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['true', 'true', 'true', 'true', 'true'], 'valid rows are shown');
 
-  this.filterWithSelectSecondColumn('false');
-  assert.equal(this.getCount(selectors.allRows), 5, '5 rows exist after filtering (2)');
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), 'false|false|false|false|false', 'valid rows are shown (2)');
+  filters(1).selectFilter('false');
+  assert.equal(rows().count, 5, '5 rows exist after filtering (2)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['false', 'false', 'false', 'false', 'false'], 'valid rows are shown (2)');
 
 });
 
 test('filtering with filterWithSelect (with predefinedFilterOptions as primitives)', function (assert) {
 
-  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;
-
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
   columns[1].predefinedFilterOptions = ['one', 'two'];
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
 
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');
-  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\s+/g, ''), 'onetwo', 'Options for select are valid');
+  assert.deepEqual(filters(1).selectOptions, ['', 'one', 'two'], 'Options for select are valid');
 
-  this.filterWithSelectSecondColumn('one');
-  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Proper option is selected');
-  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');
+  filters(1).selectFilter('one');
+  assert.equal(filters(1).selectValue, 'one', 'Proper option is selected');
+  assert.equal(rows().count, 1, 'Only one row exist after filtering');
 
   this.set('data', generateContent(9, 2));
 
-  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Filter is not reverted to the default value');
-  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\s+/g, ''), 'onetwo', 'Options for select are valid');
+  assert.equal(filters(1).selectValue, 'one', 'Filter is not reverted to the default value');
+  assert.deepEqual(filters(1).selectOptions, ['', 'one', 'two'], 'Options for select are valid');
 
-  this.filterWithSelectSecondColumn('');
+  filters(1).selectFilter('');
 
-  assert.equal(this.getCount(selectors.allRows), 9, 'All rows are shown after clear filter');
+  assert.equal(rows().count, 9, 'All rows are shown after clear filter');
 
 });
 
 test('filtering with filterWithSelect (with predefinedFilterOptions as objects)', function (assert) {
 
-  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;
-
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
   columns[1].predefinedFilterOptions = [{label: '1', value: 'one'}, {label: '2', value: 'two'}];
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
 
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  assert.ok(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` exists');
-  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\s+/g, ''), '12', 'Options for select are valid');
+  assert.deepEqual(filters(1).selectOptions, ['', '1', '2'], 'Options for select are valid');
 
-  this.filterWithSelectSecondColumn('one');
-  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Proper option is selected');
-  assert.equal(this.getCount(selectors.allRows), 1, 'Only one row exist after filtering');
+  filters(1).selectFilter('one');
+  assert.equal(filters(1).selectValue, 'one', 'Proper option is selected');
+  assert.equal(rows().count, 1, 'Only one row exist after filtering');
 
   this.set('data', generateContent(9, 2));
 
-  assert.equal(this.$(selectSelector + ' option:selected').val(), 'one', 'Filter is not reverted to the default value');
-  assert.equal(this.getEachAsString(`${selectSelector} option`).replace(/\s+/g, ''), '12', 'Options for select are valid');
+  assert.equal(filters(1).selectValue, 'one', 'Filter is not reverted to the default value');
+  assert.deepEqual(filters(1).selectOptions, ['', '1', '2'], 'Options for select are valid');
 
-  this.filterWithSelectSecondColumn('');
+  filters(1).selectFilter('');
 
-  assert.equal(this.getCount(selectors.allRows), 9, 'All rows are shown after clear filter');
+  assert.equal(rows().count, 9, 'All rows are shown after clear filter');
 
 });
 
 test('filtering with filterWithSelect (with predefinedFilterOptions as empty array)', function (assert) {
 
-  var selectSelector = `${selectors.theadSecondRowCells}:eq(1) select`;
-
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
   columns[1].predefinedFilterOptions = [];
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
 
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  assert.notOk(this.$(selectSelector).length, 'Select-box for column with `filterWithSelect` does not exist if empty predefinedFilterOptions are given');
+  assert.notOk(filters(1).selectFilterExists, 'Select-box for column with `filterWithSelect` does not exist if empty predefinedFilterOptions are given');
 });
 
 test('filtering with `filteredBy`', function (assert) {
 
-  var columns = generateColumns(['index', 'index']);
+  const columns = generateColumns(['index', 'index']);
   delete columns[0].propertyName;
-  columns[0].template = 'custom/test';
   columns[0].filteredBy = 'index';
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1),
     useFilteringByColumns: true
   });
   this.render(hbs`{{models-table data=data columns=columns useFilteringByColumns=useFilteringByColumns}}`);
 
-  this.filterSecondColumn('1');
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), '1|10', 'Content is filtered correctly');
+  filters(1).inputFilter('1');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['1', '10'], 'Content is filtered correctly');
 
-  this.filterSecondColumn('');
-  assert.equal(this.getEachAsString(selectors.secondColumn), '12345678910', 'Filter is empty and all rows are shown');
+  filters(1).inputFilter('');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArrayDig, 'Filter is empty and all rows are shown');
 
 });
 
-test('`filteredBy` hash higher priority than `propertyName`', function (assert) {
+test('`filteredBy` has higher priority than `propertyName`', function (assert) {
 
-  var columns = generateColumns(['someWord']);
+  const columns = generateColumns(['someWord']);
   columns[0].filteredBy = 'index';
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table data=data columns=columns}}`);
-  this.globalFilter('2');
-  assert.equal(this.getEachAsString(selectors.firstColumn), 'two', 'Content is filtered correctly (global filter)');
+  ModelsTableBs.doGlobalFilter('2');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['two'], 'Content is filtered correctly (global filter)');
 
-  this.globalFilter('');
-  this.filterFirstColumn('2');
-  assert.equal(this.getEachAsString(selectors.firstColumn), 'two', 'Content is filtered correctly (filter by column)');
+  ModelsTableBs.doGlobalFilter('');
+  filters(0).inputFilter('2');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['two'], 'Content is filtered correctly (filter by column)');
 
 });
 
 test('icons for clearing filters exist', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
-  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');
+  assert.notOk(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon does not exist');
 
-  this.globalFilter(2);
-  assert.ok(this.elementExist(selectors.filterStringClearIcon),'`Clear global filter` icon exists');
-  assert.ok(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon exists');
-  this.globalFilter('');
-  assert.notOk(this.elementExist(selectors.filterStringClearIcon), '`Clear global filter` icon does not exist');
-  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');
+  ModelsTableBs.doGlobalFilter(2);
+  assert.ok(ModelsTableBs.clearGlobalFilterExists, '`Clear global filter` icon exists');
+  assert.ok(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon exists');
+  ModelsTableBs.doGlobalFilter('');
+  assert.notOk(ModelsTableBs.clearGlobalFilterExists, '`Clear global filter` icon does not exist');
+  assert.notOk(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon does not exist');
 
-  this.filterFirstColumn(1);
-  assert.ok(this.elementExist(selectors.theadSecondRowFirstColumnClearFilterIcon), '`Clear first column filter` icon exists');
-  assert.ok(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon exists');
-  this.filterFirstColumn('');
-  assert.notOk(this.elementExist(selectors.theadSecondRowFirstColumnClearFilterIcon), '`Clear first column filter` icon does not exist');
-  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');
+  filters(0).inputFilter(1);
+  assert.ok(filters(0).clearFilterExists, '`Clear first column filter` icon exists');
+  assert.ok(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon exists');
+  filters(0).inputFilter('');
+  assert.notOk(filters(0).clearFilterExists, '`Clear first column filter` icon does not exist');
+  assert.notOk(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon does not exist');
 
-  this.filterWithSelectSecondColumn('one');
-  assert.ok(this.elementExist(selectors.theadSecondRowSecondColumnClearFilterIcon), '`Clear second column select filter` icon exists');
-  assert.ok(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon exists');
-  this.filterWithSelectSecondColumn('');
-  assert.notOk(this.elementExist(selectors.theadSecondRowSecondColumnClearFilterIcon), '`Clear second column select filter` icon does not exist');
-  assert.notOk(this.elementVisible(selectors.clearAllFilters), '`Clear all filters` icon does not exist');
+  filters(1).selectFilter('one');
+  assert.ok(filters(1).clearFilterExists, '`Clear second column select filter` icon exists');
+  assert.ok(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon exists');
+  filters(1).selectFilter('');
+  assert.notOk(filters(1).clearFilterExists, '`Clear second column select filter` icon does not exist');
+  assert.notOk(ModelsTableBs.clearAllFiltersExists, '`Clear all filters` icon does not exist');
 
 });
 
 test('clear filters using icons', function (assert) {
 
-  var columns = generateColumns(['index', 'someWord']);
+  const columns = generateColumns(['index', 'someWord']);
   columns[1].filterWithSelect = true;
-  var data = generateContent(10, 1);
+  const data = generateContent(10, 1);
   this.setProperties({
-    columns: columns,
-    data: data
+    columns,
+    data
   });
 
   this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  this.globalFilter(2);
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Global filter is used');
-  this.clearGlobalFilterByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Global filter is clear (1)');
+  ModelsTableBs.doGlobalFilter(2);
+  assert.equal(rows().count, 1, 'Global filter is used');
+  ModelsTableBs.clearGlobalFilter();
+  assert.equal(rows().count, data.length, 'Global filter is clear (1)');
 
-  this.globalFilter(2);
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Global filter is used');
-  this.clearAllFiltersByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Global filter is clear (2)');
+  ModelsTableBs.doGlobalFilter(2);
+  assert.equal(rows().count, 1, 'Global filter is used');
+  ModelsTableBs.clearAllFilters();
+  assert.equal(rows().count, data.length, 'Global filter is clear (2)');
 
-  this.filterFirstColumn(2);
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for first column is used');
-  this.clearFirstColumnFilterByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for first column is clear (1)');
+  filters(0).inputFilter(2);
+  assert.equal(rows().count, 1, 'Filter for first column is used');
+  ModelsTableBs.clearAllFilters();
+  assert.equal(rows().count, data.length, 'Filter for first column is clear (1)');
 
-  this.filterFirstColumn(2);
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for first column is used');
-  this.clearAllFiltersByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for first column is clear (2)');
+  filters(0).inputFilter(2);
+  assert.equal(rows().count, 1, 'Filter for first column is used');
+  ModelsTableBs.clearAllFilters();
+  assert.equal(rows().count, data.length, 'Filter for first column is clear (2)');
 
-  this.filterWithSelectSecondColumn('one');
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for second column is used');
-  this.clearSecondColumnFilterByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for second column is clear (1)');
+  filters(1).selectFilter('one');
+  assert.equal(rows().count, 1, 'Filter for second column is used');
+  filters(1).clearFilter();
+  assert.equal(rows().count, data.length, 'Filter for second column is clear (1)');
 
-  this.filterWithSelectSecondColumn('one');
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'Filter for second column is used');
-  this.clearAllFiltersByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'Filter for second column is clear (2)');
+  filters(1).selectFilter('one');
+  assert.equal(rows().count, 1, 'Filter for second column is used');
+  ModelsTableBs.clearAllFilters();
+  assert.equal(rows().count, data.length, 'Filter for second column is clear (2)');
 
-  this.globalFilter(2);
-  this.filterFirstColumn(2);
-  this.filterWithSelectSecondColumn('two');
-  assert.equal(this.getCount(selectors.tbodyAllRows), 1, 'All filters are used, 1 row shown');
-  this.clearAllFiltersByIcon();
-  assert.equal(this.getCount(selectors.tbodyAllRows), data.length, 'All filters are clear');
+  ModelsTableBs.doGlobalFilter(2);
+  filters(0).inputFilter(2);
+  filters(1).selectFilter('two');
+  assert.equal(rows().count, 1, 'All filters are used, 1 row shown');
+  ModelsTableBs.clearAllFilters();
+  assert.equal(rows().count, data.length, 'All filters are clear');
 
 });
 
 test('custom messages', function (assert) {
 
-  var messages = O.create({
+  const messages = O.create({
     searchLabel: 'Se@rch:',
     'columns-title': 'ColumnZ',
     'columns-showAll': 'Show Me All!',
@@ -1078,7 +977,7 @@
     noDataToShow: 'No data. Sorry, bro...'
   });
 
-  var messages2 = O.create({
+  const messages2 = O.create({
     searchLabel: 'SEARCH',
     'columns-title': 'COLUMNS',
     'columns-showAll': 'SHOW All',
@@ -1097,42 +996,42 @@
 
   this.render(hbs`{{models-table data=data columns=columns customMessages=customMessages}}`);
 
-  assert.equal(this.getEachAsString(selectors.summary), 'Now are showing 1 - 10 of 10', 'Summary is valid');
-  assert.equal(this.getEachAsString('.columns-dropdown button'), messages['columns-title'], 'Columns-dropdown title is valid');
-  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(0)'), messages['columns-showAll'], 'Columns-dropdown "showAll" is valid');
-  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(1)'), messages['columns-hideAll'], 'Columns-dropdown "hideAll" is valid');
-  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(2)'), messages['columns-restoreDefaults'], 'Columns-dropdown "restoreDefaults" is valid');
-  assert.equal(this.getEachAsString('.globalSearch label'), messages.searchLabel, 'Global-search label is valid');
+  assert.equal(ModelsTableBs.summary, 'Now are showing 1 - 10 of 10', 'Summary is valid');
+  assert.equal(columnsDropDown().toggleLabel, messages['columns-title'], 'Columns-dropdown title is valid');
+  assert.equal(columnsDropDown(0).label, messages['columns-showAll'], 'Columns-dropdown "showAll" is valid');
+  assert.equal(columnsDropDown(1).label, messages['columns-hideAll'], 'Columns-dropdown "hideAll" is valid');
+  assert.equal(columnsDropDown(2).label, messages['columns-restoreDefaults'], 'Columns-dropdown "restoreDefaults" is valid');
+  assert.equal(ModelsTableBs.globalFilterLabel, messages.searchLabel, 'Global-search label is valid');
 
-  this.hideAllColumns();
+  columnsDropDown(1).click();
 
-  assert.equal(this.getEachAsString(selectors.tbodyAllCells), messages.allColumnsAreHidden, 'Message about all hidden columns is valid');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), [messages.allColumnsAreHidden], 'Message about all hidden columns is valid');
 
-  this.showAllColumns();
-  this.globalFilter('invalid string');
+  columnsDropDown(0).click();
+  ModelsTableBs.doGlobalFilter('invalid string');
 
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), messages.noDataToShow, 'Message about no data is valid');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), [messages.noDataToShow], 'Message about no data is valid');
 
   this.set('customMessages', messages2);
 
-  this.globalFilter('');
+  ModelsTableBs.doGlobalFilter('');
 
-  assert.equal(this.getEachAsString(selectors.summary), 'DISPLAY 1 - 10 OF 10', 'Summary is valid (2)');
-  assert.equal(this.getEachAsString('.columns-dropdown button'), messages2['columns-title'], 'Columns-dropdown title is valid (2)');
-  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(0)'), messages2['columns-showAll'], 'Columns-dropdown "showAll" is valid (2)');
-  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(1)'), messages2['columns-hideAll'], 'Columns-dropdown "hideAll" is valid (2)');
-  assert.equal(this.getEachAsString('.columns-dropdown .dropdown-menu li:eq(2)'), messages2['columns-restoreDefaults'], 'Columns-dropdown "restoreDefaults" is valid (2)');
-  assert.equal(this.getEachAsString('.globalSearch label'), messages2.searchLabel, 'Global-search label is valid (2)');
+  assert.equal(ModelsTableBs.summary, 'DISPLAY 1 - 10 OF 10', 'Summary is valid (2)');
+  assert.equal(columnsDropDown().toggleLabel, messages2['columns-title'], 'Columns-dropdown title is valid (2)');
+  assert.equal(columnsDropDown(0).label, messages2['columns-showAll'], 'Columns-dropdown "showAll" is valid (2)');
+  assert.equal(columnsDropDown(1).label, messages2['columns-hideAll'], 'Columns-dropdown "hideAll" is valid (2)');
+  assert.equal(columnsDropDown(2).label, messages2['columns-restoreDefaults'], 'Columns-dropdown "restoreDefaults" is valid (2)');
+  assert.equal(ModelsTableBs.globalFilterLabel, messages2.searchLabel, 'Global-search label is valid (2)');
 
-  this.hideAllColumns();
+  columnsDropDown(1).click();
 
-  assert.equal(this.getEachAsString(selectors.tbodyAllCells), messages2.allColumnsAreHidden, 'Message about all hidden columns is valid (2)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), [messages2.allColumnsAreHidden], 'Message about all hidden columns is valid (2)');
 
-  this.showAllColumns();
-  this.globalFilter('invalid string');
+  columnsDropDown(0).click();
+  ModelsTableBs.doGlobalFilter('invalid string');
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), messages2.noDataToShow, 'Message about no data is valid (2)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), [messages2.noDataToShow], 'Message about no data is valid (2)');
 
 });
 
@@ -1152,78 +1051,76 @@
   this.setProperties({
     columns: generateColumns(['index', 'reversedIndex']),
     data: generateContent(10, 1),
-    customIcons: customIcons
+    themeInstance: BootstrapTheme.extend(customIcons).create()
   });
 
-  this.render(hbs`{{models-table data=data columns=columns customIcons=customIcons}}`);
-  this.sortFirstColumn();
+  this.render(hbs`{{models-table data=data columns=columns themeInstance=themeInstance}}`);
+  sorting(0).click();
 
-  assert.equal(this.getCount('.sort-asc'), 1, 'sort asc 1 column');
+  assert.equal($('.sort-asc').length, 1, 'sort asc 1 column');
 
-  this.sortSecondColumn();
-  assert.equal(this.getCount('.sort-asc'), 2, 'sort asc 2 columns');
+  sorting(1).click();
 
-  this.sortSecondColumn();
-  assert.equal(this.getCount('.sort-asc'), 1, 'sort asc 1 column');
-  assert.equal(this.getCount('.sort-desc'), 1, 'sort desc 1 column');
+  sorting(1).click();
+  assert.equal($('.sort-asc').length, 1, 'sort asc 1 column');
+  assert.equal($('.sort-desc').length, 1, 'sort desc 1 column');
 
-  assert.equal(this.getCount(`${selectors.columnsDropdown} .column-visible`), 2, 'all columns are visible');
+  assert.equal($('.columns-dropdown li .column-visible').length, 2, 'all columns are visible');
 
-  this.toggleFirstColumnVisibility();
-  assert.equal(this.getCount(`${selectors.columnsDropdown} .column-visible`), 1, '1 column is visible');
-  assert.equal(this.getCount(`${selectors.columnsDropdown} .column-hidden`), 1, '1 column is hidden');
+  columnsDropDown(3).click();
+  assert.equal($('.columns-dropdown li .column-visible').length, 1, '1 column is visible');
+  assert.equal($('.columns-dropdown li .column-hidden').length, 1, '1 column is hidden');
 
-  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnFirst} span`), 'nav-first', 'First-button has valid class');
-  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnBack} span`), 'nav-prev', 'Prev-button has valid class');
-  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnNext} span`), 'nav-next', 'Next-button has valid class');
-  assert.equal(this.getEachClassAsString(`${selectors.tableNavBtnLast} span`), 'nav-last', 'Last-button has valid class');
+  assert.ok($(`.table-nav a:eq(0) span`).hasClass('nav-first'), 'First-button has valid class');
+  assert.ok($(`.table-nav a:eq(1) span`).hasClass('nav-prev'), 'Prev-button has valid class');
+  assert.ok($(`.table-nav a:eq(2) span`).hasClass('nav-next'), 'Next-button has valid class');
+  assert.ok($(`.table-nav a:eq(3) span`).hasClass('nav-last'), 'Last-button has valid class');
 
 });
 
 test('columns column cell classes', function (assert) {
 
-  var columns = generateColumns(['index', 'reversedIndex']);
+  const columns = generateColumns(['index', 'reversedIndex']);
   columns[0].className = 'custom-column-class';
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.equal(this.getCount('tbody .custom-column-class'), 10, 'Custom column class exists on each column cell');
+  assert.equal($('tbody .custom-column-class').length, 10, 'Custom column class exists on each column cell');
 
 });
 
 test('column title auto generation', function (assert) {
 
-  var columns = generateColumns(['index', 'reversedIndex']);
+  const columns = generateColumns(['index', 'reversedIndex']);
   columns.setEach('title', null);
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  assert.equal(this.getEachAsString('thead th:eq(0)'), 'Index', 'Title for one word is correct');
-  assert.equal(this.getEachAsString('thead th:eq(1)'), 'Reversed index', 'Title for camelCase is correct');
+  assert.deepEqual(sorting().mapBy('title'), ['Index', 'Reversed index']);
 
 });
 
 test('`sortedBy` has higher priority than `propertyName`', function (assert) {
 
-  var columns = generateColumns(['someWord', 'index']);
+  const columns = generateColumns(['someWord', 'index']);
   columns[0].sortedBy = 'index';
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
 
-  this.sortSecondColumn();
-  assert.equal(this.getEachAsString(selectors.secondColumn), '12345678910', 'Content is valid (sorting by `index` desc)');
+  sorting(1).click();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), oneTenArrayDig, 'Content is valid (sorting by `index` desc)');
 
-  this.sortSecondColumn();
-  assert.equal(this.getEachAsString(selectors.secondColumn), '10987654321', 'Content is valid (sorting by `index` asc)');
+  sorting(1).click();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), tenOneArrayDig, 'Content is valid (sorting by `index` asc)');
 
 });
 
@@ -1234,25 +1131,25 @@
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data}}`);
-  this.sortFirstColumn();
+  sorting(0).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Content is valid (sorting 1st column asc)');
 
-  this.sortFirstColumn();
+  sorting(0).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '10987654321', 'Content is valid (sorting 1st column desc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), tenOneArrayDig, 'Content is valid (sorting 1st column desc)');
 
-  this.sortFirstColumn();
-  this.sortSecondColumn();
+  sorting(0).click();
+  sorting(1).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc) - restore defaults');
-  assert.equal(this.getEachAsString(selectors.secondColumn), '1122334455', 'Content is valid (sorting 2nd column asc) - restore defaults');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Content is valid (sorting 1st column asc) - restore defaults');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['1', '1', '2', '2', '3', '3', '4', '4', '5', '5'], 'Content is valid (sorting 2nd column asc) - restore defaults');
 
-  this.sortFirstColumn();
-  this.sortFirstColumn();
+  sorting(0).click();
+  sorting(0).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '21436587109', 'Content is valid (sorting 1st column desc)');
-  assert.equal(this.getEachAsString(selectors.secondColumn), '1122334455', 'Content is valid (sorting 2nd column asc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['2', '1', '4', '3', '6', '5', '8', '7', '10', '9'], 'Content is valid (sorting 1st column desc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['1', '1', '2', '2', '3', '3', '4', '4', '5', '5'], 'Content is valid (sorting 2nd column asc)');
 
 });
 
@@ -1263,69 +1160,67 @@
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);
-  this.sortFirstColumn();
+  sorting(0).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Content is valid (sorting 1st column asc)');
 
-  this.sortFirstColumn();
+  sorting(0).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '10987654321', 'Content is valid (sorting 1st column desc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), tenOneArrayDig, 'Content is valid (sorting 1st column desc)');
 
-  this.sortFirstColumn();
-  this.sortSecondColumn();
+  sorting(0).click();
+  sorting(1).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '12345678910', 'Content is valid (sorting 1st column asc) - restore defaults');
-  assert.equal(this.getEachAsString(selectors.secondColumn), '1122334455', 'Content is valid (sorting 2nd column asc) - restore defaults');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), oneTenArrayDig, 'Content is valid (sorting 1st column asc) - restore defaults');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['1', '1', '2', '2', '3', '3', '4', '4', '5', '5'], 'Content is valid (sorting 2nd column asc) - restore defaults');
 
-  this.sortFirstColumn();
-  this.sortFirstColumn();
+  sorting(0).click();
+  sorting(0).click();
 
-  assert.equal(this.getEachAsString(selectors.firstColumn), '10987654321', 'Content is valid (sorting 1st column desc)');
-  assert.equal(this.getEachAsString(selectors.secondColumn), '5544332211', 'Content is valid (sorting 2nd reverted)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), tenOneArrayDig, 'Content is valid (sorting 1st column desc)');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['5', '5', '4', '4', '3', '3', '2', '2', '1', '1'], 'Content is valid (sorting 2nd reverted)');
 
 });
 
 test('column is sorted with `sortedBy` when `propertyName` is not provided', function (assert) {
 
-  var columns = generateColumns(['index', 'index2']);
+  const columns = generateColumns(['index', 'index2']);
   columns[1].sortedBy = 'index';
   delete columns[1].propertyName;
-  columns[1].template = 'custom/test';
+  columns[1].component = 'custom-concat';
 
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(3, 1).reverse()
   });
   this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);
 
-  this.sortSecondColumn();
-
-  assert.equal(this.getEachAsString(selectors.secondColumn, '|'), '1+3|2+2|3+1', 'Content is sorted by `index`');
+  sorting(1).click();
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), ['1+3', '2+2', '3+1'], 'Content is sorted by `index`');
 
 });
 
 test('table is not sorted by first column with `propertyName` or `sortedBy` by default', function (assert) {
 
-  var data = generateContent(10, 1).reverse();
-  var columns = generateColumns(['indexWithHtml', 'index']);
+  const data = generateContent(10, 1).reverse();
+  const columns = generateColumns(['indexWithHtml', 'index']);
   delete columns[0].propertyName;
-  columns[0].template = 'custom/delete';
 
   this.setProperties({
-    data: data,
-    columns: columns
+    data,
+    columns
   });
-  this.on('deleteRecord', function () {return this;});
-  this.render(hbs`{{models-table data=data columns=columns delete='deleteRecord'}}`);
+  this.render(hbs`{{models-table data=data columns=columns}}`);
 
-  assert.equal(this.getEachAsString(selectors.secondColumn), '10987654321', 'Content is sorted correctly');
+  assert.deepEqual(ModelsTableBs.getColumnCells(1), tenOneArrayDig, 'Content is sorted correctly');
 
 });
 
-test('sendAction can trigger actions outside the component', function (assert) {
+test('sendAction can trigger actions outside the component (from row cell component)', function (assert) {
 
-  var columns = generateColumns(['index', 'indexWithHtml']);
-  columns[1].template = 'custom/action';
+  assert.expect(1);
+  const columns = generateColumns(['index', 'indexWithHtml']);
+  columns[1].component = 'custom-action';
 
   this.on('externalAction', function () {
     assert.ok(true, 'external Action was called!');
@@ -1333,7 +1228,7 @@
 
   this.setProperties({
     data: generateContent(10, 1),
-    columns: columns,
+    columns,
     action: 'externalAction'
   });
   this.render(hbs`{{models-table data=data columns=columns action=action}}`);
@@ -1341,6 +1236,69 @@
   this.$('.action').first().click();
 });
 
+test('sendAction can trigger actions outside the component (from row expand component)', function (assert) {
+
+  assert.expect(1);
+  let columns = generateColumns(['id']);
+  columns.splice(0, 0, {
+    component: 'expand-toggle',
+    mayBeHidden: false
+  });
+  this.setProperties({
+    columns,
+    expandedRowComponent: 'custom-expand-row-action',
+    data: generateContent(10, 1),
+    externalAction: 'externalAction'
+  });
+
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
+  this.render(hbs`{{models-table columns=columns data=data expandedRowComponent=expandedRowComponent externalAction=externalAction}}`);
+  rows(0).expand();
+  this.$('.action').first().click();
+});
+
+test('sendAction can trigger actions outside the component (from sort cell component)', function (assert) {
+
+  assert.expect(1);
+  const columns = generateColumns(['index', 'indexWithHtml']);
+  columns[0].componentForSortCell = 'custom-sort-cell-action';
+
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
+
+  this.setProperties({
+    data: generateContent(10, 1),
+    columns,
+    externalAction: 'externalAction'
+  });
+  this.render(hbs`{{models-table data=data columns=columns externalAction=externalAction}}`);
+
+  this.$('.action').first().click();
+});
+
+test('sendAction can trigger actions outside the component (from filter cell component)', function (assert) {
+
+  assert.expect(1);
+  const columns = generateColumns(['index', 'indexWithHtml']);
+  columns[0].componentForFilterCell = 'custom-filter-cell-action';
+
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
+
+  this.setProperties({
+    data: generateContent(10, 1),
+    columns,
+    externalAction: 'externalAction'
+  });
+  this.render(hbs`{{models-table data=data columns=columns externalAction=externalAction}}`);
+
+  this.$('.action').first().click();
+});
+
 test('visiblePageNumbers', function (assert) {
 
   this.setProperties({
@@ -1396,13 +1354,13 @@
     }
   ]).forEach(test => {
     this.set('currentPageNumber', test.currentPageNumber);
-    assert.equal(this.getEachAsString(selectors.navigationButtons,'|'), A(test.visiblePageNumbers).mapBy('label').join('|'), `10 pages, active is ${test.currentPageNumber}`);
+    assert.deepEqual(navigation.navigationButtons, A(test.visiblePageNumbers).mapBy('label').map(c => `${c}`), `10 pages, active is ${test.currentPageNumber}`);
   }, this);
 
   this.set('data', generateContent(10, 1));
   this.set('pageSize', 10);
 
-  assert.equal(this.getEachAsString(selectors.navigationButtons,'|'), '1', 'Only 1 page');
+  assert.deepEqual(navigation.navigationButtons, ['1'], 'Only 1 page');
 
 });
 
@@ -1419,7 +1377,7 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=true}}`);
-  this.filterSecondColumn('One');
+  filters(1).inputFilter('One');
 
 });
 
@@ -1436,7 +1394,7 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=true}}`);
-  this.globalFilter('One');
+  ModelsTableBs.doGlobalFilter('One');
 });
 
 test('event on user interaction (sorting)', function (assert) {
@@ -1453,30 +1411,30 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction}}`);
-  this.sortFirstColumn();
+  sorting(0).click();
 });
 
 test('event on user interaction (expanding rows)', function (assert) {
 
-  let columns = generateColumns(['id']);
+  const columns = generateColumns(['id']);
   columns.splice(0, 0, {
-    template: 'components/models-table/expand-row-cell',
+    component: 'expand-toggle',
     mayBeHidden: false
   });
   this.setProperties({
-    columns: columns,
-    expandedRowTemplate: 'custom/expanded-row',
+    columns,
     data: generateContent(30, 1),
     displayDataChangedAction: 'displayDataChanged',
-    sendDisplayDataChangedAction: true
+    sendDisplayDataChangedAction: true,
+    expandedRowComponent: 'expanded-row'
   });
 
   this.on('displayDataChanged', function () {
     assert.ok(true, '`displayDataChanged`-action was called!');
   });
 
-  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowTemplate=expandedRowTemplate}}`);
-  this.expandFirstRow();
+  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowComponent=expandedRowComponent}}`);
+  rows(0).expand();
 
 });
 
@@ -1493,19 +1451,15 @@
     assert.ok(true, '`displayDataChanged`-action was called!');
   });
 
-  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowTemplate=expandedRowTemplate}}`);
-  this.clickOnRow(0);
+  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction}}`);
+  rows(0).click();
 
 });
 
 test('event on user interaction (clear all filters)', function (assert) {
 
-  var calls = [
-    // after render
-    {
-      filterString: '',
-      columnFilters: {}
-    },
+  assert.expect(6);
+  const calls = [
     // after filter by first column
     {
       filterString: '',
@@ -1522,7 +1476,7 @@
       columnFilters: {}
     }
   ];
-  var indx = 0;
+  let indx = 0;
   this.setProperties({
     columns: generateColumns(['id']),
     data: generateContent(30, 1),
@@ -1531,66 +1485,66 @@
   });
 
   this.on('displayDataChanged', function (settings) {
-    var call = calls[indx];
+    const call = calls[indx];
     assert.equal(call.filterString, settings.filterString, `#${indx + 1}. filterString`);
     assert.deepEqual(call.columnFilters, settings.columnFilters, `#${indx + 1}. columnFilters`);
     indx++;
   });
 
-  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction expandedRowTemplate=expandedRowTemplate}}`);
-  this.filterFirstColumn(1);
-  this.globalFilter(1);
-  this.clearAllFiltersByIcon();
+  this.render(hbs`{{models-table columns=columns data=data displayDataChangedAction=displayDataChangedAction sendDisplayDataChangedAction=sendDisplayDataChangedAction}}`);
+  filters(0).inputFilter(1);
+  ModelsTableBs.doGlobalFilter(1);
+  ModelsTableBs.clearAllFilters();
 });
 
 test('show first page if for some reasons there is no content for current page, but table data exists', function (assert) {
 
   assert.expect(1);
 
-  var data = generateContent(11, 1);
-  var columns = generateColumns(['index', 'indexWithHtml']);
-  columns[1].template = 'custom/delete';
-  var self = this;
+  const data = generateContent(11, 1);
+  const columns = generateColumns(['index', 'indexWithHtml']);
+  columns[1].component = 'delete-row';
+  const self = this;
   this.setProperties({
-    data: data,
-    columns: columns
+    data,
+    columns
   });
   this.on('deleteRecord', function (record) {
     self.set('data', data.without(record));
   });
   this.render(hbs`{{models-table data=data columns=columns delete='deleteRecord'}}`);
   // move to the 2nd page and delete 1 row there
-  this.nextPage();
+  navigation.goToNextPage();
   this.$('td button').first().click();
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 1 - 10 of 10', 'First page is shown');
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 10', 'First page is shown');
 });
 
 test('row deleted in the middle page', function (assert) {
 
   assert.expect(1);
 
-  var data = generateContent(31, 1);
-  var columns = generateColumns(['index', 'indexWithHtml']);
-  columns[1].template = 'custom/delete';
-  var self = this;
+  const data = generateContent(31, 1);
+  const columns = generateColumns(['index', 'indexWithHtml']);
+  columns[1].component = 'delete-row';
+  const self = this;
   this.setProperties({
-    data: data,
-    columns: columns
+    data,
+    columns
   });
   this.on('deleteRecord', function (record) {
     self.set('data', data.without(record));
   });
   this.render(hbs`{{models-table data=data columns=columns delete='deleteRecord'}}`);
   // move to the 2nd page and delete 1 row there
-  this.nextPage();
+  navigation.goToNextPage();
   this.$('td button').first().click();
-  assert.equal(this.getEachAsString(selectors.summary), 'Show 11 - 20 of 30', 'Second page is shown');
+  assert.equal(ModelsTableBs.summary, 'Show 11 - 20 of 30', 'Second page is shown');
 });
 
 test('updateable columns (disabled)', function (assert) {
 
-  var columns1 = generateColumns(['index', 'someWord']);
-  var columns2 = generateColumns(['index', 'index2', 'someWord']);
+  const columns1 = generateColumns(['index', 'someWord']);
+  const columns2 = generateColumns(['index', 'index2', 'someWord']);
 
   this.setProperties({
     columns: columns1,
@@ -1599,22 +1553,22 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data columnsAreUpdateable=columnsAreUpdateable}}`);
-  this.filterFirstColumn('1');
-  this.sortFirstColumn();
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|someWord', 'two columns are shown');
-  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|someWord', 'two columns are in columns dropdown');
+  filters(0).inputFilter('1');
+  sorting(0).click();
+  assert.deepEqual(sorting().mapBy('title'), ['index', 'someWord'], 'two columns are shown');
+  assert.deepEqual(columnsDropDown().mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'someWord'], 'two columns are in columns dropdown');
 
   this.set('columns', columns2);
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|someWord', 'columns are not updated');
-  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|someWord', 'columns dropdown is not updated');
-  assert.equal(this.getEachValueAsString(selectors.theadSecondRowFirstColumnFilter), '1', 'column filter was not dropped');
-  assert.equal(this.getEachClassAsString(selectors.theadFirstRowFirstCellSort), 'glyphicon glyphicon-triangle-top', 'column sorting was not dropped');
+  assert.deepEqual(sorting().mapBy('title'), ['index', 'someWord'], 'columns are not updated');
+  assert.deepEqual(columnsDropDown().mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'someWord'], 'columns dropdown is not updated');
+  assert.equal(filters(0).inputValue, '1', 'column filter was not dropped');
+  assert.ok(sorting(0).isSorted, 'column sorting was not dropped');
 });
 
 test('updateable columns (enabled)', function (assert) {
 
-  var columns1 = generateColumns(['index', 'someWord']);
-  var columns2 = generateColumns(['index', 'index2', 'someWord']);
+  const columns1 = generateColumns(['index', 'someWord']);
+  const columns2 = generateColumns(['index', 'index2', 'someWord']);
 
   this.setProperties({
     columns: columns1,
@@ -1623,15 +1577,15 @@
   });
 
   this.render(hbs`{{models-table columns=columns data=data columnsAreUpdateable=columnsAreUpdateable}}`);
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|someWord', 'two columns are shown');
-  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|someWord', 'two columns are in columns dropdown');
-  this.filterFirstColumn('1');
-  this.sortFirstColumn();
+  assert.deepEqual(sorting().mapBy('title'), ['index', 'someWord'], 'two columns are shown');
+  assert.deepEqual(columnsDropDown().mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'someWord'], 'two columns are in columns dropdown');
+  filters(0).inputFilter('1');
+  sorting(0).click();
 
   this.set('columns', columns2);
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells, '|'), 'index|index2|someWord', 'columns are updated');
-  assert.equal(this.getEachAsString(selectors.columnsDropdown, '|'), 'Show All|Hide All|Restore Defaults||index|index2|someWord', 'columns dropdown is updated');
-  assert.equal(this.getEachValueAsString(selectors.theadSecondRowFirstColumnFilter), '', 'column filter was dropped');
+  assert.deepEqual(sorting().mapBy('title'), ['index', 'index2', 'someWord'], 'columns are updated');
+  assert.deepEqual(columnsDropDown().mapBy('label'), ['Show All', 'Hide All', 'Restore Defaults', 'index', 'index2', 'someWord'], 'columns dropdown is updated');
+  assert.equal(filters(0).inputValue, '', 'column filter was dropped');
 
 });
 
@@ -1645,18 +1599,18 @@
 
   this.render(hbs`{{models-table columns=columns data=data doFilteringByHiddenColumns=doFilteringByHiddenColumns}}`);
 
-  this.toggleSecondColumnVisibility();
-  this.globalFilter('one');
+  columnsDropDown(4).click();
+  ModelsTableBs.doGlobalFilter('one');
 
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345678910', 'Content is not changed');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['No records to show'], 'Content is not changed');
 
   this.set('doFilteringByHiddenColumns', true);
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '12345678910', 'Content is not changed after `doFilteringByHiddenColumns` updating');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['No records to show'], 'Content is not changed after `doFilteringByHiddenColumns` updating');
 
-  this.globalFilter('');
-  this.globalFilter('one');
+  ModelsTableBs.doGlobalFilter('');
+  ModelsTableBs.doGlobalFilter('one');
 
-  assert.equal(this.getEachAsString(selectors.tbodyFirstColumnCells), '1', 'Content is filtered');
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), ['1'], 'Content is filtered');
 
 });
 
@@ -1673,81 +1627,80 @@
 
   this.render(hbs`{{models-table columns=columns data=data groupedHeaders=groupedHeaders}}`);
 
-  assert.equal(this.getEachAsString(selectors.theadFirstRowCells), 'BigTitle', '');
-  assert.equal(this.getEachAttrAsString(selectors.theadFirstRowCells, 'colspan'), '5', '');
+  assert.deepEqual(headers(0).cells, ['BigTitle']);
+  assert.deepEqual(headers(0).colspans, ['5']);
 
-  assert.equal(this.getEachAsString(selectors.theadSecondRowCells, '|'), 'SubTitle1|SubTitle2', '');
-  assert.equal(this.getEachAttrAsString(selectors.theadSecondRowCells, 'colspan', '|'), '2|3', '');
+  assert.deepEqual(headers(1).cells, ['SubTitle1', 'SubTitle2']);
+  assert.deepEqual(headers(1).colspans, ['2', '3']);
 
 });
 
 test('expandable rows (multipleExpand = true)', function (assert) {
 
-  let columns = generateColumns(['id']);
+  const columns = generateColumns(['id']);
   columns.splice(0, 0, {
-    template: 'components/models-table/expand-row-cell',
+    component: 'expand-toggle',
     mayBeHidden: false
   });
   this.setProperties({
-    columns: columns,
-    expandedRowTemplate: 'custom/expanded-row',
+    columns,
+    expandedRowComponent: 'expanded-row',
     data: generateContent(30, 1)
   });
 
-  this.render(hbs`{{models-table columns=columns data=data expandedRowTemplate=expandedRowTemplate multipleExpand=true}}`);
+  this.render(hbs`{{models-table columns=columns data=data expandedRowComponent=expandedRowComponent multipleExpand=true}}`);
 
-  assert.equal(this.getCount(selectors.collapseRow), 0, 'All rows are collapsed by default');
+  assert.equal(ModelsTableBs.collapseRowButtons, 0, 'All rows are collapsed by default');
 
-  this.expandFirstRow();
-  assert.ok(this.firstRowIsExpanded(), 'First row is expanded');
-  assert.equal(this.getCount('.expand-0'), 1, 'Expanded row content exists');
-  assert.equal(this.getEachAsString('.expand-0 .id'), 1, 'Expanded row content is valid');
+  rows(0).expand();
+  assert.ok(rows(0).expanded, 'First row is expanded');
+  assert.equal($('.expand-0').length, 1, 'Expanded row content exists');
+  assert.equal($('.expand-0 .id').length, 1, 'Expanded row content is valid');
 
-  this.expandSecondRow();
-  assert.ok(this.firstRowIsExpanded(), 'First row is still expanded');
-  assert.ok(this.secondRowIsExpanded(), 'Second row is expanded');
+  rows(1).expand();
+  assert.ok(rows(0).expanded, 'First row is still expanded');
+  assert.ok(rows(1).expanded, 'Second row is expanded');
 
-  this.collapseFirstRow();
-  assert.ok(this.firstRowIsCollapsed(), 'First row is collapsed');
-  assert.ok(this.secondRowIsExpanded(), 'Second row is still expanded');
+  rows(0).collapse();
+  assert.ok(rows(0).collapsed, 'First row is collapsed');
+  assert.ok(rows(1).expanded, 'Second row is still expanded');
 
-  this.collapseSecondRow();
-  assert.ok(this.secondRowIsCollapsed(), 'Second row is collapsed');
+  rows(1).collapse();
+  assert.ok(rows(1).collapsed, 'Second row is collapsed');
 
-  this.expandFirstRow();
-  this.nextPage();
-  assert.ok(this.firstRowIsCollapsed(), 'First row on the second page is collapsed');
+  rows(0).expand();
+  navigation.goToNextPage();
+  assert.ok(rows(0).collapsed, 'First row on the second page is collapsed');
 
 });
 
 test('expandable rows (multipleExpand = true, expand all rows)', function (assert) {
 
-  let columns = generateColumns(['id']);
+  const columns = generateColumns(['id']);
   columns.splice(0, 0, {
-    template: 'components/models-table/expand-row-cell',
-    templateForFilterCell: 'components/models-table/expand-all-rows-cell',
+    component: 'expand-toggle',
+    componentForFilterCell: 'expand-all-toggle',
     mayBeHidden: false
   });
   this.setProperties({
-    columns: columns,
-    expandedRowTemplate: 'custom/expanded-row',
+    columns,
+    expandedRowComponent: 'expanded-row',
     data: generateContent(30, 1)
   });
 
-  this.render(hbs`{{models-table columns=columns data=data expandedRowTemplate=expandedRowTemplate multipleExpand=true}}`);
+  this.render(hbs`{{models-table columns=columns data=data expandedRowComponent=expandedRowComponent multipleExpand=true}}`);
+  assert.equal(ModelsTableBs.collapseRowButtons, 0, 'All rows are collapsed by default');
 
-  assert.equal(this.getCount(selectors.collapseRow), 0, 'All rows are collapsed by default');
+  ModelsTableBs.expandAllRows();
+  assert.equal(rows().filterBy('expanded').length, 10, 'All rows are expanded');
+  assert.deepEqual(rowExpands().mapBy('id'), oneTenArrayDig, 'Expanded rows content is valid');
 
-  this.expandAllRows();
-  assert.equal(this.getCount('tr.expand-row'), 10, 'All rows are expanded');
-  assert.equal(this.getEachAsString('.expand-row .id', '|'), '1|2|3|4|5|6|7|8|9|10', 'Expanded rows content is valid');
+  ModelsTableBs.collapseAllRows();
+  assert.equal(rows().filterBy('expanded').length, 0, 'All rows are collapsed');
 
-  this.collapseAllRows();
-  assert.equal(this.getCount('tr.expand-row'), 0, 'All rows are collapsed');
-
-  this.expandAllRows();
-  this.nextPage();
-  assert.equal(this.getCount('tr.expand-row'), 0, 'All rows on the second page are collapsed');
+  ModelsTableBs.expandAllRows();
+  navigation.goToNextPage();
+  assert.equal(rows().filterBy('expanded').length, 0, 'All rows on the second page are collapsed');
 
 });
 
@@ -1755,35 +1708,61 @@
 
   let columns = generateColumns(['id']);
   columns.splice(0, 0, {
-    template: 'components/models-table/expand-row-cell',
+    component: 'expand-toggle',
     mayBeHidden: false
   });
   this.setProperties({
-    columns: columns,
-    expandedRowTemplate: 'custom/expanded-row',
+    columns,
+    expandedRowComponent: 'expanded-row',
     data: generateContent(30, 1)
   });
 
-  this.render(hbs`{{models-table columns=columns data=data expandedRowTemplate=expandedRowTemplate multipleExpand=false}}`);
+  this.render(hbs`{{models-table columns=columns data=data expandedRowComponent=expandedRowComponent multipleExpand=false}}`);
 
-  assert.equal(this.getCount(selectors.collapseRow), 0, 'All rows are collapsed by default');
+  assert.equal(ModelsTableBs.collapseRowButtons, 0, 'All rows are collapsed by default');
 
-  this.expandFirstRow();
-  assert.ok(this.firstRowIsExpanded(), 'First row is expanded');
-  assert.equal(this.getCount('.expand-0'), 1, 'Expanded row content exists');
-  assert.equal(this.getEachAsString('.expand-0 .id'), 1, 'Expanded row content is valid');
+  rows(0).expand();
+  assert.ok(rows(0).expanded, 'First row is expanded');
+  assert.equal(rowExpands(0).id, '1', 'Expanded row content is valid');
 
-  this.expandSecondRow();
-  assert.ok(this.firstRowIsCollapsed(), 'First row is collapsed');
-  assert.ok(this.secondRowIsExpanded(), 'Second row is expanded');
+  rows(1).expand();
+  assert.ok(rows(0).collapsed, 'First row is collapsed');
+  assert.ok(rows(1).expanded, 'Second row is expanded');
 
-  this.collapseSecondRow();
-  assert.ok(this.secondRowIsCollapsed(), 'Second row is collapsed');
+  rows(1).collapse();
+  assert.ok(rows(1).collapsed, 'Second row is collapsed');
 
-  this.expandFirstRow();
-  this.nextPage();
-  assert.ok(this.firstRowIsCollapsed(), 'First row on the second page is collapsed');
+  rows(0).expand();
+  navigation.goToNextPage();
+  assert.ok(rows(0).collapsed, 'First row on the second page is collapsed');
 
+});
+
+test('#251 expand is dropped if expanded row is filtered out', function (assert) {
+  let columns = generateColumns(['id']);
+  columns.splice(0, 0, {
+    component: 'expand-toggle',
+    mayBeHidden: false
+  });
+  this.setProperties({
+    columns,
+    expandedRowComponent: 'expanded-row',
+    data: generateContent(30, 1)
+  });
+
+  this.render(hbs`{{models-table columns=columns data=data expandedRowComponent=expandedRowComponent multipleExpand=false}}`);
+
+  assert.equal(ModelsTableBs.collapseRowButtons, 0, 'All rows are collapsed by default');
+
+  rows(0).expand();
+  assert.ok(rows(0).expanded, 'First row is expanded');
+
+  filters(1).inputFilter('4');
+
+  assert.equal(rowExpands().count, 0, 'Expanded row is filtered out');
+
+  filters(1).clearFilter();
+  assert.ok(rows(0).expanded, 'First row is expanded after filter is dropped');
 });
 
 test('selectable rows (multipleSelect = true)', function (assert) {
@@ -1794,22 +1773,22 @@
   });
   this.render(hbs`{{models-table data=data column=columns multipleSelect=true}}`);
 
-  assert.equal(this.getAllSelectedRows(), 0, 'No selected rows by default');
+  assert.equal(rows().filterBy('selected').length, 0, 'No selected rows by default');
 
-  this.clickOnRow(0);
-  assert.ok(this.firstRowIsSelected(), 'First row is selected');
+  rows(0).click();
+  assert.ok(rows(0).selected, 'First row is selected');
 
-  this.clickOnRow(1);
-  assert.ok(this.firstRowIsSelected(), 'First row is still selected');
-  assert.ok(this.secondRowIsSelected(), 'Second row is selected');
+  rows(1).click();
+  assert.ok(rows(0).selected, 'First row is still selected');
+  assert.ok(rows(1).selected, 'Second row is selected');
 
-  this.clickOnRow(0);
-  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');
-  assert.ok(this.secondRowIsSelected(), 'Second row is selected');
+  rows(0).click();
+  assert.notOk(rows(0).selected, 'First row is not selected');
+  assert.ok(rows(1).selected, 'Second row is selected');
 
-  this.clickOnRow(1);
-  assert.notOk(this.firstRowIsSelected(), 'First row still is not selected');
-  assert.notOk(this.secondRowIsSelected(), 'Second row is not selected');
+  rows(1).click();
+  assert.notOk(rows(0).selected, 'First row still is not selected');
+  assert.notOk(rows(1).selected, 'Second row is not selected');
 
 });
 
@@ -1821,22 +1800,22 @@
   });
   this.render(hbs`{{models-table data=data column=columns multipleSelect=false}}`);
 
-  assert.equal(this.getAllSelectedRows(), 0, 'No selected rows by default');
+  assert.equal(rows().filterBy('selected').length, 0, 'No selected rows by default');
 
-  this.clickOnRow(0);
-  assert.ok(this.firstRowIsSelected(), 'First row is selected');
+  rows(0).click();
+  assert.ok(rows(0).selected, 'First row is selected');
 
-  this.clickOnRow(1);
-  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');
-  assert.ok(this.secondRowIsSelected(), 'Second row is selected');
+  rows(1).click();
+  assert.notOk(rows(0).selected, 'First row is not selected');
+  assert.ok(rows(1).selected, 'Second row is selected');
 
-  this.clickOnRow(0);
-  assert.ok(this.firstRowIsSelected(), 'First row is selected');
-  assert.notOk(this.secondRowIsSelected(), 'Second row is not selected');
+  rows(0).click();
+  assert.ok(rows(0).selected, 'First row is selected');
+  assert.notOk(rows(1).selected, 'Second row is not selected');
 
-  this.clickOnRow(1);
-  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');
-  assert.ok(this.secondRowIsSelected(), 'Second row is selected');
+  rows(1).click();
+  assert.notOk(rows(0).selected, 'First row is not selected');
+  assert.ok(rows(1).selected, 'Second row is selected');
 
 });
 
@@ -1844,66 +1823,224 @@
 
   let columns = generateColumns(['index']);
   columns = [{
-    template: 'components/models-table/expand-row-cell',
+    component: 'expand-toggle',
     mayBeHidden: false
   }, ...columns];
   this.setProperties({
-    columns: columns,
-    expandedRowTemplate: 'custom/expanded-row',
+    columns,
+    expandedRowComponent: 'expanded-row',
     data: generateContent(30, 1)
   });
 
-  this.render(hbs`{{models-table data=data columns=columns expandedRowTemplate=expandedRowTemplate}}`);
+  this.render(hbs`{{models-table data=data columns=columns expandedRowComponent=expandedRowComponent}}`);
 
-  this.expandFirstRow();
-  this.clickOnRow(0);
-  assert.ok(this.firstRowIsExpanded(), 'First row is expanded');
-  assert.ok(this.firstRowIsSelected(), 'First row is selected');
+  rows(0).expand();
+  rows(0).click();
+  assert.ok(rows(0).expanded, 'First row is expanded');
+  assert.ok(rowExpands(0).selected, 'First row expand is selected');
+  assert.ok(rows(0).selected, 'First row is selected');
 
-  $(selectors.tbodyFirstRowExpand).click();
-  assert.notOk(this.firstRowIsSelected(), 'First row is not selected');
+  rowExpands(0).click();
+  assert.notOk(rows(0).selected, 'First row is not selected');
+  assert.notOk(rowExpands(0).selected, 'First row expand is not selected');
 
-  $(selectors.tbodyFirstRowExpand).click();
-  assert.ok(this.firstRowIsSelected(), 'First row is selected');
+  rowExpands(0).click();
+  assert.ok(rows(0).selected, 'First row is selected');
+  assert.ok(rowExpands(0).selected, 'First row expand is selected');
 
+});
+
+test('rows may be preselected with `preselectedItems`', function (assert) {
+  const data = generateContent(30, 1);
+  this.setProperties({
+    columns: generateColumns(['index1', 'index2']),
+    data,
+    preselectedItems: data.filter((itemn, index) => index % 2 === 0)
+  });
+
+  this.render(hbs`{{models-table data=data columns=columns preselectedItems=preselectedItems}}`);
+
+  assert.equal(rows().filterBy('selected').length, 5, 'Rows are initially selected correctly');
+
+  rows(1).click();
+  assert.equal(rows().filterBy('selected').length, 6, 'One more row become selected');
+
+  rows(0).click();
+  assert.equal(rows().filterBy('selected').length, 5, 'One row become deselected');
 });
 
 test('columns column contains original definition as a nested property', function (assert) {
 
-  var columns = generateColumns(['index1', 'index2']);
-  columns[0].templateForSortCell = 'custom/sort-cell-original-definition';
+  const columns = generateColumns(['index1', 'index2']);
+  columns[0].componentForSortCell = 'custom-sort-cell';
   columns[0].CustomColumString = 'custom-column-string';
   columns[0].CustomColumObject = { name: 'custom-column-object' };
   columns[0].CustomColumBool = true;
   columns[0].CustomColumNumber = 1;
 
   this.setProperties({
-    columns: columns,
+    columns,
     data: generateContent(10, 1)
   });
   this.render(hbs`{{models-table columns=columns data=data multipleColumnsSorting=false}}`);
 
-  assert.equal(
-    this.getEachAsString(selectors.theadFirstRowFirstCell),
-    'custom-column-string|custom-column-object|true|1',
+  assert.deepEqual(sorting().mapBy('title'), ['custom-column-string|custom-column-object|true|1', 'index2'],
     'Custom column properties present in originalDefinition property in processedColumns');
 });
 
-test('rows may be preselected with `preselectedItems`', function (assert) {
-  var data = generateContent(30, 1);
+test('#context-components render custom simple pagination', function (assert) {
+
+  this.set('data', generateContent(30, 1));
+
+  this.render(hbs`
+    {{#models-table data=data as |c|}}
+      {{c.table}}
+      {{#c.footer as |f|}}
+        {{f.summary}}
+        {{f.size-select}}
+        {{#f.pagination-simple}}
+          <a href="#" {{action "gotoFirst"}} class={{gotoBackEnabled:enabled:disabled}}>F</a>&nbsp;
+          <a href="#" {{action "gotoPrev"}} class={{gotoBackEnabled:enabled:disabled}}>P</a>&nbsp;
+          <a href="#" {{action "gotoNext"}} class={{gotoForwardEnabled:enabled:disabled}}>N</a>&nbsp;
+          <a href="#" {{action "gotoLast"}} class={{gotoForwardEnabled:enabled:disabled}}>L</a>
+        {{/f.pagination-simple}}
+      {{/c.footer}}
+    {{/models-table}}
+  `);
+  assert.equal(navigation.text, 'F P N L', 'Custom labels are used');
+
+});
+
+test('#context-components sendAction from row cell component ', function(assert) {
+
+  assert.expect(1);
+  const columns = generateColumns(['index']);
+  columns[0].component = 'custom-action';
+
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
+
   this.setProperties({
-    columns: generateColumns(['index1', 'index2']),
-    data: data,
-    preselectedItems: data.filter((itemn, index) => index % 2 === 0)
+    data: generateContent(10, 1),
+    columns,
+    action: 'externalAction'
   });
+  this.render(hbs`
+    {{#models-table data=data columns=columns action=action as |c|}}
+      {{#c.table as |table|}}
+        {{#table.body as |body|}}
+          {{#each body.visibleContent as |record index|}}
+            {{#body.row record=record index=index as |row|}}
+             {{#each body.visibleProcessedColumns as |column|}}
+                {{#row.cell as |c|}}
+                  {{custom-action record=c.record sendAction=c.sendAction}}
+                {{/row.cell}}
+              {{/each}}
+            {{/body.row}}
+          {{/each}}
+        {{/table.body}}
+      {{/c.table}}
+    {{/models-table}}
+    `);
+  this.$('.action').first().click();
+});
 
-  this.render(hbs`{{models-table data=data columns=columns preselectedItems=preselectedItems}}`);
+test('#context-components sendAction from row expand component ', function(assert) {
 
-  assert.equal(this.getAllSelectedRows(), 5, 'Rows are initially selected correctly');
+  assert.expect(1);
+  const columns = generateColumns(['index']);
+  columns.splice(0, 0, {
+    component: 'expand-toggle',
+    mayBeHidden: false
+  });
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
 
-  this.clickOnRow(1);
-  assert.equal(this.getAllSelectedRows(), 6, 'One more row become selected');
+  this.setProperties({
+    data: generateContent(10, 1),
+    columns,
+    action: 'externalAction'
+  });
+  this.render(hbs`
+    {{#models-table data=data columns=columns action=action as |c|}}
+      {{#c.table as |table|}}
+        {{#table.body as |body|}}
+          {{#each body.visibleContent as |record index|}}
+            {{body.row record=record index=index}}
+            {{#if (exists-in body.expandedItems record)}}
+              {{#body.row-expand record=record index=index as |re|}}
+                <div class="action" {{action re.sendAction "action" re.record}}>{{re.record.index}}</div>
+              {{/body.row-expand}}
+            {{/if}}
+          {{/each}}
+        {{/table.body}}
+      {{/c.table}}
+    {{/models-table}}
+    `);
+  rows(0).expand();
+  this.$('.action').first().click();
+});
 
-  this.clickOnRow(0);
-  assert.equal(this.getAllSelectedRows(), 5, 'One row become deselected');
+test('#context-components sendAction from sort cell ', function(assert) {
+
+  assert.expect(1);
+  const columns = generateColumns(['index']);
+
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
+
+  this.setProperties({
+    data: generateContent(10, 1),
+    columns,
+    action: 'externalAction'
+  });
+  this.render(hbs`
+    {{#models-table data=data columns=columns action=action as |c|}}
+      {{#c.table as |table|}}
+        {{#table.header as |h|}}
+          {{#h.row-sorting as |rs|}}
+            {{#each rs.processedColumns as |column|}}
+              <td>{{column.title}}
+              <div class="action" {{action rs.sendAction "action" column}}></div></td>
+            {{/each}}
+          {{/h.row-sorting}}
+        {{/table.header}}
+      {{/c.table}}
+    {{/models-table}}
+    `);
+  this.$('.action').first().click();
+});
+
+test('#context-components sendAction from filter cell', function(assert) {
+
+  assert.expect(1);
+  const columns = generateColumns(['index']);
+
+  this.on('externalAction', function () {
+    assert.ok(true, 'external Action was called!');
+  });
+  this.setProperties({
+    data: generateContent(10, 1),
+    columns,
+    action: 'externalAction'
+  });
+
+  this.render(hbs`
+    {{#models-table data=data columns=columns action=action as |c|}}
+      {{#c.table as |table|}}
+        {{#table.header as |h|}}
+          {{#h.row-filtering as |rf|}}
+            {{#each rf.processedColumns as |column|}}
+              <td>{{column.title}}
+              <div class="action" {{action rf.sendAction "action" column}}></div></td>
+            {{/each}}
+          {{/h.row-filtering}}
+        {{/table.header}}
+      {{/c.table}}
+    {{/models-table}}
+    `);
+  this.$('.action').first().click();
 });
\ No newline at end of file
Index: addon/templates/components/models-table/row.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/row.hbs	(revision )
+++ addon/templates/components/models-table/row.hbs	(revision )
@@ -0,0 +1,40 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      cell=(
+        component "models-table/cell"
+        record=record
+        index=index
+        sendAction=sendAction
+        expandRow=expandRow
+        collapseRow=collapseRow
+        expandAllRows=expandAllRows
+        clickOnRow=clickOnRow
+        collapseAllRows=collapseAllRows
+        themeInstance=themeInstance
+        expandedItems=expandedItems
+      )
+      visibleProcessedColumns=visibleProcessedColumns
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  {{#each visibleProcessedColumns as |column|}}
+    {{models-table/cell
+      data=data
+      record=record
+      index=index
+      column=column
+      sendAction=sendAction
+      expandRow=expandRow
+      collapseRow=collapseRow
+      expandAllRows=expandAllRows
+      collapseAllRows=collapseAllRows
+      clickOnRow=clickOnRow
+      themeInstance=themeInstance
+      expandedItems=expandedItems
+      isExpanded=isExpanded
+      isSelected=isSelected
+    }}
+  {{/each}}
+{{/if}}
\ No newline at end of file
Index: tests/integration/components/models-table-server-paginated-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  moduleForComponent,\n  test\n} from 'ember-qunit';\n\nimport hbs from 'htmlbars-inline-precompile';\n\nimport {\n  generateColumns\n} from '../../helpers/f';\n\n\nmoduleForComponent('models-table-server-paginated', 'ModelsTableServerPaginated | Integration', {\n  integration: true\n});\n\ntest('should render without data', function (assert) {\n\n  let data = {};\n  this.setProperties({\n    data: data,\n    columns: generateColumns(['index'])\n  });\n\n  this.render(hbs`{{models-table-server-paginated data=data columns=columns}}`);\n  assert.ok(this.$().text());\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table-server-paginated-test.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/integration/components/models-table-server-paginated-test.js	(revision )
@@ -2,26 +2,193 @@
   moduleForComponent,
   test
 } from 'ember-qunit';
-
+import wait from 'ember-test-helpers/wait';
+import {getOwner} from '@ember/application';
 import hbs from 'htmlbars-inline-precompile';
+import ModelsTableBs from '../../pages/models-table-bs';
+import {startMirage} from 'dummy/initializers/ember-cli-mirage';
 
-import {
-  generateColumns
-} from '../../helpers/f';
+import {generateColumns} from '../../helpers/f';
 
+const {navigation, filters, sorting} = ModelsTableBs;
+
+function fromTo(from , to) {
+  const ret = [];
+  for (let i = from; i <= to; i++) {
+    ret.push(`${i}`);
+  }
+  return ret;
+}
 
 moduleForComponent('models-table-server-paginated', 'ModelsTableServerPaginated | Integration', {
-  integration: true
+  integration: true,
+  beforeEach() {
+    ModelsTableBs.setContext(this);
+    this.server = startMirage();
+    this.server.createList('user', 100);
+    this.store = getOwner(this).lookup("service:store");
+    this.set('filterQueryParameters', {
+      globalFilter: 'globalSearch',
+      sort: 'sort',
+      sortDirection: 'sortDirection',
+      page: 'page',
+      pageSize: 'pageSize'
+    });
+    this.set('columns', generateColumns(['index', 'firstName', 'lastName']));
+    return this.store.query('user', {}).then(d => this.data = d);
+  },
+  afterEach() {
+    this.server.shutdown();
+    ModelsTableBs.removeContext();
+  }
 });
 
-test('should render without data', function (assert) {
+test('#summary is updated on page change', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 100', 'Content for 1st page (10)');
 
-  let data = {};
-  this.setProperties({
-    data: data,
-    columns: generateColumns(['index'])
-  });
+  navigation.goToNextPage();
+  return wait().then(() => assert.equal(ModelsTableBs.summary, 'Show 11 - 20 of 100', 'Content for 2nd page (10)'));
+});
 
-  this.render(hbs`{{models-table-server-paginated data=data columns=columns}}`);
-  assert.ok(this.$().text());
+test('#summary is updated on page size change', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  ModelsTableBs.changePageSize(25);
+  return wait().then(() => assert.equal(ModelsTableBs.summary, 'Show 1 - 25 of 100', 'Content for 1st page (25)'));
 });
+
+test('#summary is updated on global filter usage', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  ModelsTableBs.doGlobalFilter('100');
+  return wait().then(() => assert.equal(ModelsTableBs.summary, 'Show 1 - 1 of 1', 'Content for 1st page (1)'));
+});
+
+test('#summary is updated on column filter usage', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  filters(0).inputFilter('100');
+  return wait().then(() => assert.equal(ModelsTableBs.summary, 'Show 1 - 1 of 1', 'Content for 1st page (1)'));
+});
+
+test('#navigation first and prev are disabled by default', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  return wait().then(() => {
+    assert.ok(navigation.goToPrevPageDisabled);
+    assert.ok(navigation.goToFirstPageDisabled);
+  });
+});
+
+test('#navigation next and last are disabled when user on the last page', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  navigation.goToLastPage();
+  return wait().then(() => {
+    assert.ok(navigation.goToNextPageDisabled);
+    assert.ok(navigation.goToLastPageDisabled);
+  });
+});
+
+test('#navigation all buttons are enabled when user not on the last or first page', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  navigation.goToNextPage();
+  return wait().then(() => {
+    assert.notOk(navigation.goToNextPageDisabled);
+    assert.notOk(navigation.goToLastPageDisabled);
+    assert.notOk(navigation.goToPrevPageDisabled);
+    assert.notOk(navigation.goToFirstPageDisabled);
+  });
+});
+
+test('#content user may set custom page number to be shown initially', function (assert) {
+  this.set('currentPageNumber', 5);
+  this.render(hbs`{{models-table-server-paginated 
+    data=data
+    columns=columns
+    filterQueryParameters=filterQueryParameters
+    currentPageNumber=currentPageNumber}}`);
+  return wait().then(() => assert.equal(ModelsTableBs.summary, 'Show 41 - 50 of 100'));
+});
+
+test('#pageSize changes shown rows count', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+  assert.deepEqual(ModelsTableBs.getColumnCells(0), fromTo(1, 10));
+
+  ModelsTableBs.changePageSize(25);
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(0), fromTo(1, 25)));
+});
+
+test('#globalFilter causes data filtering', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  ModelsTableBs.doGlobalFilter(10);
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(0), ['10', '100']));
+});
+
+test('#columnFilter causes data filtering by `propertyName', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  filters(0).inputFilter(10);
+  return wait().then(() => {
+    assert.deepEqual(ModelsTableBs.getColumnCells(0), ['10', '100']);
+    filters(1).inputFilter(this.server.db.users[9]['first-name']);
+    return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(0), ['10']));
+  });
+});
+
+test('#columnFilter causes data filtering by `filteredBy`', function (assert) {
+  this.set('columns.1.filteredBy', 'index');
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  filters(1).inputFilter(this.server.db.users[10]['index']);
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(1), [this.server.db.users[10]['first-name']]));
+});
+
+test('#columnFilter with predefined options causes data filtering by `propertyName`', function (assert) {
+  this.set('columns.firstObject.filterWithSelect', true);
+  this.set('columns.firstObject.predefinedFilterOptions', ['10', '20', '30']);
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  filters(0).selectFilter('10');
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(0), ['10', '100']));
+});
+
+test('#columnFilter with predefined options causes data filtering by `filteredBy`', function (assert) {
+  this.set('columns.1.filterWithSelect', true);
+  this.set('columns.1.predefinedFilterOptions', ['10', '20', '30']);
+  this.set('columns.1.filteredBy', 'index');
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  filters(1).selectFilter('10');
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(0), ['10', '100']));
+});
+
+test('#sortColumn sort data by `propertyName`', function (assert) {
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  sorting(1).click();
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(1), this.server.db.users.map(u => u['first-name']).sort().slice(0, 10)));
+});
+
+test('#filteringIgnoreCase cannot be used', function (assert) {
+  assert.expect(1);
+
+  assert.expectAssertion(
+    () => this.render(hbs`{{models-table-server-paginated data=data columns=columns filteringIgnoreCase=true}}`),
+    `"filteringIgnoreCase" can't be used with "models-table-server-paginated"`
+  );
+});
+
+test('#doFilteringByHiddenColumns cannot be used', function (assert) {
+  assert.expect(1);
+
+  assert.expectAssertion(
+    () => this.render(hbs`{{models-table-server-paginated data=data columns=columns doFilteringByHiddenColumns=true}}`),
+    `"doFilteringByHiddenColumns" can't be used with "models-table-server-paginated"`
+  );
+});
+
+test('#sortColumn sort data by `sortedBy`', function (assert) {
+  this.set('columns.1.sortedBy', 'lastName');
+  this.render(hbs`{{models-table-server-paginated data=data columns=columns filterQueryParameters=filterQueryParameters}}`);
+
+  sorting(1).click();
+  return wait().then(() => assert.deepEqual(ModelsTableBs.getColumnCells(1), this.server.db.users.sort((a, b) => a['last-name'] > b['last-name'] ? 1 : -1).map(u => u['first-name']).slice(0, 10)));
+});
\ No newline at end of file
Index: tests/dummy/app/templates/examples/sort-by.hbs
===================================================================
--- tests/dummy/app/templates/examples/sort-by.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/sort-by.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,17 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    <p>{{message}}</p>
-    {{models-table data=model columns=columns}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns&rbrace;&rbrace;</code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/.jshintrc
===================================================================
--- tests/.jshintrc	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/.jshintrc	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,54 +0,0 @@
-{
-  "predef": [
-    "document",
-    "window",
-    "location",
-    "setTimeout",
-    "$",
-    "-Promise",
-    "define",
-    "console",
-    "visit",
-    "exists",
-    "fillIn",
-    "click",
-    "select",
-    "keyEvent",
-    "triggerEvent",
-    "find",
-    "findWithAssert",
-    "wait",
-    "DS",
-    "andThen",
-    "currentURL",
-    "currentPath",
-    "currentRouteName",
-    "server"
-  ],
-  "node": false,
-  "browser": false,
-  "boss": true,
-  "curly": true,
-  "debug": false,
-  "devel": false,
-  "eqeqeq": true,
-  "evil": true,
-  "forin": false,
-  "immed": false,
-  "laxbreak": false,
-  "newcap": false,
-  "noarg": true,
-  "noempty": false,
-  "nonew": false,
-  "nomen": false,
-  "onevar": false,
-  "plusplus": false,
-  "regexp": false,
-  "undef": true,
-  "sub": true,
-  "strict": false,
-  "white": false,
-  "eqnull": true,
-  "esversion": 6,
-  "unused": true
-}
Index: tests/dummy/app/templates/custom/checkbox.hbs
===================================================================
--- tests/dummy/app/templates/custom/checkbox.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/checkbox.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<span class="{{if (exists-in _selectedItems record) icons.select-row icons.deselect-row}}"></span>
\ No newline at end of file
Index: tests/dummy/app/controllers/application.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nexport default Ember.Controller.extend({\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/application.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/application.js	(revision )
@@ -1,5 +1,5 @@
-import Ember from 'ember';
+import Controller from '@ember/controller';
 
-export default Ember.Controller.extend({
+export default Controller.extend({
 
 });
Index: app/components/models-table/row.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/row.js	(revision )
+++ app/components/models-table/row.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/row';
Index: tests/dummy/app/controllers/examples/common-table.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport generateContent from '../../utils/c';\n\nconst {A} = Ember;\n\nexport default Ember.Controller.extend({\n\n  title: 'Common table',\n  model: generateContent(10),\n  columns: A([\n    {\n      propertyName: 'id',\n      title: 'ID'\n    },\n    {\n      propertyName: 'firstName',\n      title: 'First Name'\n    },\n    {\n      propertyName: 'lastName',\n      title: 'Last Name'\n    },\n    {\n      propertyName: 'city',\n      title: 'City'\n    }\n  ])\n\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/examples/common-table.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/common-table.js	(revision )
@@ -1,29 +1,13 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
+import Controller from '@ember/controller';
 
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Common table',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
+export default Controller.extend({
+  showComponentFooter: true,
+  showColumnsDropdown: true,
+  useFilteringByColumns: true,
+  showGlobalFilter: true,
+  useNumericPagination: false,
+  doFilteringByHiddenColumns: false,
+  filteringIgnoreCase: false,
+  multipleColumnsSorting: true,
+  showPageSize: true,
 });
\ No newline at end of file
Index: tests/dummy/app/templates/custom/sort-cell-original-definition.hbs
===================================================================
--- tests/dummy/app/templates/custom/sort-cell-original-definition.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/sort-cell-original-definition.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,3 +0,0 @@
-{{column.originalDefinition.CustomColumString}}|{{column.originalDefinition.CustomColumObject.name}}|{{column.originalDefinition.CustomColumBool}}|{{column.originalDefinition.CustomColumNumber}}
-
-{{partial headerSortingIconsTemplate}}
\ No newline at end of file
Index: tests/dummy/app/controllers/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {set, on, getOwner} = Ember;\n\nexport default Ember.Controller.extend({\n\n  c: {},\n\n  onInit: on('init', function() {\n    let owner = getOwner(this);\n    set(this, 'c', owner.lookup('component:models-table'));\n  })\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/index.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/index.js	(revision )
@@ -1,8 +1,9 @@
-import Ember from 'ember';
+import Controller from '@ember/controller';
+import { set } from '@ember/object';
+import { on } from '@ember/object/evented';
+import { getOwner } from '@ember/application';
 
-const {set, on, getOwner} = Ember;
-
-export default Ember.Controller.extend({
+export default Controller.extend({
 
   c: {},
 
Index: addon/components/models-table/pagination-numeric.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/pagination-numeric.js	(revision )
+++ addon/components/models-table/pagination-numeric.js	(revision )
@@ -0,0 +1,154 @@
+import Component from '@ember/component';
+import { A } from '@ember/array';
+import { get, getProperties, computed } from '@ember/object';
+import layout from '../../templates/components/models-table/pagination-numeric';
+
+/**
+ * Numeric navigation used within [models-table/footer](Components.ModelsTableFooter.html).
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.footer as |footer|}}
+ *     {{footer.pagination-numeric}}
+ *     {{! ... }}
+ *   {{/mt.footer}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTablePaginationNumeric
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  classNameBindings: ['themeInstance.paginationWrapper', 'themeInstance.paginationWrapperNumeric'],
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/currentPageNumber:property"}}ModelsTable.currentPageNumber{{/crossLink}}
+   *
+   * @property currentPageNumber
+   * @type number
+   * @default null
+   */
+  currentPageNumber: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/arrangedContentLength:property"}}ModelsTable.arrangedContentLength{{/crossLink}}
+   *
+   * @property recordsCount
+   * @type number
+   * @default null
+   */
+  recordsCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pageSize:property"}}ModelsTable.pageSize{{/crossLink}}
+   *
+   * @property pageSize
+   * @type number
+   * @default null
+   */
+  pageSize: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pagesCount:property"}}ModelsTable.pagesCount{{/crossLink}}
+   *
+   * @property pagesCount
+   * @type number
+   * @default null
+   */
+  pagesCount: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.gotoCustomPage:method"}}ModelsTable.actions.gotoCustomPage{{/crossLink}}
+   *
+   * @event goToPage
+   */
+  goToPage: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * List of links to the page
+   * Used if {{#crossLink "Components.ModelsTable/useNumericPagination:property"}}ModelsTable.useNumericPagination{{/crossLink}} is true
+   * @typedef {object} visiblePageNumber
+   * @property {boolean} isLink
+   * @property {boolean} isActive
+   * @property {string} label
+   *
+   * @type {visiblePageNumber[]}
+   * @property visiblePageNumbers
+   */
+  visiblePageNumbers: computed('pagesCount', 'currentPageNumber', function () {
+    const {
+      pagesCount,
+      currentPageNumber
+    } = getProperties(this, 'pagesCount', 'currentPageNumber');
+    const notLinkLabel = '...';
+    let groups = []; // array of 8 numbers
+    let labels = A([]);
+    groups[0] = 1;
+    groups[1] = Math.min(1, pagesCount);
+    groups[6] = Math.max(1, pagesCount);
+    groups[7] = pagesCount;
+    groups[3] = Math.max(groups[1] + 1, currentPageNumber - 1);
+    groups[4] = Math.min(groups[6] - 1, currentPageNumber + 1);
+    groups[2] = Math.floor((groups[1] + groups[3]) / 2);
+    groups[5] = Math.floor((groups[4] + groups[6]) / 2);
+
+    for (let n = groups[0]; n <= groups[1]; n++) {
+      labels[n] = n;
+    }
+    const userGroup2 = groups[4] >= groups[3] && ((groups[3] - groups[1]) > 1);
+    if (userGroup2) {
+      labels[groups[2]] = notLinkLabel;
+    }
+    for (let i = groups[3]; i <= groups[4]; i++) {
+      labels[i] = i;
+    }
+    const userGroup5 = groups[4] >= groups[3] && ((groups[6] - groups[4]) > 1);
+    if (userGroup5) {
+      labels[groups[5]] = notLinkLabel;
+    }
+    for (let i = groups[6]; i <= groups[7]; i++) {
+      labels[i] = i;
+    }
+    return A(labels.compact().map(label => ({
+      label: label,
+      isLink: label !== notLinkLabel,
+      isActive: label === currentPageNumber})
+    ));
+  }),
+
+  actions: {
+    gotoCustomPage(pageNumber) {
+      get(this, 'goToPage')(pageNumber);
+    }
+  }
+});
Index: addon/components/models-table/footer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/footer.js	(revision )
+++ addon/components/models-table/footer.js	(revision )
@@ -0,0 +1,170 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/footer';
+
+/**
+ * Footer block used within [models-table](Components.ModelsTable.html).
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{mt.footer}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage example with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.footer as |footer|}}
+ *     {{footer.summary}}
+ *     {{footer.size-select}}
+ *     {{#if useNumericPagination}}
+ *       {{footer.pagination-numeric}}
+ *     {{else}}
+ *       {{footer.pagination-simple}}
+ *     {{/if}}
+ *   {{/mt.footer}}
+ * {{/models-table}}
+ * ```
+ *
+ * ModelsTableFooter yields references to the following contextual components:
+ *
+ * * [models-table/summary](Components.ModelsTableSummary.html) - component with summary info about table data. It also contains button to clear all filters applied to the table
+ * * [models-table/size-select](Components.ModelsTableSizeSelect.html) - component with a page sizes dropdown. It allows to select number if records shown on page
+ * * [models-table/pagination-numeric](Components.ModelsTablePaginationNumeric.html) - component with a table navigation. It allows to move to the page by its number
+ * * [models-table/pagination-simple](Components.ModelsTablePaginationSimple.html) - component with a table navigation. It allows to move to the first, last, prev and next pages (this four buttons are shown always)
+ *
+ * Check own docs for each component to get detailed info.
+ *
+ * @class ModelsTableFooter
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  classNameBindings: ['themeInstance.tfooterWrapper'],
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/firstIndex:property"}}ModelsTable.firstIndex{{/crossLink}}
+   *
+   * @property firstIndex
+   * @type number
+   * @default null
+   */
+  firstIndex: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/lastIndex:property"}}ModelsTable.lastIndex{{/crossLink}}
+   *
+   * @property lastIndex
+   * @type number
+   * @default null
+   */
+  lastIndex: null,
+
+  recordsCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/anyFilterUsed:property"}}ModelsTable.anyFilterUsed{{/crossLink}}
+   *
+   * @property anyFilterUsed
+   * @type boolean
+   * @default null
+   */
+  anyFilterUsed: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pageSizeOptions:property"}}ModelsTable.pageSizeOptions{{/crossLink}}
+   *
+   * @property pageSizeOptions
+   * @type object[]
+   * @default null
+   */
+  pageSizeOptions: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pageSize:property"}}ModelsTable.pageSize{{/crossLink}}
+   *
+   * @property pageSize
+   * @type number
+   * @default null
+   */
+  pageSize: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/currentPageNumber:property"}}ModelsTable.currentPageNumber{{/crossLink}}
+   *
+   * @property currentPageNumber
+   * @type number
+   * @default null
+   */
+  currentPageNumber: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/pagesCount:property"}}ModelsTable.pagesCount{{/crossLink}}
+   *
+   * @property pagesCount
+   * @type number
+   * @default null
+   */
+  pagesCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/showPageSize:property"}}ModelsTable.showPageSize{{/crossLink}}
+   *
+   * @property showPageSize
+   * @type boolean
+   * @default null
+   */
+  showPageSize: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/useNumericPagination:property"}}ModelsTable.useNumericPagination{{/crossLink}}
+   *
+   * @property useNumericPagination
+   * @type boolean
+   * @default null
+   */
+  useNumericPagination: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.goToPage:method"}}ModelsTable.actions.goToPage{{/crossLink}}
+   *
+   * @event goToPage
+   */
+  goToPage: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clearFilters:method"}}ModelsTable.actions.clearFilters{{/crossLink}}
+   *
+   * @event clearFilters
+   */
+  clearFilters: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null
+});
Index: tests/dummy/app/templates/components/custom-expand-row-action.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-expand-row-action.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-expand-row-action.hbs	(revision )
@@ -0,0 +1,2 @@
+<button class="action" {{action "sendAction"}}></button>
+{{yield}}
\ No newline at end of file
Index: tests/dummy/app/routes/users/user.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nexport default Ember.Route.extend({\n\n  model(user) {\n    return this.get('store').findRecord('user', user.user_id);\n  }\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/users/user.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/routes/users/user.js	(revision )
@@ -1,6 +1,6 @@
-import Ember from 'ember';
+import Route from '@ember/routing/route';
 
-export default Ember.Route.extend({
+export default Route.extend({
 
   model(user) {
     return this.get('store').findRecord('user', user.user_id);
Index: tests/integration/components/models-table/pagination-numeric-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table/pagination-numeric-test.js	(revision )
+++ tests/integration/components/models-table/pagination-numeric-test.js	(revision )
@@ -0,0 +1,60 @@
+import { moduleForComponent, test } from 'ember-qunit';
+import hbs from 'htmlbars-inline-precompile';
+import ModelsTableBs from '../../../pages/models-table-bs';
+import { startMirage } from 'dummy/initializers/ember-cli-mirage';
+
+import { generateColumns } from '../../../helpers/f';
+
+const {numericNavigation} = ModelsTableBs;
+
+moduleForComponent('models-table/pagination-numeric', 'Integration | Component | models table/pagination numeric', {
+  integration: true,
+
+  beforeEach() {
+    ModelsTableBs.setContext(this);
+    this.server = startMirage();
+    this.server.createList('user', 100);
+    this.setProperties({
+      data: this.server.db.users,
+      columns: generateColumns(['index'])
+    });
+  },
+  afterEach() {
+    this.server.shutdown();
+    ModelsTableBs.removeContext();
+  }
+});
+
+test('buttons are shown', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{#mt.footer as |footer|}}
+      {{footer.pagination-numeric}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+  assert.deepEqual(numericNavigation().mapBy('text'), ['1', '2', '...', '10']);
+  numericNavigation(1).click();
+  assert.deepEqual(numericNavigation().mapBy('text'), ['1', '2', '3', '...', '10']);
+});
+
+test('buttons are shown (2)', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{#mt.footer as |footer|}}
+      {{#footer.pagination-numeric as |pn|}}
+        {{#each pn.visiblePageNumbers as |page|}}
+          {{#if page.isLink}}
+            <button type="button" class="{{if page.isActive "active"}}"
+            {{action pn.gotoCustomPage page.label}}>{{page.label}}</button>
+          {{else}}
+            <button disabled="disabled" type="button" 
+              {{action pn.gotoCustomPage page.label}}>{{page.label}}</button>
+          {{/if}}
+        {{/each}}
+      {{/footer.pagination-numeric}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+  assert.deepEqual(numericNavigation().mapBy('text'), ['1', '2', '...', '10']);
+  numericNavigation(1).click();
+  assert.deepEqual(numericNavigation().mapBy('text'), ['1', '2', '3', '...', '10']);
+});
Index: app/components/models-table/columns-hidden.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/columns-hidden.js	(revision )
+++ app/components/models-table/columns-hidden.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/columns-hidden';
Index: tests/dummy/app/components/custom-expand-row-action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-expand-row-action.js	(revision )
+++ tests/dummy/app/components/custom-expand-row-action.js	(revision )
@@ -0,0 +1,12 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/custom-expand-row-action';
+
+export default Component.extend({
+  layout,
+  actions: {
+    sendAction() {
+      get(this, 'sendAction')('externalAction', get(this, 'record'));
+    }
+  }
+});
Index: tests/dummy/app/templates/examples/custom-actions.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table data=model columns=columns delete='deleteRecord'}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n      <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n        data=model\n        columns=columns\n        delete='deleteRecord'&rbrace;&rbrace;</code></pre>\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n    <p><code>templates/custom/delete.hbs</code>:</p>\n<pre><code class=\"handlebars\">&lt;button \\{{action 'sendAction' 'delete' record}}&gt;Delete&lt;/button&gt;\n</code></pre>\n    <p><code>controller:application</code>:</p>\n      <pre><code class=\"javascript\">\n//...\nactions: {\n  deleteRecord: function(record) {\n    var model = this.get('model');\n    this.set('model', model.without(record));\n  }\n}\n//...</code></pre>\n  </div>\n</div>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/custom-actions.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/custom-actions.hbs	(revision )
@@ -1,30 +1,49 @@
+<h4>Custom external action to delete table item
+  <small>simple table</small>
+</h4>
+<p class="alert alert-info">Some records may be deleted from both tables in the same time.</p>
+{{models-table data=data columns=columns delete='deleteRecord'}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns delete='deleteRecord'}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        delete='deleteRecord'&rbrace;&rbrace;</code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-    <p><code>templates/custom/delete.hbs</code>:</p>
-<pre><code class="handlebars">&lt;button \{{action 'sendAction' 'delete' record}}&gt;Delete&lt;/button&gt;
+  <div class="col-md-6">
+    <p>Component usage</p>
+    <pre><code class="language-handlebars">\{{models-table
+data=data
+columns=columns
+delete="deleteRecord"}}</code></pre>
+    <p><code>columns</code></p>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
+  </div>
+  <div class="col-md-6">
+    <p><code>delete-row</code> component</p>
+    <pre><code class="language-handlebars">&lt;button class="btn btn-default" onclick={&lbrace;action "sendAction" "delete" record&rbrace;}&gt;Delete&lt;/button&gt;
 </code></pre>
-    <p><code>controller:application</code>:</p>
-      <pre><code class="javascript">
-//...
-actions: {
-  deleteRecord: function(record) {
-    var model = this.get('model');
-    this.set('model', model.without(record));
+    <pre><code class="language-javascript">import Component from '@ember/component';
+import {get} from '@ember/object';
+import layout from '../templates/components/delete-row';
+
+export default Component.extend({
+  layout,
+  actions: {
+    sendAction(actionName, record, event) {
+      get(this, 'sendAction')(actionName, record);
+      event.stopPropagation();
+    }
   }
-}
-//...</code></pre>
+});
+</code></pre>
+<p>Controller</p>
+<pre><code class="language-javascript">import Controller from '@ember/controller';
+export default Controller.extend({
+  actions: {
+    deleteRecord (record) {
+      record.destroyRecord();
+    }
+  }
+});</code></pre>
   </div>
 </div>
+
+<h4>Custom external action to delete table item
+  <small>server paginated table</small>
+</h4>
+{{models-table-server-paginated data=model columns=columns delete='deleteRecord'}}
\ No newline at end of file
Index: tests/dummy/app/templates/components/expand-all-toggle.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/expand-all-toggle.hbs	(revision )
+++ tests/dummy/app/templates/components/expand-all-toggle.hbs	(revision )
@@ -0,0 +1,4 @@
+<a href="#" {{action "expandAllRows" bubbles=false}} class={{themeInstance.expandAllRows}}><i class="{{themeInstance.expand-all-rows}}"></i></a><br />
+<a href="#" {{action "collapseAllRows" bubbles=false}} class={{themeInstance.collapseAllRows}}><i
+  class="{{themeInstance.collapse-all-rows}}"></i></a>
+{{yield}}
\ No newline at end of file
Index: app/templates/components/models-table/expand-all-rows-cell.hbs
===================================================================
--- app/templates/components/models-table/expand-all-rows-cell.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/expand-all-rows-cell.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,3 +0,0 @@
-<a href="#" {{action "expandAllRows" bubbles=false}} class={{classes.expandAllRows}}><i class="{{icons.expand-all-rows}}"></i></a><br />
-<a href="#" {{action "collapseAllRows" bubbles=false}} class={{classes.collapseAllRows}}><i
-  class="{{icons.collapse-all-rows}}"></i></a>
Index: tests/dummy/app/router.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport config from './config/environment';\n\nconst Router = Ember.Router.extend({\n  location: config.locationType,\n  rootURL: config.rootURL\n});\n\nRouter.map(function() {\n  this.route('perf');\n  this.route('examples', function () {\n    this.route('common-table');\n    this.route('without-footer');\n    this.route('sort-by');\n    this.route('cell-template');\n    this.route('numeric-pagination');\n    this.route('custom-pagination');\n    this.route('custom-actions');\n    this.route('custom-messages');\n    this.route('custom-column-classes');\n    this.route('filtering-ignore-case');\n    this.route('filtering-select-box');\n    this.route('filtering-select-box-bool');\n    this.route('add-remove-column');\n    this.route('grouped-headers');\n    this.route('server-table');\n    this.route('route-cells');\n    this.route('expandable-rows');\n    this.route('display-data-changed-action');\n    this.route('select-rows-with-checkboxes');\n    this.route('column-sets');\n  });\n\n  this.route('users', function() {\n    this.route('user', {path: '/:user_id'});\n  });\n});\n\nexport default Router;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/router.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/router.js	(revision )
@@ -1,7 +1,7 @@
-import Ember from 'ember';
+import EmberRouter from '@ember/routing/router';
 import config from './config/environment';
 
-const Router = Ember.Router.extend({
+const Router = EmberRouter.extend({
   location: config.locationType,
   rootURL: config.rootURL
 });
@@ -10,25 +10,18 @@
   this.route('perf');
   this.route('examples', function () {
     this.route('common-table');
-    this.route('without-footer');
-    this.route('sort-by');
-    this.route('cell-template');
-    this.route('numeric-pagination');
-    this.route('custom-pagination');
     this.route('custom-actions');
     this.route('custom-messages');
     this.route('custom-column-classes');
-    this.route('filtering-ignore-case');
-    this.route('filtering-select-box');
-    this.route('filtering-select-box-bool');
-    this.route('add-remove-column');
     this.route('grouped-headers');
-    this.route('server-table');
     this.route('route-cells');
     this.route('expandable-rows');
     this.route('display-data-changed-action');
     this.route('select-rows-with-checkboxes');
     this.route('column-sets');
+    this.route('example');
+    this.route('sort-by-filter-by');
+    this.route('filtering');
   });
 
   this.route('users', function() {
Index: addon/components/models-table/row-filtering.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/row-filtering.js	(revision )
+++ addon/components/models-table/row-filtering.js	(revision )
@@ -0,0 +1,121 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/row-filtering';
+
+/**
+ * Table header item used within [models-table/table-header](Components.ModelsTableTableHeader.html).
+ *
+ * Component generates tr with filter inputs in the separated cells. Filter for column may be as an input or select. Second one may have predefined set of options or may calculate list of options from table data. Last scenario doesn't work with [models-table-server-paginated](Components.ModelsTableServerPaginated.html). Check properties [disableFiltering](Utils.ModelsTableColumn.html#property_disableFiltering), [filteredBy](Utils.ModelsTableColumn.html#property_filteredBy), [filterFunction](Utils.ModelsTableColumn.html#property_filterFunction), [filterPlaceholder](Utils.ModelsTableColumn.html#property_filterPlaceholder), [filterWithSelect](Utils.ModelsTableColumn.html#property_filterWithSelect), [predefinedFilterOptions](Utils.ModelsTableColumn.html#property_predefinedFilterOptions) for ModelsTableColumn.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.header as |header|}}
+ *       {{header.row-filtering}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.header as |header|}}
+ *       {{#header.row-filtering as |rs|}}
+ *         {{#each rs.processedColumns as |column|}}
+ *            <td>{{input value=column.filterString enter=""}}</td>
+ *       {{/header.row-sorting}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTableRowFiltering
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tr',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @type object[]
+   * @default null
+   */
+  data: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sort:method"}}ModelsTable.actions.sort{{/crossLink}}
+   *
+   * @event sort
+   */
+  sort: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.toggleAllSelection:method"}}ModelsTable.actions.toggleAllSelection{{/crossLink}}
+   *
+   * @event toggleAllSelection
+   */
+  toggleAllSelection: null
+
+});
Index: app/components/models-table/no-data.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/no-data.js	(revision )
+++ app/components/models-table/no-data.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/no-data';
Index: app/templates/components/models-table/columns-dropdown.hbs
===================================================================
--- app/templates/components/models-table/columns-dropdown.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/columns-dropdown.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,44 +0,0 @@
-<div class="{{classes.columnsDropdownWrapper}}">
-  <div class="{{classes.columnsDropdownButtonWrapper}}">
-    <button class="{{classes.buttonDefault}} dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true"
-            aria-expanded="false">
-      {{messages.columns-title}} <span class="{{icons.caret}}"></span>
-    </button>
-    <ul class="{{classes.columnsDropdown}}">
-
-      {{#if columnDropdownOptions.showAll}}
-        <li>
-          <a {{action "showAllColumns" column bubbles=false}} href="#">{{messages.columns-showAll}}</a>
-        </li>
-      {{/if}}
-      {{#if columnDropdownOptions.hideAll}}
-        <li>
-          <a {{action "hideAllColumns" column bubbles=false}} href="#">{{messages.columns-hideAll}}</a>
-        </li>
-      {{/if}}
-      {{#if columnDropdownOptions.restoreDefaults}}
-        <li>
-          <a {{action "restoreDefaultVisibility" column bubbles=false}} href="#">{{messages.columns-restoreDefaults}}</a>
-        </li>
-      {{/if}}
-
-      {{#each columnDropdownOptions.columnSets as |columnSet|}}
-        <li>
-          <a {{action "toggleColumnSet" columnSet bubbles=false}} href="#">{{columnSet.label}}</a>
-        </li>
-      {{/each}}
-
-      <li class="divider"></li>
-
-      {{#each processedColumns as |column|}}
-        {{#if column.mayBeHidden}}
-          <li>
-            <a {{action "toggleHidden" column bubbles=false}} href="#">
-              <span class="{{if column.isVisible icons.column-visible icons.column-hidden}}"></span> {{column.title}}
-            </a>
-          </li>
-        {{/if}}
-      {{/each}}
-    </ul>
-  </div>
-</div>
Index: tests/helpers/f.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst O = Ember.Object;\nconst {\n  A\n} = Ember;\n\n// from http://stackoverflow.com/questions/14766951/convert-digits-into-words-with-javascript\nfunction numberToWord(n) {\n  var a = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n  var b = ['', '', 'twenty', 'thirty', 'fourty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\n  var g = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion'];\n  var grp = function grp(n) {\n    return ('000' + n).substr(-3);\n  };\n  var rem = function rem(n) {\n    return n.substr(0, n.length - 3);\n  };\n  var fmt = function fmt(_ref) {\n    var h = _ref[0];\n    var t = _ref[1];\n    var o = _ref[2];\n\n    return [Number(h) === 0 ? '' : a[h] + ' hundred ', Number(o) === 0 ? b[t] : b[t] && b[t] + '-' || '', a[t + o] || a[o]].join('');\n  };\n  var cons = function cons(xs) {\n    return function (x) {\n      return function (g) {\n        return x ? [x, g && ' ' + g || '', ' ', xs].join('') : xs;\n      };\n    };\n  };\n  var iter = function iter(str) {\n    return function (i) {\n      return function (x) {\n        return function (r) {\n          if (x === '000' && r.length === 0) {\n            return str;\n          }\n          return iter(cons(str)(fmt(x))(g[i]))(i + 1)(grp(r))(rem(r));\n        };\n      };\n    };\n  };\n  return (iter('')(0)(grp(String(n)))(rem(String(n)))).trim();\n}\n\nfunction generateContent(length) {\n  var startFrom = arguments.length > 1 ? arguments[1] : 0;\n  var ret = A([]);\n  for (let i = startFrom; i < startFrom + length; i++) {\n    ret.pushObject(O.create({\n      index: i,\n      index2: Math.round(i / 2),\n      reversedIndex: startFrom + length - i,\n      indexWithHtml: `<i>${i}</i>`,\n      someWord: numberToWord(i),\n      id: i,\n      rand: !!(i % 2)\n    }));\n  }\n  return ret;\n}\n\nfunction generateColumns(columnNames) {\n  return A(A(columnNames).map(columnName => {return {title: columnName, propertyName: columnName}; }));\n}\n\nexport { generateContent, generateColumns };
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/helpers/f.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/helpers/f.js	(revision )
@@ -1,9 +1,5 @@
-import Ember from 'ember';
-
-const O = Ember.Object;
-const {
-  A
-} = Ember;
+import { A } from '@ember/array';
+import O from '@ember/object';
 
 // from http://stackoverflow.com/questions/14766951/convert-digits-into-words-with-javascript
 function numberToWord(n) {
Index: tests/dummy/mirage/factories/user.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Factory, faker } from 'ember-cli-mirage';\n\nexport default Factory.extend({\n\n  index(i) {\n    return i + 1;\n  },\n\n  'first-name'() {\n    return faker.name.firstName();\n  },\n\n  'last-name'() {\n    return faker.name.lastName();\n  },\n\n  age() {\n    return 18 + faker.random.number(42);\n  },\n\n  city() {\n    return faker.address.city();\n  }\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/mirage/factories/user.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/mirage/factories/user.js	(revision )
@@ -1,25 +1,27 @@
-import { Factory, faker } from 'ember-cli-mirage';
+import {Factory, faker} from 'ember-cli-mirage';
 
+const {name, random, address} = faker;
+
 export default Factory.extend({
 
   index(i) {
     return i + 1;
   },
 
-  'first-name'() {
-    return faker.name.firstName();
+  'first-name'(i) {
+    return `${name.firstName()}_${i + 1}`;
   },
 
-  'last-name'() {
-    return faker.name.lastName();
+  'last-name'(i) {
+    return `${name.lastName()}_${i + 1}`;
   },
 
   age() {
-    return 18 + faker.random.number(42);
+    return 11 + random.number(42);
   },
 
   city() {
-    return faker.address.city();
+    return address.city();
   }
 
 });
Index: addon/templates/components/models-table/table-footer.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/table-footer.hbs	(revision )
+++ addon/templates/components/models-table/table-footer.hbs	(revision )
@@ -0,0 +1,12 @@
+{{yield
+  (hash
+    goToPage=goToPage
+    clearFilters=clearFilters
+    sendAction=sendAction
+    expandRow=expandRow
+    collapseRow=collapseRow
+    expandAllRows=expandAllRows
+    collapseAllRows=collapseAllRows
+    themeInstance=themeInstance
+  )
+}}
\ No newline at end of file
Index: tests/dummy/app/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport Resolver from './resolver';\nimport loadInitializers from 'ember-load-initializers';\nimport config from './config/environment';\n\nconst App = Ember.Application.extend({\n  modulePrefix: config.modulePrefix,\n  podModulePrefix: config.podModulePrefix,\n  Resolver\n});\n\nloadInitializers(App, config.modulePrefix);\n\nexport default App;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/app.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/app.js	(revision )
@@ -1,9 +1,9 @@
-import Ember from 'ember';
+import Application from '@ember/application';
 import Resolver from './resolver';
 import loadInitializers from 'ember-load-initializers';
 import config from './config/environment';
 
-const App = Ember.Application.extend({
+const App = Application.extend({
   modulePrefix: config.modulePrefix,
   podModulePrefix: config.podModulePrefix,
   Resolver
Index: tests/dummy/app/templates/components/select-row-checkbox.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/select-row-checkbox.hbs	(revision )
+++ tests/dummy/app/templates/components/select-row-checkbox.hbs	(revision )
@@ -0,0 +1,2 @@
+<span class="{{if isSelected themeInstance.select-row themeInstance.deselect-row}}" onclick={{action "clickOnRow" index record}}></span>
+{{yield}}
\ No newline at end of file
Index: app/templates/components/models-table/no-data.hbs
===================================================================
--- app/templates/components/models-table/no-data.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/no-data.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<tr><td colspan="{{visibleProcessedColumns.length}}">{{{messages.noDataToShow}}}</td></tr>
\ No newline at end of file
Index: addon/templates/components/models-table/pagination-simple.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/pagination-simple.hbs	(revision )
+++ addon/templates/components/models-table/pagination-simple.hbs	(revision )
@@ -0,0 +1,32 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      goToPage=goToPage
+      gotoFirst=(action "gotoFirst")
+      gotoPrev=(action "gotoPrev")
+      gotoNext=(action "gotoNext")
+      gotoLast=(action "gotoLast")
+      gotoBackEnabled=gotoBackEnabled
+      gotoForwardEnabled=gotoForwardEnabled
+      sendAction=sendAction
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  <div class={{themeInstance.paginationInternalWrapper}} role="toolbar">
+    <div class={{themeInstance.paginationBlock}} role="group">
+      <a href="#" {{action "gotoFirst"}} class="{{if gotoBackEnabled "enabled" "disabled"}} {{themeInstance.buttonDefault}}">
+        <span class="{{themeInstance.nav-first}}"></span>
+      </a>
+      <a href="#" {{action "gotoPrev"}} class="{{if gotoBackEnabled "enabled" "disabled"}} {{themeInstance.buttonDefault}}">
+        <span class="{{themeInstance.nav-prev}}"></span>
+      </a>
+      <a href="#" {{action "gotoNext"}} class="{{if gotoForwardEnabled "enabled" "disabled"}} {{themeInstance.buttonDefault}}">
+        <span class="{{themeInstance.nav-next}}"></span>
+      </a>
+      <a href="#" {{action "gotoLast"}} class="{{if gotoForwardEnabled "enabled" "disabled"}} {{themeInstance.buttonDefault}}">
+        <span class="{{themeInstance.nav-last}}"></span>
+      </a>
+    </div>
+  </div>
+{{/if}}
\ No newline at end of file
Index: tests/dummy/app/templates/examples/sort-by-filter-by.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/sort-by-filter-by.hbs	(revision )
+++ tests/dummy/app/templates/examples/sort-by-filter-by.hbs	(revision )
@@ -0,0 +1,22 @@
+<h4>Sort and filter by custom property <small>simple table</small></h4>
+<p class="alert alert-info">Filtering and sorting for "First name" column is done by <code>lastName</code>-property. Filtering and sorting for "Last name" column is done by <code>firstName</code>-property.</p>
+<div class="row">
+  <div class="col-md-12">
+    {{models-table
+      data=data
+      columns=columns
+      multipleColumnsSorting=false
+    }}
+  </div>
+</div>
+
+<h4>Sort and filter by custom property <small>server paginated table</small></h4>
+<p class="alert alert-info">Filtering and sorting for "First name" column is done by <code>lastName</code>-property. Filtering and sorting for "Last name" column is done by <code>firstName</code>-property.</p>
+<div class="row">
+  <div class="col-md-12">
+    {{models-table-server-paginated
+      data=model
+      columns=columns
+    }}
+  </div>
+</div>
Index: addon/helpers/is-equal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nexport function isEqual([left, right]/*, hash*/) {\n  return left === right;\n}\n\nexport default Ember.Helper.helper(isEqual);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/helpers/is-equal.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/helpers/is-equal.js	(revision )
@@ -1,7 +1,7 @@
-import Ember from 'ember';
+import { helper } from '@ember/component/helper';
 
 export function isEqual([left, right]/*, hash*/) {
   return left === right;
 }
 
-export default Ember.Helper.helper(isEqual);
+export default helper(isEqual);
Index: tests/dummy/app/components/expand-all-toggle.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/expand-all-toggle.js	(revision )
+++ tests/dummy/app/components/expand-all-toggle.js	(revision )
@@ -0,0 +1,15 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/expand-all-toggle';
+
+export default Component.extend({
+  layout,
+  actions: {
+    collapseAllRows() {
+      get(this, 'collapseAllRows')();
+    },
+    expandAllRows() {
+      get(this, 'expandAllRows')();
+    }
+  }
+});
Index: addon/components/models-table-server-paginated.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport ModelsTable from './models-table';\nimport layout from '../templates/components/models-table';\n\nconst {\n  get,\n  set,\n  isBlank,\n  setProperties,\n  computed,\n  typeOf,\n  run,\n  $: {extend},\n  Logger: {warn}\n} = Ember;\n\nexport default ModelsTable.extend({\n\n  layout,\n\n  /**\n   * True if data is currently being loaded from the server.\n   * Can be used in the template to e.g. display a loading spinner.\n   *\n   * @type {boolean}\n   * @name isLoading\n   */\n  isLoading: false,\n\n  /**\n   * True if last data query promise has been rejected.\n   * Can be used in the template to e.g. indicate stale data or to e.g. show error state.\n   *\n   * @type {boolean}\n   * @name isError\n   */\n  isError: false,\n\n  /**\n   * The property on meta to load the pages count from.\n   *\n   * @type {string}\n   * @name metaPagesCountProperty\n   */\n  metaPagesCountProperty: 'pagesCount',\n  /**\n   * The property on meta to load the total item count from.\n   *\n   * @type {string}\n   * @name metaItemsCountProperty\n   */\n  metaItemsCountProperty: 'itemsCount',\n\n  /**\n   * The time to wait until new data is actually loaded.\n   * This can be tweaked to avoid making too many server requests.\n   *\n   * @type {number}\n   * @name {debounceDataLoadTime}\n   */\n  debounceDataLoadTime: 500,\n\n  /**\n   * The query parameters to use for server side filtering / querying.\n   *\n   * @type {object}\n   * @name filterQueryParameters\n   */\n  filterQueryParameters: {\n    globalFilter: 'search',\n    sort: 'sort',\n    sortDirection: 'sortDirection',\n    page: 'page',\n    pageSize: 'pageSize'\n  },\n\n  observedProperties: ['currentPageNumber', 'sortProperties.[]', 'pageSize', 'filterString', 'processedColumns.@each.filterString'],\n\n  /**\n   * This is set during didReceiveAttr and whenever the page/filters change.\n   */\n  filteredContent: [],\n\n  /**\n   * For server side filtering, these two properties are the same as the filtered content.\n   */\n  visibleContent: computed.alias('arrangedContent'),\n  arrangedContent: computed.alias('filteredContent'),\n\n  /**\n   * The total content length is get from the meta information.\n   * Set metaItemsCountProperty to change from which meta property this is loaded.\n   *\n   * @type {number}\n   * @name arrangedContentLength\n   */\n  arrangedContentLength: computed('filteredContent.meta', function () {\n    let itemsCountProperty = get(this, 'metaItemsCountProperty');\n    let meta = get(this, 'filteredContent.meta') || {};\n    return get(meta, itemsCountProperty) || 0;\n  }),\n\n  /**\n   * The pages count is get from the meta information.\n   * Set metaPagesCountProperty to change from which meta property this is loaded.\n   *\n   * @type {number}\n   * @name pagesCount\n   */\n  pagesCount: computed('filteredContent.meta', function () {\n    let pagesCountProperty = get(this, 'metaPagesCountProperty');\n    let meta = get(this, 'filteredContent.meta') || {};\n    return get(meta, pagesCountProperty) || 1;\n  }),\n\n  /**\n   * The index of the last item that is currently being shown.\n   *\n   * @type {number}\n   * @name lastIndex\n   */\n  lastIndex: computed('pageSize', 'currentPageNumber', 'arrangedContentLength', function () {\n    let pageMax = get(this, 'pageSize') * get(this, 'currentPageNumber');\n    let itemsCount = get(this, 'arrangedContentLength');\n    return Math.min(pageMax, itemsCount);\n  }),\n\n  /**\n   * This function actually loads the data from the server.\n   * It takes the store, modelName and query from the passed in data-object and adds page, sorting & filtering to it.\n   */\n  _loadData: function () {\n    let data = get(this, 'data');\n    let currentPageNumber = get(this, 'currentPageNumber');\n    let pageSize = get(this, 'pageSize');\n    let columns = get(this, 'processedColumns');\n    let sortProperties = get(this, 'sortProperties');\n    let filterString = get(this, 'filterString');\n\n    if (!get(data, 'query')) {\n      warn('You must use http://emberjs.com/api/data/classes/DS.Store.html#method_query for loading data');\n      return;\n    }\n    let query = extend({}, get(data, 'query'));\n    let store = get(data, 'store');\n    let modelName = get(data, 'type.modelName');\n\n    // Add pagination information\n    query[get(this, 'filterQueryParameters.page')] = currentPageNumber;\n    query[get(this, 'filterQueryParameters.pageSize')] = pageSize;\n\n    // Add sorting information\n    let sort = sortProperties && get(sortProperties, 'firstObject');\n    if (sort) {\n      let [sortBy, sortDirection] = sort.split(':');\n      query = this.sortingWrapper(query, sortBy, sortDirection.toUpperCase());\n    } else {\n      delete query[[get(this, 'filterQueryParameters.sort')]];\n      delete query[[get(this, 'filterQueryParameters.sortDirection')]];\n    }\n\n    // Add global filter\n    let globalFilter = get(this, 'filterQueryParameters.globalFilter');\n    if (filterString) {\n      query[globalFilter] = filterString;\n    } else {\n      delete query[globalFilter];\n    }\n\n    // Add per-column filter\n    if (get(this, 'useFilteringByColumns')) {\n      columns.forEach(column => {\n        let filter = get(column, 'filterString');\n        let filterTitle = this.getCustomFilterTitle(column);\n        this._setQueryFilter(query, column, filterTitle, filter);\n      });\n    }\n\n    setProperties(this, {isLoading: true, isError: false});\n\n    let promise = store.query(modelName, query);\n    promise.then(newData => setProperties(this, {isLoading: false, isError: false, filteredContent: newData}))\n      .catch(() => setProperties(this, {isLoading: false, isError: true}));\n    return promise;\n  },\n\n  /**\n   * Actually set the filter on a query.\n   * This can be overwritten for special case handling.\n   * Note that this will mutate the given query object!\n   *\n   * @param {object} query the query to mutate\n   * @param {object} column the column that is filtering\n   * @param {string} filterTitle the query param name for filtering\n   * @param {mixed} filter the actual filter value\n   * @private\n   */\n  _setQueryFilter(query, column, filterTitle, filter) {\n    if (!isBlank(filter)) {\n      query[filterTitle] = filter;\n    } else {\n      delete query[filterTitle];\n    }\n  },\n\n  /**\n   * Wrapper for sorting query\n   *\n   * @param {object} query parameters\n   * @param {string} sortBy\n   * @param {string} sortDirection\n   * @return {object} query parameters\n   */\n  sortingWrapper(query, sortBy, sortDirection) {\n    query[get(this, 'filterQueryParameters.sort')] = sortBy;\n    query[get(this, 'filterQueryParameters.sortDirection')] = sortDirection;\n\n    return query;\n  },\n\n  /**\n   * Customize filter title\n   *\n   * @param {object} column\n   * @return {string} title\n   */\n  getCustomFilterTitle(column) {\n    return get(column, 'filteredBy') || get(column, 'propertyName');\n  },\n\n  actions: {\n\n    gotoNext () {\n      if (!get(this, 'gotoForwardEnabled')) {\n        return;\n      }\n      let pagesCount = get(this, 'pagesCount');\n      let currentPageNumber = get(this, 'currentPageNumber');\n      if (pagesCount > currentPageNumber) {\n        this.incrementProperty('currentPageNumber');\n      }\n    },\n\n    gotoLast () {\n      if (!get(this, 'gotoForwardEnabled')) {\n        return;\n      }\n      let pagesCount = get(this, 'pagesCount');\n      set(this, 'currentPageNumber', pagesCount);\n    },\n\n    sort (column) {\n      const sortMap = {\n        none: 'asc',\n        asc: 'desc',\n        desc: 'none'\n      };\n      let sortedBy = get(column, 'sortedBy');\n      if (typeOf(sortedBy) === 'undefined') {\n        sortedBy = get(column, 'propertyName');\n      }\n      if (!sortedBy) {\n        return;\n      }\n\n      let currentSorting = get(column, 'sorting');\n      let newSorting = sortMap[currentSorting.toLowerCase()];\n      let sortingArgs = [column, sortedBy, newSorting];\n      this._singleColumnSorting(...sortingArgs);\n      this.userInteractionObserver();\n    }\n\n  },\n\n  didReceiveAttrs() {\n    set(this, 'filteredContent', get(this, 'data'));\n  },\n\n  _addPropertyObserver() {\n    run.debounce(this, this._loadData, get(this, 'debounceDataLoadTime'));\n  },\n\n  willInsertElement() {\n    this._super(...arguments);\n\n    let observedProperties = get(this, 'observedProperties');\n    observedProperties.forEach(propertyName => this.addObserver(propertyName, this._addPropertyObserver));\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n\n    let observedProperties = get(this, 'observedProperties');\n    observedProperties.forEach(propertyName => this.removeObserver(propertyName));\n  }\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table-server-paginated.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/components/models-table-server-paginated.js	(revision )
@@ -1,19 +1,103 @@
-import Ember from 'ember';
+import $ from 'jquery';
+import {computed, setProperties, set, get} from '@ember/object';
+import {isBlank, isNone} from '@ember/utils';
+import {run} from '@ember/runloop';
+import {warn, assert} from '@ember/debug';
 import ModelsTable from './models-table';
 import layout from '../templates/components/models-table';
 
-const {
-  get,
-  set,
-  isBlank,
-  setProperties,
-  computed,
-  typeOf,
-  run,
-  $: {extend},
-  Logger: {warn}
-} = Ember;
+const {extend} = $;
 
+/**
+ * Table-component with pagination, sorting and filtering.
+ *
+ * It should be used when pagination, filtering and sorting are done on the server-side. Otherwise [models-table](Components.ModelsTable.html) should be used.
+ *
+ * This component extends the base models-table component. For the end user, it can be used (nearly) the same:
+ *
+ * ```hbs
+ * {{models-table-server-paginated data=data columns=columns}}
+ * ```
+ *
+ * Usage with block context:
+ *
+ * ```hbs
+ * {{#models-table-server-paginated data=data columns=columns as |mt|}}
+ *   {{mt.global-filter}}
+ *   {{mt.columns-dropdown}}
+ *   {{mt.table}}
+ *   {{mt.footer}}
+ * {{/models-table}}
+ * ```
+ *
+ * ModelsTableServerPaginated yields references to the following contextual components:
+ *
+ * * [models-table/global-filter](Components.ModelsTableGlobalFilter.html) - global filter used for table data
+ * * [models-table/columns-dropdown](Components.ModelsTableColumnsDropdown.html) - dropdown with list of options to toggle columns and column-sets visibility
+ * * [models-table/table](Components.ModelsTableTable.html) - table with a data
+ * * [models-table/footer](Components.ModelsTableFooter.html) - summary and pagination
+ *
+ * Check own docs for each component to get detailed info.
+ *
+ * ModelsTableServerPaginated has a lot of options you may configure, but there are two required properties called `data` and `columns`. First one contains data-query:
+ *
+ * ```js
+ * model: function() {
+ *  return this.store.query('my-model', {});
+ * }
+ * ```
+ *
+ * It will then take this query and extend it with pagination, sorting and filtering information. All other query parameters added in will remain untouched. Everything else works exactly the same - global filters, column filters etc. still use the same properties to control them. A few things to notice:
+ *
+ * - When using `filterWithSelect` for a column, you must use `predefinedFilterOptions`, because the automatic loading of possible filter values cannot work here.
+ * - There is a new optional field `filteredBy` for columns, which works much like `sortedBy`: if set, this field will be used as query parameter, otherwise it will use the `propertyName`.
+ * - Sorting will not use multipleColumnSorting, it will only sort by one column.
+ * - If you set `sortedBy: false` on a column, sorting will be disabled for this column.
+ *
+ * There are a couple of things which can be configured to adapt to your API:
+ *
+ * ``` js
+ * // The property on meta to load the pages count from.
+ * metaPagesCountProperty: 'pagesCount',
+ *
+ * // The property on meta to load the total item count from.
+ * metaItemsCountProperty: 'itemsCount',
+ *
+ * // The time to wait until new data is actually loaded.
+ * // This can be tweaked to avoid making too many server requests.
+ * debounceDataLoadTime: 500,
+ *
+ * // The query parameters to use for server side filtering / querying.
+ * filterQueryParameters: {
+ *   globalFilter: 'search',
+ *   sort: 'sort',
+ *   sortDirection: 'sortDirection',
+ *   page: 'page',
+ *   pageSize: 'pageSize'
+ * },
+ ```
+ *
+ * This default configuration would try to get the total page count from `model.get('meta.pagesCount')` and the total item count from `model.get('meta.itemsCount')`, and would then go on to build the following query:
+ *
+ * ``` js
+ * columns: [
+ *   {
+ *     propertyName: 'name',
+ *     filteredBy: 'model_name'
+ *   }
+ * ]
+ *
+ * // after searching globally for "searchtexthere"
+ * // and in the name column for "filterforname",
+ * // and going to page 2,
+ * // the following query would be built:
+ * ?page=2&pageSize=50&search=searchtexthere&sort=name&sortDirection=ASC&model_name=filterforname
+ * ```
+ *
+ * @class ModelsTableServerPaginated
+ * @namespace Components
+ * @extends Components.ModelsTable
+ */
 export default ModelsTable.extend({
 
   layout,
@@ -22,8 +106,10 @@
    * True if data is currently being loaded from the server.
    * Can be used in the template to e.g. display a loading spinner.
    *
-   * @type {boolean}
-   * @name isLoading
+   * @type boolean
+   * @property isLoading
+   * @default false
+   * @private
    */
   isLoading: false,
 
@@ -31,23 +117,27 @@
    * True if last data query promise has been rejected.
    * Can be used in the template to e.g. indicate stale data or to e.g. show error state.
    *
-   * @type {boolean}
-   * @name isError
+   * @type boolean
+   * @property isError
+   * @default false
+   * @private
    */
   isError: false,
 
   /**
    * The property on meta to load the pages count from.
    *
-   * @type {string}
-   * @name metaPagesCountProperty
+   * @type string
+   * @property metaPagesCountProperty
+   * @default 'pagesCount'
    */
   metaPagesCountProperty: 'pagesCount',
   /**
    * The property on meta to load the total item count from.
    *
    * @type {string}
-   * @name metaItemsCountProperty
+   * @property metaItemsCountProperty
+   * @default 'itemsCount'
    */
   metaItemsCountProperty: 'itemsCount',
 
@@ -55,16 +145,17 @@
    * The time to wait until new data is actually loaded.
    * This can be tweaked to avoid making too many server requests.
    *
-   * @type {number}
-   * @name {debounceDataLoadTime}
+   * @type number
+   * @property debounceDataLoadTime
+   * @default 500
    */
   debounceDataLoadTime: 500,
 
   /**
    * The query parameters to use for server side filtering / querying.
    *
-   * @type {object}
-   * @name filterQueryParameters
+   * @type object
+   * @property filterQueryParameters
    */
   filterQueryParameters: {
     globalFilter: 'search',
@@ -74,25 +165,82 @@
     pageSize: 'pageSize'
   },
 
+  /**
+   * @property observedProperties
+   * @type string[]
+   * @private
+   */
   observedProperties: ['currentPageNumber', 'sortProperties.[]', 'pageSize', 'filterString', 'processedColumns.@each.filterString'],
 
   /**
    * This is set during didReceiveAttr and whenever the page/filters change.
+   *
+   * @override
+   * @property filteredContent
+   * @default []
+   * @private
+   * @type object[]
    */
   filteredContent: [],
 
   /**
-   * For server side filtering, these two properties are the same as the filtered content.
+   * For server side filtering, visibleContent is same as the filtered content
+   *
+   * @override
+   * @property visibleContent
+   * @private
+   * @type object[]
    */
   visibleContent: computed.alias('arrangedContent'),
+
+  /**
+   * For server side filtering, arrangedContent is same as the filtered content
+   *
+   * @override
+   * @property arrangedContent
+   * @private
+   * @type object[]
+   */
   arrangedContent: computed.alias('filteredContent'),
 
+  /**
+   * Can't be used within `models-table-server-paginated`. Back-end determines how to filter data
+   *
+   * @override
+   * @property filteringIgnoreCase
+   */
+  filteringIgnoreCase: computed({
+    set() {
+      assert(`"filteringIgnoreCase" can't be used with "models-table-server-paginated"`, false);
+    },
+    get() {
+      return undefined;
+    }
+  }),
+
+  /**
+   * Can't be used within `models-table-server-paginated`. Back-end determines how to filter data
+   *
+   * @override
+   * @property doFilteringByHiddenColumns
+   */
+  doFilteringByHiddenColumns: computed({
+    set() {
+      assert(`"doFilteringByHiddenColumns" can't be used with "models-table-server-paginated"`, false);
+    },
+    get() {
+      return undefined;
+    }
+  }),
+
   /**
    * The total content length is get from the meta information.
    * Set metaItemsCountProperty to change from which meta property this is loaded.
    *
-   * @type {number}
-   * @name arrangedContentLength
+   * @override
+   * @type number
+   * @property arrangedContentLength
+   * @private
    */
   arrangedContentLength: computed('filteredContent.meta', function () {
     let itemsCountProperty = get(this, 'metaItemsCountProperty');
@@ -104,8 +252,10 @@
    * The pages count is get from the meta information.
    * Set metaPagesCountProperty to change from which meta property this is loaded.
    *
-   * @type {number}
-   * @name pagesCount
+   * @type number
+   * @property pagesCount
+   * @override
+   * @private
    */
   pagesCount: computed('filteredContent.meta', function () {
     let pagesCountProperty = get(this, 'metaPagesCountProperty');
@@ -116,11 +266,13 @@
   /**
    * The index of the last item that is currently being shown.
    *
-   * @type {number}
-   * @name lastIndex
+   * @type number
+   * @property lastIndex
+   * @override
+   * @private
    */
   lastIndex: computed('pageSize', 'currentPageNumber', 'arrangedContentLength', function () {
-    let pageMax = get(this, 'pageSize') * get(this, 'currentPageNumber');
+    let pageMax = parseInt(get(this, 'pageSize'), 10) * get(this, 'currentPageNumber');
     let itemsCount = get(this, 'arrangedContentLength');
     return Math.min(pageMax, itemsCount);
   }),
@@ -128,6 +280,10 @@
   /**
    * This function actually loads the data from the server.
    * It takes the store, modelName and query from the passed in data-object and adds page, sorting & filtering to it.
+   *
+   * @returns {undefined}
+   * @method _loadData
+   * @private
    */
   _loadData: function () {
     let data = get(this, 'data');
@@ -148,9 +304,8 @@
     // Add pagination information
     query[get(this, 'filterQueryParameters.page')] = currentPageNumber;
     query[get(this, 'filterQueryParameters.pageSize')] = pageSize;
-
     // Add sorting information
-    let sort = sortProperties && get(sortProperties, 'firstObject');
+    let sort = sortProperties && get(sortProperties, 'length') ? sortProperties[0] : null;
     if (sort) {
       let [sortBy, sortDirection] = sort.split(':');
       query = this.sortingWrapper(query, sortBy, sortDirection.toUpperCase());
@@ -193,6 +348,8 @@
    * @param {object} column the column that is filtering
    * @param {string} filterTitle the query param name for filtering
    * @param {mixed} filter the actual filter value
+   * @returns {undefined}
+   * @method _setQueryFilter
    * @private
    */
   _setQueryFilter(query, column, filterTitle, filter) {
@@ -209,7 +366,8 @@
    * @param {object} query parameters
    * @param {string} sortBy
    * @param {string} sortDirection
-   * @return {object} query parameters
+   * @returns {object} query parameters
+   * @method sortingWrapper
    */
   sortingWrapper(query, sortBy, sortDirection) {
     query[get(this, 'filterQueryParameters.sort')] = sortBy;
@@ -221,8 +379,9 @@
   /**
    * Customize filter title
    *
+   * @method getCustomFilterTitle
    * @param {object} column
-   * @return {string} title
+   * @returns {string} title
    */
   getCustomFilterTitle(column) {
     return get(column, 'filteredBy') || get(column, 'propertyName');
@@ -230,6 +389,10 @@
 
   actions: {
 
+    /**
+     * @method actions.gotoNext
+     * @returns {undefined}
+     */
     gotoNext () {
       if (!get(this, 'gotoForwardEnabled')) {
         return;
@@ -241,6 +404,10 @@
       }
     },
 
+    /**
+     * @method actions.gotoLast
+     * @returns {undefined}
+     */
     gotoLast () {
       if (!get(this, 'gotoForwardEnabled')) {
         return;
@@ -249,20 +416,22 @@
       set(this, 'currentPageNumber', pagesCount);
     },
 
+    /**
+     * @override
+     * @method actions.sort
+     * @param {ModelsTableColumn} column
+     * @returns {undefined}
+     */
     sort (column) {
       const sortMap = {
         none: 'asc',
         asc: 'desc',
         desc: 'none'
       };
-      let sortedBy = get(column, 'sortedBy');
-      if (typeOf(sortedBy) === 'undefined') {
-        sortedBy = get(column, 'propertyName');
-      }
-      if (!sortedBy) {
+      let sortedBy = get(column, 'sortedBy') || get(column, 'propertyName');
+      if (isNone(sortedBy)) {
         return;
       }
-
       let currentSorting = get(column, 'sorting');
       let newSorting = sortMap[currentSorting.toLowerCase()];
       let sortingArgs = [column, sortedBy, newSorting];
@@ -282,7 +451,6 @@
 
   willInsertElement() {
     this._super(...arguments);
-
     let observedProperties = get(this, 'observedProperties');
     observedProperties.forEach(propertyName => this.addObserver(propertyName, this._addPropertyObserver));
   },
Index: addon/templates/components/models-table/grouped-header.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/grouped-header.hbs	(revision )
+++ addon/templates/components/models-table/grouped-header.hbs	(revision )
@@ -0,0 +1,7 @@
+{{#if hasBlock}}
+  {{yield}}
+{{else}}
+  {{#each groupedHeader as |cell|}}
+    <th colspan="{{cell.colspan}}" rowspan="{{cell.rowspan}}">{{cell.title}}</th>
+  {{/each}}
+{{/if}}
\ No newline at end of file
Index: addon/components/models-table.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport fmt from '../utils/fmt';\nimport assignPoly from '../utils/assign-poly';\nimport betterCompare from '../utils/better-compare';\n\nimport layout from '../templates/components/models-table';\nimport ModelsTableColumn from '../-private/column';\n\n/**\n * @typedef {object} groupedHeader\n * @property {string} title header for grouped columns\n * @property {number} colspan HTML colspan attr\n * @property {number} rowspan HTML rowspan attr\n */\n\nconst {\n  keys\n} = Object;\n\nconst {\n  get,\n  set,\n  getWithDefault,\n  setProperties,\n  getProperties,\n  computed,\n  observer,\n  isNone,\n  isBlank,\n  A,\n  on,\n  compare,\n  typeOf,\n  run,\n  Component,\n  assert,\n  String: S,\n  Object: O,\n  $: jQ,\n  isArray,\n  Logger: {warn}\n} = Ember;\n\nconst assign = Object.assign || Ember.assign || assignPoly; // for Ember 2.4\n\nconst NOT_SORTED = -1;\n\nconst defaultMessages = {\n  searchLabel: 'Search:',\n  searchPlaceholder: '',\n  'columns-title': 'Columns',\n  'columns-showAll': 'Show All',\n  'columns-hideAll': 'Hide All',\n  'columns-restoreDefaults': 'Restore Defaults',\n  tableSummary: 'Show %@ - %@ of %@',\n  allColumnsAreHidden: 'All columns are hidden. Use <strong>columns</strong>-dropdown to show some of them',\n  noDataToShow: 'No records to show'\n};\n\nconst defaultIcons = {\n  'sort-asc': 'glyphicon glyphicon-triangle-top',\n  'sort-desc': 'glyphicon glyphicon-triangle-bottom',\n  'column-visible': 'glyphicon glyphicon-check',\n  'column-hidden': 'glyphicon glyphicon-unchecked',\n  'nav-first': 'glyphicon glyphicon-chevron-left',\n  'nav-prev': 'glyphicon glyphicon-menu-left',\n  'nav-next': 'glyphicon glyphicon-menu-right',\n  'nav-last': 'glyphicon glyphicon-chevron-right',\n  'caret': 'caret',\n  'expand-row': 'glyphicon glyphicon-plus',\n  'expand-all-rows': 'glyphicon glyphicon-plus',\n  'collapse-row': 'glyphicon glyphicon-minus',\n  'collapse-all-rows': 'glyphicon glyphicon-minus',\n  'select-all-rows': 'glyphicon glyphicon-check',\n  'deselect-all-rows': 'glyphicon glyphicon-unchecked',\n  'select-row': 'glyphicon glyphicon-check',\n  'deselect-row': 'glyphicon glyphicon-unchecked'\n};\n\nconst defaultCssClasses = {\n  outerTableWrapper: '',\n  innerTableWrapper: 'inner-table-wrapper',\n  table: 'table table-striped table-bordered table-condensed',\n  globalFilterWrapper: 'pull-left',\n  columnsDropdownWrapper: 'pull-right columns-dropdown',\n  columnsDropdownButtonWrapper: 'btn-group',\n  columnsDropdown: 'dropdown-menu pull-right',\n  theadCell: 'table-header',\n  theadCellNoSorting: 'table-header-no-sorting',\n  theadCellNoFiltering: 'table-header-no-filtering',\n  tfooterWrapper: 'table-footer clearfix',\n  footerSummary: 'table-summary',\n  footerSummaryNumericPagination: 'col-md-4 col-sm-4 col-xs-4',\n  footerSummaryDefaultPagination: 'col-md-5 col-sm-5 col-xs-5',\n  pageSizeWrapper: 'col-md-2 col-sm-2 col-xs-2',\n  pageSizeSelectWrapper: 'pull-right',\n  paginationWrapper: 'table-nav',\n  paginationWrapperNumeric: 'col-md-6 col-sm-6 col-xs-6',\n  paginationWrapperDefault: 'col-md-5 col-sm-5 col-xs-5',\n  buttonDefault: 'btn btn-default',\n  noDataCell: '',\n  collapseRow: 'collapse-row',\n  collapseAllRows: 'collapse-all-rows',\n  expandRow: 'expand-row',\n  expandAllRows: 'expand-all-rows',\n  thead: '',\n  input: 'form-control',\n  clearFilterIcon: 'glyphicon glyphicon-remove-sign form-control-feedback',\n  clearAllFiltersIcon: 'glyphicon glyphicon-remove-circle',\n  globalFilterDropdownWrapper: ''\n};\n\nfunction isSortedByDefault(column) {\n  return column.sortPrecedence > NOT_SORTED;\n}\n\n/**\n * Default filter-function used in the filter by columns\n *\n * @param {string} cellValue value in the table cell\n * @param {string} filterString needed substring\n * @returns {boolean}\n */\nfunction defaultFilter(cellValue, filterString) {\n  return -1 !== cellValue.indexOf(filterString);\n}\n\n/**\n * Convert some string to the human readable one\n *\n * @param {string} name value to convert\n * @return {string}\n */\nfunction propertyNameToTitle(name) {\n  return S.capitalize(S.dasherize(name).replace(/\\-/g, ' '));\n}\n\nfunction optionStrToObj(option) {\n  return {value: option, label: option};\n}\n\n/**\n * Updates <code>filterOptions</code> for column which use <code>filterWithSelect</code>\n * and don't have <code>predefinedFilterOptions</code>\n * <code>filterOptions</code> are calculated like <code>data.mapBy(column.propertyName).uniq()</code>,\n * where data is component's <code>data</code>\n */\nfunction getFilterOptionsCP(propertyName) {\n  return computed(`data.@each.${propertyName}`, function () {\n    let data = get(this, 'data');\n    let predefinedFilterOptions = get(this, 'predefinedFilterOptions');\n    let filterWithSelect = get(this, 'filterWithSelect');\n    if (filterWithSelect && 'array' !== typeOf(predefinedFilterOptions)) {\n      let _data = A(A(data).compact());\n      let options = A(_data.mapBy(propertyName)).compact();\n      if (get(this, 'sortFilterOptions')) {\n        options = options.sort();\n      }\n      return A(['', ...options]).uniq().map(optionStrToObj);\n    }\n    return [];\n  });\n}\n\nfunction generateIndexes(count) {\n  let ret = new Array(count);\n  for (let i = 0; i < count; i++) {\n    ret.push(i);\n  }\n  return ret;\n}\n\n/**\n * data -> filteredContent -> arrangedContent -> visibleContent\n *\n * @class ModelsTable\n * @extends Ember.Component\n */\nexport default Component.extend({\n\n  layout,\n\n  /**\n   * Number of records shown on one table-page (size of the <code>visibleContent</code>)\n   *\n   * @type number\n   * @name ModelsTable#pageSize\n   * @default 10\n   */\n  pageSize: 10,\n\n  /**\n   * @type {number}\n   * @name ModelsTable#currentPageNumber\n   * @default 1\n   */\n  currentPageNumber: 1,\n\n  /**\n   * @type {string[]}\n   * @name ModelsTable#sortProperties\n   * @default []\n   */\n  sortProperties: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * Determines if multi-columns sorting should be used\n   *\n   * @type {boolean}\n   * @name ModelsTable#multipleColumnsSorting\n   * @default false\n   */\n  multipleColumnsSorting: true,\n\n  /**\n   * Determines if component footer should be shown on the page\n   *\n   * @type {boolean}\n   * @name ModelsTable#showComponentFooter\n   * @default true\n   */\n  showComponentFooter: true,\n\n  /**\n   * Determines if numeric pagination should be used\n   *\n   * @type {boolean}\n   * @name ModelsTable#useNumericPagination\n   * @default false\n   */\n  useNumericPagination: false,\n\n  /**\n   * Determines if columns-dropdown should be shown\n   *\n   * @type {boolean}\n   * @name ModelsTable#showColumnsDropdown\n   * @default true\n   */\n  showColumnsDropdown: true,\n\n  /**\n   * Determines if filtering by columns should be available to the user\n   *\n   * @type {boolean}\n   * @name ModelsTable#useFilteringByColumns\n   * @default true\n   */\n  useFilteringByColumns: true,\n\n  /**\n   * @type {string}\n   * @name ModelsTable#filterString\n   * @default ''\n   */\n  filterString: '',\n\n  /**\n   * Determines if filtering (global and by column) should ignore case\n   *\n   * @type {boolean}\n   * @name ModelsTable#filteringIgnoreCase\n   * @default false\n   */\n  filteringIgnoreCase: false,\n\n  /**\n   * Determines if filtering should be done by hidden columns\n   * Notice: after changing this value filtering results will be updated only after filter options are changed\n   *\n   * @type {boolean}\n   * @name ModelsTable#doFilteringByHiddenColumns\n   * @default true\n   */\n  doFilteringByHiddenColumns: true,\n\n  /**\n   * Determines if \"Global filter\"-field should be shown\n   *\n   * @type {boolean}\n   * @name ModelsTable#showGlobalFilter\n   * @default true\n   */\n  showGlobalFilter: true,\n\n  /**\n   * Determines if focus should be on the \"Global filter\"-field on component render\n   *\n   * @type {boolean}\n   * @name ModelsTable#focusGlobalFilter\n   * @default false\n   */\n  focusGlobalFilter: false,\n\n  /**\n   * Determines if <code>processedColumns</code> will be updated if <code>columns</code> are changed (<code>propertyName</code> and\n   * <code>template</code> are observed)\n   * <b>IMPORTANT</b> All filter, sort and visibility options will be dropped to the default values while updating\n   *\n   * @type {boolean}\n   * @name ModelsTable#columnsAreUpdateable\n   * @default false\n   */\n  columnsAreUpdateable: false,\n\n  /**\n   * <code>columns</code> fields which are observed to update shown table-columns\n   * It is used only if <code>columnsAreUpdateable</code> is <code>true</code>\n   *\n   * @type {string[]}\n   * @name ModelsTable#columnFieldsToCheckUpdate\n   * @default ['propertyName', 'template']\n   */\n  columnFieldsToCheckUpdate: computed(function() {\n    return A(['propertyName', 'template']);\n  }),\n\n  /**\n   * All table records\n   *\n   * @type {Ember.Object[]}\n   * @name ModelsTable#data\n   * @default []\n   */\n  data: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * Table columns\n   *\n   * @type {ModelsTable~ModelsTableColumn[]}\n   * @name ModelsTable#columns\n   * @default []\n   */\n  columns: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * Sets of columns that can be toggled together.\n   *\n   * @type {Object[]}\n   * @name ModelsTable#columnSets\n   * @default []\n   */\n  columnSets: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * @type {Ember.Object[]}\n   * @name ModelsTable#processedColumns\n   * @default []\n   */\n  processedColumns: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * @type {Object}\n   * @name ModelsTable#messages\n   */\n  messages: computed(function() {\n    return O.create({});\n  }),\n\n  /**\n   * @type {Object}\n   * @name ModelsTable#classes\n   */\n  classes: computed(function() {\n    return O.create({});\n  }),\n\n  /**\n   * @type {Object}\n   * @name ModelsTable#icons\n   */\n  icons: computed(function() {\n    return O.create({});\n  }),\n\n  /**\n   * List of the additional headers\n   * Used to group columns\n   *\n   * @type {groupedHeader[][]}\n   * @name ModelsTable#groupedHeaders\n   */\n  groupedHeaders: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * Template with First|Prev|Next|Last buttons\n   *\n   * @type {string}\n   * @name ModelsTable#simplePaginationTemplate\n   * @default 'components/models-table/simple-pagination'\n   */\n  simplePaginationTemplate: 'components/models-table/simple-pagination',\n\n  /**\n   * Template with nav buttons\n   *\n   * @type {string}\n   * @name ModelsTable#numericPaginationTemplate\n   * @default 'components/models-table/numeric-pagination'\n   */\n  numericPaginationTemplate: 'components/models-table/numeric-pagination',\n\n  /**\n   * Template with table footer\n   *\n   * @type {string}\n   * @name ModelsTable#tableFooterTemplate\n   * @default 'components/models-table/table-footer'\n   */\n  tableFooterTemplate: 'components/models-table/table-footer',\n\n  /**\n   * Template for component footer\n   *\n   * @type {string}\n   * @name ModelsTable#tfooterTemplate\n   * @default\n   */\n  componentFooterTemplate: 'components/models-table/component-footer',\n\n  /**\n   * Template for page size\n   *\n   * @type {string}\n   * @name ModelsTable#pageSizeTemplate\n   * @default 'components/models-table/table-footer'\n   */\n  pageSizeTemplate: 'components/models-table/page-size',\n\n  /**\n   * Determines if page size should be shown\n   *\n   * @type {boolean}\n   * @name ModelsTable#showPageSize\n   * @default true\n   */\n  showPageSize: true,\n\n  /**\n   * Template with global filter\n   *\n   * @type {string}\n   * @name ModelsTable#globalFilterTemplate\n   * @default 'components/models-table/global-filter'\n   */\n  globalFilterTemplate: 'components/models-table/global-filter',\n\n  /**\n   * Template with columns dropdown\n   *\n   * @type {string}\n   * @name ModelsTable#columnsDropdownTemplate\n   * @default 'components/models-table/columns-dropdown'\n   */\n  columnsDropdownTemplate: 'components/models-table/columns-dropdown',\n\n  /**\n   * Template with header row for column names\n   *\n   * @type {string}\n   * @name ModelsTable#headerRowSortingTemplate\n   * @default 'components/models-table/header-row-sorting'\n   */\n  headerSortingRowTemplate: 'components/models-table/header-row-sorting',\n\n  /**\n   * Template for sorting icons\n   *\n   * @type {string}\n   * @name ModelsTable#headerSortingIconsTemplate\n   * @default 'components/models-table/header-sorting-icons'\n   */\n  headerSortingIconsTemplate: 'components/models-table/header-sorting-icons',\n\n  /**\n   * Template with header row for column filters\n   *\n   * @type {string}\n   * @name ModelsTable#headerFilteringRowTemplate\n   * @default 'components/models-table/header-row-filtering'\n   */\n  headerFilteringRowTemplate: 'components/models-table/header-row-filtering',\n\n  /**\n   * Template with header rows for columns grouping\n   *\n   * @type {string}\n   * @name ModelsTable#headerFilteringRowTemplate\n   * @default 'components/models-table/header-rows-grouped'\n   */\n  headerGroupedRowsTemplate: 'components/models-table/header-rows-grouped',\n\n  /**\n   * Template for table's row\n   *\n   * @type {string}\n   * @default 'components/models-table/row'\n   * @name ModelsTable#rowTemplate\n   */\n  rowTemplate: 'components/models-table/row',\n\n  /**\n   * Template for expanded row\n   *\n   * @type {string}\n   * @default 'components/models-table/expanded-row'\n   * @name ModelsTable#expandedRowTemplate\n   */\n  expandedRowTemplate: 'components/models-table/expanded-row',\n\n  /**\n   * Template for row with message about no available data\n   *\n   * @type {string}\n   * @default 'components/models-table/no-data'\n   * @name ModelsTable#noDataShowTemplate\n   */\n  noDataShowTemplate: 'components/models-table/no-data',\n\n  /**\n   * Template for row with message about all columns are hidden\n   *\n   * @type {string}\n   * @default 'components/models-table/all-columns-hidden'\n   * @name ModelsTable#allColumnsHiddenTemplate\n   */\n  allColumnsHiddenTemplate: 'components/models-table/all-columns-hidden',\n\n  /**\n   * Indexes of the expanded rows\n   * It's set to the initial value when current page or page size is changed\n   *\n   * @type {number[]}\n   * @private\n   * @name ModelsTable#_expandedRowIndexes\n   */\n  _expandedRowIndexes: null,\n\n  /**\n   * true - allow to expand more than 1 row\n   * false - only 1 row may be expanded in the same time\n   *\n   * @type {boolean}\n   * @default false\n   * @name ModelsTable#multipleExpand\n   */\n  multipleExpand: false,\n\n  /**\n   * @type {object[]}\n   * @private\n   * @name ModelsTable#_selectedItems\n   */\n  _selectedItems: null,\n\n  /**\n   * Allow or disallow to select rows on click\n   * If `false` - no row can be selected\n   *\n   * @type {boolean}\n   * @default true\n   * @name ModelsTable#selectRowOnClick\n   */\n  selectRowOnClick: true,\n\n  /**\n   * Allow or disallow to select multiple rows\n   * If `false` - only one row may be selected in the same time\n   *\n   * @type {boolean}\n   * @default false\n   * @name ModelsTable#multipleSelect\n   */\n  multipleSelect: false,\n\n  /**\n   * Action-name sent on user interaction\n   *\n   * @type {string}\n   * @default 'displayDataChanged'\n   * @name ModelsTable#displayDataChangedAction\n   */\n  displayDataChangedAction: 'displayDataChanged',\n\n  /**\n   * Determines if action on user interaction should be sent\n   *\n   * @default false\n   * @type {boolean}\n   * @name ModelsTable#sendDisplayDataChangedAction\n   */\n  sendDisplayDataChangedAction: false,\n\n  /**\n   * Action-name sent on change of visible columns\n   *\n   * @type {string}\n   * @default 'columnsVisibilityChanged'\n   * @name ModelsTable#columnsVisibilityChangedAction\n   */\n  columnsVisibilityChangedAction: 'columnsVisibilityChanged',\n\n  /**\n   * Determines if action on change of visible columns should be sent\n   *\n   * @default false\n   * @type {boolean}\n   * @name ModelsTable#sendColumnsVisibilityChangedAction\n   */\n  sendColumnsVisibilityChangedAction: false,\n\n  /**\n   * Rows with this items should be preselected on component init\n   * It's NOT a list of indexes!\n   *\n   * @default null\n   * @type {object[]|null}\n   * @name ModelsTable#preselectedItems\n   */\n  preselectedItems: null,\n\n  /**\n   * List of the currently visible columns\n   *\n   * @type {Ember.Object[]}\n   * @default []\n   * @name ModelsTable#visibleProcessedColumns\n   */\n  visibleProcessedColumns: computed.filterBy('processedColumns', 'isVisible', true),\n\n  /**\n   * True if all processedColumns are hidden by <code>isHidden</code>\n   *\n   * @type {boolean}\n   * @name ModelsTable#allColumnsAreHidden\n   */\n  allColumnsAreHidden: computed('processedColumns.@each.isHidden', function () {\n    const processedColumns = get(this, 'processedColumns');\n    return processedColumns.length > 0 && processedColumns.isEvery('isHidden', true);\n  }),\n\n  /**\n   * @type {boolean}\n   */\n  globalFilterUsed: computed.notEmpty('filterString'),\n\n  /**\n   * Global filter or filter by any column is used\n   *\n   * @type {boolean}\n   */\n  anyFilterUsed: computed('globalFilterUsed', 'processedColumns.@each.filterUsed', function () {\n    return get(this, 'globalFilterUsed') || get(this, 'processedColumns').isAny('filterUsed');\n  }),\n\n  /**\n   * True if all processedColumns dosn't use filtering and sorting\n   *\n   * @type {boolean}\n   * @name ModelsTable#noHeaderFilteringAndSorting\n   */\n  noHeaderFilteringAndSorting: computed('processedColumns.@each.useFilter', 'processedColumns.@each.useSorting', function () {\n    const processedColumns = get(this, 'processedColumns');\n    return processedColumns.isEvery('useFilter', false) && processedColumns.isEvery('useSorting', false);\n  }),\n\n  /**\n   * Number of pages\n   *\n   * @type {number}\n   * @name ModelsTable#pagesCount\n   */\n  pagesCount: computed('arrangedContent.[]', 'pageSize', function () {\n    const pagesCount = get(this, 'arrangedContent.length') / parseInt(get(this, 'pageSize'), 10);\n    return (0 === pagesCount % 1) ? pagesCount : (Math.floor(pagesCount) + 1);\n  }),\n\n  /**\n   * List of links to the page\n   * Used if <code>useNumericPagination</code> is true\n   * @typedef {object} visiblePageNumber\n   * @property {boolean} isLink\n   * @property {boolean} isActive\n   * @property {string} label\n   *\n   * @type {visiblePageNumber[]}\n   * @name ModelsTable#visiblePageNumbers\n   */\n  visiblePageNumbers: computed('arrangedContentLength', 'pagesCount', 'currentPageNumber', function () {\n    const {\n      pagesCount,\n      currentPageNumber\n    } = getProperties(this, 'pagesCount', 'currentPageNumber');\n    const notLinkLabel = '...';\n    let groups = []; // array of 8 numbers\n    let labels = A([]);\n    groups[0] = 1;\n    groups[1] = Math.min(1, pagesCount);\n    groups[6] = Math.max(1, pagesCount);\n    groups[7] = pagesCount;\n    groups[3] = Math.max(groups[1] + 1, currentPageNumber - 1);\n    groups[4] = Math.min(groups[6] - 1, currentPageNumber + 1);\n    groups[2] = Math.floor((groups[1] + groups[3]) / 2);\n    groups[5] = Math.floor((groups[4] + groups[6]) / 2);\n\n    for (let n = groups[0]; n <= groups[1]; n++) {\n      labels[n] = n;\n    }\n    const userGroup2 = groups[4] >= groups[3] && ((groups[3] - groups[1]) > 1);\n    if (userGroup2) {\n      labels[groups[2]] = notLinkLabel;\n    }\n    for (let i = groups[3]; i <= groups[4]; i++) {\n      labels[i] = i;\n    }\n    const userGroup5 = groups[4] >= groups[3] && ((groups[6] - groups[4]) > 1);\n    if (userGroup5) {\n      labels[groups[5]] = notLinkLabel;\n    }\n    for (let i = groups[6]; i <= groups[7]; i++) {\n      labels[i] = i;\n    }\n    return A(labels.compact().map(label => ({\n      label: label,\n      isLink: label !== notLinkLabel,\n      isActive: label === currentPageNumber})\n    ));\n  }),\n\n  /**\n   * Are buttons \"Back\" and \"First\" enabled\n   *\n   * @type {boolean}\n   * @name ModelsTable#gotoBackEnabled\n   */\n  gotoBackEnabled: computed.gt('currentPageNumber', 1),\n\n  /**\n   * Are buttons \"Next\" and \"Last\" enabled\n   *\n   * @type {boolean}\n   * @name ModelsTable#gotoForwardEnabled\n   */\n  gotoForwardEnabled: computed('currentPageNumber', 'pagesCount', function () {\n    return get(this, 'currentPageNumber') < get(this, 'pagesCount');\n  }),\n\n  /**\n   * @type {Ember.Object[]}\n   * @name ModelsTable#filteredContent\n   */\n  filteredContent: computed('filterString', 'data.[]', 'useFilteringByColumns', 'processedColumns.@each.filterString', function () {\n    const {\n      processedColumns,\n      data,\n      useFilteringByColumns,\n      filteringIgnoreCase,\n      doFilteringByHiddenColumns\n    } = getProperties(this, 'processedColumns', 'data', 'useFilteringByColumns', 'filteringIgnoreCase', 'doFilteringByHiddenColumns');\n    let filterString = get(this, 'filterString');\n\n    if (!data) {\n      return A([]);\n    }\n\n    let _processedColumns = processedColumns;\n    if (!doFilteringByHiddenColumns) {\n      _processedColumns = _processedColumns.filterBy('isHidden', false);\n    }\n\n    // global search\n    let globalSearch = data.filter(function (row) {\n      return _processedColumns.length ? _processedColumns.any(c => {\n        const filterFor = get(c, 'filteredBy') || get(c, 'propertyName');\n        if (filterFor) {\n          let cellValue = '' + get(row, filterFor);\n          if (filteringIgnoreCase) {\n            cellValue = cellValue.toLowerCase();\n            filterString = filterString.toLowerCase();\n          }\n          return -1 !== cellValue.indexOf(filterString);\n        }\n        return false;\n      }) : true;\n    });\n\n    if (!useFilteringByColumns) {\n      return A(globalSearch);\n    }\n\n    // search by each column\n    return A(globalSearch.filter(row => {\n      return _processedColumns.length ? _processedColumns.every(c => {\n        const filterFor = get(c, 'filteredBy') || get(c, 'propertyName');\n        if (filterFor) {\n          let cellValue = '' + get(row, filterFor);\n          if (get(c, 'useFilter')) {\n            let filterString = get(c, 'filterString');\n            if (get(c, 'filterWithSelect') && '' === filterString) {\n              return true;\n            }\n            if (filteringIgnoreCase) {\n              cellValue = typeOf(cellValue) === 'string' ? cellValue.toLowerCase() : cellValue;\n              filterString = typeOf(filterString) === 'string' ? filterString.toLowerCase() : filterString;\n            }\n            return 'function' === typeOf(c.filterFunction) ? c.filterFunction(cellValue, filterString, row) : 0 === compare(cellValue, filterString);\n          }\n          return true;\n        }\n        return true;\n      }) : true;\n    }));\n  }),\n\n  /**\n   * @type {Ember.Object[]}\n   * @name ModelsTable#arrangedContent\n   */\n  arrangedContent: computed('filteredContent.[]', 'sortProperties.[]', function () {\n    const filteredContent = get(this, 'filteredContent');\n    let sortProperties = get(this, 'sortProperties').map(p => {\n      let [prop, direction] = p.split(':');\n      direction = direction || 'asc';\n\n      return [prop, direction];\n    });\n\n    let _filteredContent = filteredContent.slice();\n    return sortProperties.length ? A(_filteredContent.sort((row1, row2) => {\n      for (let i = 0; i < sortProperties.length; i++) {\n        let [prop, direction] = sortProperties[i];\n        let result = betterCompare(get(row1, prop), get(row2, prop));\n        if (result !== 0) {\n          return (direction === 'desc') ? (-1 * result) : result;\n        }\n      }\n\n      return 0;\n    })) : _filteredContent;\n  }),\n\n  /**\n   * Content of the current table page\n   *\n   * @type {Ember.Object[]}\n   * @name ModelsTable#visibleContent\n   */\n  visibleContent: computed('arrangedContent.[]', 'pageSize', 'currentPageNumber', function () {\n    let {\n      arrangedContent,\n      pageSize,\n      currentPageNumber\n    } = getProperties(this, 'arrangedContent', 'pageSize', 'currentPageNumber');\n    pageSize = parseInt(pageSize, 10);\n    const startIndex = pageSize * (currentPageNumber - 1);\n    if (get(arrangedContent, 'length') < pageSize) {\n      return arrangedContent;\n    }\n    return A(arrangedContent.slice(startIndex, startIndex + pageSize));\n  }),\n\n  /**\n   * Real table summary\n   *\n   * @type {string}\n   * @name ModelsTable#summary\n   */\n  summary: computed('firstIndex', 'lastIndex', 'arrangedContentLength', 'messages.tableSummary', function () {\n    const {\n      arrangedContentLength,\n      firstIndex,\n      lastIndex\n    } = getProperties(this, 'arrangedContentLength', 'firstIndex', 'lastIndex');\n    return fmt(get(this, 'messages.tableSummary'), firstIndex, lastIndex, arrangedContentLength);\n  }),\n\n  /**\n   * Is user on the last page\n   *\n   * @type {boolean}\n   * @name ModelsTable#isLastPage\n   */\n  isLastPage: computed.not('gotoForwardEnabled'),\n\n  /**\n   * Alias to <code>arrangedContent.length</code>\n   *\n   * @type {number}\n   * @name ModelsTable#arrangedContentLength\n   */\n  arrangedContentLength: computed.alias('arrangedContent.length'),\n\n  /**\n   * Index of the first currently shown record\n   *\n   * @type {number}\n   * @name ModelsTable#firstIndex\n   */\n  firstIndex: computed('arrangedContentLength' ,'pageSize', 'currentPageNumber', function () {\n    const {\n      currentPageNumber,\n      pageSize,\n      arrangedContentLength\n      } = getProperties(this, 'currentPageNumber', 'pageSize', 'arrangedContentLength');\n    return 0 === arrangedContentLength ? 0 : parseInt(pageSize, 10) * (currentPageNumber - 1) + 1;\n  }),\n\n  /**\n   * Index of the last shown record\n   *\n   * @type {number}\n   * @name ModelsTable#lastIndex\n   */\n  lastIndex: computed('isLastPage', 'arrangedContentLength', 'currentPageNumber', 'pageSize', function () {\n    const {\n      currentPageNumber,\n      pageSize,\n      isLastPage,\n      arrangedContentLength\n      } = getProperties(this, 'currentPageNumber', 'pageSize', 'isLastPage', 'arrangedContentLength');\n    return isLastPage ? arrangedContentLength : currentPageNumber * parseInt(pageSize, 10);\n  }),\n\n  /**\n   * List of possible <code>pageSize</code> values\n   * Used to change size of <code>visibleContent</code>\n   *\n   * @type {number[]}\n   * @default [10, 25, 50]\n   * @name ModelsTable#pageSizeValues\n   */\n  pageSizeValues: computed(function() {\n    return A([10, 25, 50]);\n  }),\n\n  /**\n   * List of options for pageSize-selectBox\n   * It's mapped from <code>pageSizeValues</code>\n   * This value should not be set manually!\n   *\n   * @type {{value: string|number, label: string|number}}\n   * @default []\n   * @private\n   */\n  pageSizeOptions: computed(function() {\n    return A([]);\n  }),\n\n  /**\n   * These are options for the columns dropdown.\n   * By default, the \"Show All\", 'Hide All\" and \"Restore Defaults\" buttons are displayed.\n   *\n   * @type {{ showAll: boolean, hideAll: boolean, restoreDefaults: boolean, columnSets: object[] }}\n   * @private\n   */\n  columnDropdownOptions: computed('columnSets.{label,showColumns,hideOtherColumns}', function() {\n    return O.create({\n      showAll: true,\n      hideAll: true,\n      restoreDefaults: true,\n      columnSets: A(get(this, 'columnSets') || [])\n    });\n  }),\n\n  /**\n   * Show first page if for some reasons there is no content for current page, but table data exists\n   *\n   * @method visibleContentObserver\n   * @name ModelsTable#visibleContentObserver\n   * @private\n   */\n  visibleContentObserver() {\n    run.once(this, this.visibleContentObserverOnce);\n  },\n\n  /**\n   * @private\n   */\n  visibleContentObserverOnce() {\n    let visibleContentLength = get(this, 'visibleContent.length');\n    let dataLength = get(this, 'data.length');\n    let currentPageNumber = get(this, 'currentPageNumber');\n    if (!visibleContentLength && dataLength && currentPageNumber !== 1) {\n      set(this, 'currentPageNumber', 1);\n    }\n  },\n\n  /**\n   * @method contentChangedAfterPolling\n   * @name ModelsTable#contentChangedAfterPolling\n   * @private\n   */\n  contentChangedAfterPolling () {\n    run.once(this, this.contentChangedAfterPollingOnce);\n  },\n\n  /**\n   * @private\n   */\n  contentChangedAfterPollingOnce () {\n    get(this, 'filteredContent');\n    this.notifyPropertyChange('filteredContent');\n  },\n\n  /**\n   * Component init\n   * Set visibility and filtering attributes for each column\n   * Update messages used by table with user-provided messages (@see messages)\n   * Update icons used by table with user-provided icons (@see icons)\n   * Update classes used by table with user-provided css-classes (@see classes)\n   *\n   * @method setup\n   * @name ModelsTable#setup\n   */\n  setup: on('init', function() {\n    this._setupSelectedRows();\n    this._setupExpandedRows();\n    this._setupColumns();\n    this._setupMessages();\n    this._setupIcons();\n    this._setupClasses();\n    this._setupPageSizeOptions();\n\n    if (get(this, 'columnsAreUpdateable')) {\n      let columnFieldsToCheckUpdate = get(this, 'columnFieldsToCheckUpdate');\n      assert('`columnFieldsToCheckUpdate` should be an array of strings', 'array' === typeOf(columnFieldsToCheckUpdate));\n      columnFieldsToCheckUpdate.forEach(propertyName => this.addObserver(`columns.@each.${propertyName}`, this, this._setupColumnsOnce));\n    }\n    this.addObserver('visibleContent.length', this, this.visibleContentObserver);\n  }),\n\n  /**\n   * Recalculate processedColumns when the columns attr changes\n   */\n  updateColumns: on('didReceiveAttrs', function() {\n    if (get(this, 'columnsAreUpdateable')) {\n      this._setupColumns();\n    }\n  }),\n\n  /**\n   * Focus on \"Global filter\" on component render\n   *\n   * @method focus\n   * @name ModelsTable#focus\n   */\n  focus: on('didInsertElement', function () {\n    if (get(this, 'showGlobalFilter') && get(this, 'focusGlobalFilter')) {\n      jQ('.filterString').focus();\n    }\n  }),\n\n  /**\n   * Preselect table rows if `preselectedItems` is provided\n   * `multipleSelected` may be set `true` if `preselectedItems` has more than 1 item\n   *\n   * @private\n   */\n  _setupSelectedRows() {\n    set(this, '_selectedItems', A([]));\n    let preselectedItems = get(this, 'preselectedItems');\n    if (isArray(preselectedItems)) {\n      set(this, '_selectedItems', A(preselectedItems));\n      if (preselectedItems.length > 1 && !get(this, 'multipleSelected')) {\n        warn('`multipleSelected` is set `true`, because you have provided multiple `preselectedItems`.');\n        set(this, 'multipleSelected', true);\n      }\n    }\n  },\n\n  _setupExpandedRows() {\n    set(this, '_expandedRowIndexes', A([]));\n  },\n\n  /**\n   * Wrapper for <code>_setupColumns</code> to call it only once when observer is fired\n   *\n   * @method _setupColumnsOnce\n   * @name ModelsTable#_setupColumnsOnce\n   * @private\n   */\n  _setupColumnsOnce() {\n    run.once(this, this._setupColumns);\n  },\n\n  /**\n   * Create new properties for <code>columns</code> (filterString, useFilter, isVisible, defaultVisible)\n   *\n   * @method _setupColumns\n   * @private\n   * @name ModelsTable#_setupColumns\n   */\n  _setupColumns () {\n    let self = this;\n\n    let nColumns = A(get(this, 'columns').map(column => {\n      let filterFunction = get(column, 'filterFunction');\n      filterFunction = 'function' === typeOf(filterFunction) ? filterFunction : defaultFilter;\n\n      let c = ModelsTableColumn.create(column);\n      let propertyName = get(c, 'propertyName');\n      let sortedBy = get(c, 'sortedBy');\n      let filteredBy = get(c, 'filteredBy');\n      setProperties(c, {\n        data: get(this, 'data'),\n        filterString: get(c, 'filterString') || '',\n        useFilter: !isNone(filteredBy || propertyName) && !get(c, 'disableFiltering'),\n        useSorting: !isNone(sortedBy || propertyName) && !get(c, 'disableSorting'),\n        originalDefinition: column\n      });\n\n      set(c, 'filterFunction', filterFunction);\n\n      if (isNone(get(c, 'mayBeHidden'))) {\n        set(c, 'mayBeHidden', true);\n      }\n\n      const { sortDirection, sortPrecedence } = column;\n      const hasSortPrecedence = !isNone(sortPrecedence) && sortPrecedence > NOT_SORTED;\n      const defaultSortPrecedence = hasSortPrecedence ? sortPrecedence : NOT_SORTED;\n      const defaultSorting = sortDirection && (sortPrecedence > NOT_SORTED) ? sortDirection.toLowerCase() : 'none';\n\n      setProperties(c, {\n        defaultVisible: !get(c, 'isHidden'),\n        sorting: defaultSorting,\n        sortPrecedence: defaultSortPrecedence\n      });\n\n      if (get(c, 'filterWithSelect') && get(c, 'useFilter')) {\n        let predefinedFilterOptions = get(column, 'predefinedFilterOptions');\n        let usePredefinedFilterOptions = 'array' === typeOf(predefinedFilterOptions);\n        if (usePredefinedFilterOptions && get(predefinedFilterOptions, 'length')) {\n          const types = A(['object', 'instance']);\n          const allObjects = A(predefinedFilterOptions).every(option => types.includes(typeOf(option)) && option.hasOwnProperty('label') && option.hasOwnProperty('value'));\n          const allPrimitives = A(predefinedFilterOptions).every(option => !types.includes(typeOf(option)));\n          assert('`predefinedFilterOptions` should be an array of objects or primitives and not mixed', allObjects || allPrimitives);\n          if (allPrimitives) {\n            predefinedFilterOptions = predefinedFilterOptions.map(optionStrToObj);\n          }\n          if ('' !== predefinedFilterOptions[0].value) {\n            predefinedFilterOptions = [{value: '', label: ''}, ...predefinedFilterOptions];\n          }\n          set(c, 'filterOptions', usePredefinedFilterOptions ? predefinedFilterOptions : []);\n        }\n        else if (usePredefinedFilterOptions) {\n          // Empty array as predefined filter\n          set(c, 'useFilter', false);\n        }\n        else {\n          if (propertyName) {\n            set(c, 'filterOptions', getFilterOptionsCP(propertyName));\n          }\n        }\n      }\n      return c;\n    }));\n    nColumns.filterBy('propertyName').forEach(column => {\n      let propertyName = get(column, 'propertyName');\n      if (isNone(get(column, 'title'))) {\n        set(column, 'title', propertyNameToTitle(propertyName));\n      }\n    });\n    set(this, 'processedColumns', nColumns);\n\n    // Apply initial sorting\n    set(this, 'sortProperties', A());\n    const filteredOrderedColumns = nColumns.sortBy('sortPrecedence').filter(col => isSortedByDefault(col));\n    filteredOrderedColumns.forEach(column => {\n      self.send('sort', column);\n      const defaultSortedBy = column.sortedBy || column.propertyName;\n      let sortingArgs = [column, defaultSortedBy, column.sortDirection.toLowerCase()];\n      if (get(this, 'multipleColumnsSorting')) {\n        this._multiColumnsSorting(...sortingArgs);\n      }\n      else {\n        this._singleColumnSorting(...sortingArgs);\n      }\n    });\n  },\n\n  /**\n   * Update messages used by widget with custom values provided by user in the <code>customMessages</code>\n   *\n   * @method _setupMessages\n   * @private\n   * @name ModelsTable#_setupMessages\n   */\n  _setupMessages: observer('customMessages', function () {\n    const customIcons = getWithDefault(this, 'customMessages', {});\n    let newMessages = {};\n    assign(newMessages, defaultMessages, customIcons);\n    set(this, 'messages', O.create(newMessages));\n  }),\n\n  /**\n   * Update icons-classes used by widget with custom values provided by user in the <code>customIcons</code>\n   *\n   * @method _setupIcons\n   * @private\n   * @name ModelsTable#_setupIcons\n   */\n  _setupIcons() {\n    const customIcons = getWithDefault(this, 'customIcons', {});\n    let newIcons = {};\n    assign(newIcons, defaultIcons, customIcons);\n    set(this, 'icons', O.create(newIcons));\n  },\n\n  /**\n   * Update css-classes used by widget with custom values provided by user in the <code>customClasses</code>\n   *\n   * @method _setupClasses\n   * @private\n   * @name ModelsTable#_setupClasses\n   */\n  _setupClasses() {\n    const customClasses = getWithDefault(this, 'customClasses', {});\n    let newClasses = {};\n    assign(newClasses, defaultCssClasses, customClasses);\n    set(this, 'classes', O.create(newClasses));\n  },\n\n  /**\n   * Provide backward compatibility with <code>pageSizeValues</code> equal to an array with numbers and not objects\n   * <code>pageSizeValues</code> is live as is, <code>pageSizeOptions</code> is used in the templates\n   *\n   * @private\n   * @name ModelsTable#_setupPageSizeOptions\n   */\n  _setupPageSizeOptions() {\n    let pageSizeOptions = get(this, 'pageSizeValues').map(optionStrToObj);\n    set(this, 'pageSizeOptions', pageSizeOptions);\n  },\n\n  /**\n   * Set <code>sortProperties</code> when single-column sorting is used\n   *\n   * @param {ModelsTable~ModelsTableColumn} column\n   * @param {string} sortedBy\n   * @param {string} newSorting 'asc|desc|none'\n   * @method _singleColumnSorting\n   * @private\n   * @name ModelsTable#_singleColumnSorting\n   */\n  _singleColumnSorting(column, sortedBy, newSorting) {\n    get(this, 'processedColumns').setEach('sorting', 'none');\n    set(column, 'sorting', newSorting);\n    set(this, 'sortProperties', 'none' === newSorting ? [] : [`${sortedBy}:${newSorting}`]);\n  },\n\n  /**\n   * Set <code>sortProperties</code> when multi-columns sorting is used\n   *\n   * @param {ModelsTable~ModelsTableColumn} column\n   * @param {string} sortedBy\n   * @param {string} newSorting 'asc|desc|none'\n   * @method _multiColumnsSorting\n   * @private\n   * @name ModelsTable#_multiColumnsSorting\n   */\n  _multiColumnsSorting(column, sortedBy, newSorting) {\n    set(column, 'sorting', newSorting);\n    let sortProperties = get(this, 'sortProperties');\n    let sortPropertiesMap = {};\n    sortProperties.forEach(p => {\n      let [propertyName, order] = p.split(':');\n      sortPropertiesMap[propertyName] = order;\n    });\n    delete sortPropertiesMap[sortedBy];\n\n    let newSortProperties = A([]);\n    keys(sortPropertiesMap).forEach(propertyName => {\n      if (propertyName !== sortedBy) {\n        newSortProperties.pushObject(`${propertyName}:${sortPropertiesMap[propertyName]}`);\n      }\n    });\n    if ('none' !== newSorting) {\n      newSortProperties.pushObject(`${sortedBy}:${newSorting}`);\n    }\n    set(this, 'sortProperties', newSortProperties);\n  },\n\n  /**\n   * send <code>displayDataChangedAction</code>-action when user does sort of filter\n   * action is sent only if <code>sendDisplayDataChangedAction</code> is true (default false)\n   *\n   * @name ModelsTable#userInteractionObserver\n   * @method userInteractionObserver\n   * @private\n   */\n  userInteractionObserver () {\n    run.once(this, this.userInteractionObserverOnce);\n  },\n\n  /**\n   * @private\n   */\n  userInteractionObserverOnce() {\n    if (get(this, 'sendDisplayDataChangedAction')) {\n      let columns = get(this, 'processedColumns');\n      let settings = O.create({\n        sort: get(this, 'sortProperties'),\n        currentPageNumber: get(this, 'currentPageNumber'),\n        pageSize: parseInt(get(this, 'pageSize'), 10),\n        filterString: get(this, 'filterString'),\n        filteredContent: get(this, 'filteredContent'),\n        selectedItems: get(this, '_selectedItems'),\n        expandedRowIndexes: get(this, '_expandedRowIndexes'),\n        columnFilters: {}\n      });\n      columns.forEach(column => {\n        if (!isBlank(get(column, 'filterString'))) {\n          settings.columnFilters[get(column, 'propertyName')] = get(column, 'filterString');\n        }\n      });\n      this.sendAction('displayDataChangedAction', settings);\n    }\n  },\n\n  /**\n   * send <code>columnsVisibilityChangedAction</code>-action when user changes which columns are visible\n   * action is sent only if <code>sendColumnsVisibilityChangedAction</code> is true (default false)\n   */\n  _sendColumnsVisibilityChangedAction() {\n    if (get(this, 'sendColumnsVisibilityChangedAction')) {\n      let columns = get(this, 'processedColumns');\n      let columnsVisibility = columns.map(column => {\n        let options = getProperties(column, 'isHidden', 'mayBeHidden', 'propertyName');\n        options.isHidden = !!options.isHidden;\n        return options;\n      });\n      this.sendAction('columnsVisibilityChangedAction', columnsVisibility);\n    }\n  },\n\n  /**\n   * Force <code>arrangedContent</code> to be updated when <code>sortProperties</code> is changed\n   * Currently \"normal\" <code>Em.computed.sort</code> has issue when sort properties is empty\n   *\n   * @method forceUpdateArrangedContent\n   * @name ModelsTable#forseUpdateArrangedContent\n   * @private\n   */\n  forceUpdateArrangedContent: observer('filteredContent.[]', 'sortProperties.[]', function () {\n    this.notifyPropertyChange('arrangedContent');\n  }),\n\n  /**\n   * Handler for global filter and filter by each column\n   *\n   * @method filteringApplied\n   * @name ModelsTable#filteringApplied\n   * @private\n   */\n  filteringApplied: observer('filterString', 'processedColumns.@each.filterString', function () {\n    set(this, 'currentPageNumber', 1);\n    this.userInteractionObserver();\n  }),\n\n  /**\n   * Handler for <code>pageSize</code> changing\n   *\n   * @method paginationApplied\n   * @name ModelsTable#paginationApplied\n   * @private\n   */\n  paginationApplied: observer('pageSize', function () {\n    set(this, 'currentPageNumber', 1);\n    this.userInteractionObserver();\n  }),\n\n  /**\n   * Collapse open rows when user change page size or moved to the another page\n   *\n   * @method collapseRow\n   * @name ModelsTable#collapseRow\n   * @private\n   */\n  collapseRow: observer('currentPageNumber', 'pageSize', function () {\n    set(this, '_expandedRowIndexes', A([]));\n  }),\n\n  /**\n   * Rebuild the whole table.\n   * This can be called to force a complete re-render of the table.\n   *\n   * @method rebuildTable\n   * @private\n   */\n  rebuildTable() {\n    set(this, 'currentPageNumber', 1);\n    this._clearFilters();\n    this.setup();\n  },\n\n  /**\n   * Clear all filters.\n   *\n   * @method _clearFilters\n   * @private\n   */\n  _clearFilters() {\n    set(this, 'filterString', '');\n    get(this, 'processedColumns').setEach('filterString', '');\n  },\n\n  actions: {\n\n    sendAction () {\n      this.sendAction(...arguments);\n    },\n\n    /**\n     * @param {ModelsTable~ModelsTableColumn} column\n     */\n    toggleHidden (column) {\n      if (get(column, 'mayBeHidden')) {\n        column.toggleProperty('isHidden');\n        this._sendColumnsVisibilityChangedAction();\n      }\n    },\n\n    showAllColumns () {\n      get(this, 'processedColumns').setEach('isHidden', false);\n      this._sendColumnsVisibilityChangedAction();\n    },\n\n    hideAllColumns () {\n      A(get(this, 'processedColumns').filterBy('mayBeHidden')).setEach('isHidden', true);\n      this._sendColumnsVisibilityChangedAction();\n    },\n\n    restoreDefaultVisibility() {\n      get(this, 'processedColumns').forEach(c => {\n        set(c, 'isHidden', !get(c, 'defaultVisible'));\n        this._sendColumnsVisibilityChangedAction();\n      });\n    },\n\n    toggleColumnSet({ showColumns = [], hideOtherColumns, toggleSet = false } = {}) {\n      let columns = get(this, 'processedColumns');\n\n      // If hideOtherColumns is not set, default to true if toggleSet=false, else to false\n      hideOtherColumns = isNone(hideOtherColumns) ? !toggleSet : hideOtherColumns;\n\n      // If showColumns is a function, call it\n      if (typeOf(showColumns) === 'function') {\n        return run(this, showColumns, columns);\n      }\n\n      let setColumns = A([]);\n      let otherColumns = A([]);\n\n      columns.forEach((column) => {\n        let columnId = get(column, 'propertyName');\n\n        if (!columnId || !get(column, 'mayBeHidden')) {\n          return;\n        }\n\n        showColumns = A(showColumns);\n        if (showColumns.includes(columnId)) {\n          setColumns.pushObject(column);\n        } else {\n          otherColumns.pushObject(column);\n        }\n      });\n\n      // By default, all columns should always be set to visible\n      // However, if `toggleSet=true`, then the set should be toggled between visible/hidden\n      // In this case, if one of the set columns is hidden, make them all visible, else hide them\n      let targetVisibility = true;\n      if (toggleSet) {\n        targetVisibility = !!setColumns.findBy('isVisible', false);\n      }\n\n      setColumns.forEach((column) => {\n        let columnId = get(column, 'propertyName');\n        if (showColumns.includes(columnId) && get(column, 'isVisible') !== targetVisibility) {\n          this.send('toggleHidden', column);\n        }\n      });\n\n      if (hideOtherColumns) {\n        otherColumns.forEach((column) => {\n          let columnId = get(column, 'propertyName');\n\n          if (!showColumns.includes(columnId) && get(column, 'isVisible')) {\n            this.send('toggleHidden', column);\n          }\n        });\n      }\n    },\n\n    gotoFirst () {\n      if (!get(this, 'gotoBackEnabled')) {\n        return;\n      }\n      set(this, 'currentPageNumber', 1);\n      this.userInteractionObserver();\n    },\n\n    gotoPrev () {\n      if (!get(this, 'gotoBackEnabled')) {\n        return;\n      }\n      if (get(this, 'currentPageNumber') > 1) {\n        this.decrementProperty('currentPageNumber');\n        this.userInteractionObserver();\n      }\n    },\n\n    gotoNext () {\n      if (!get(this, 'gotoForwardEnabled')) {\n        return;\n      }\n      let currentPageNumber = get(this, 'currentPageNumber');\n      let pageSize = parseInt(get(this, 'pageSize'), 10);\n      let arrangedContentLength = get(this, 'arrangedContent.length');\n      if (arrangedContentLength > pageSize * (currentPageNumber - 1)) {\n        this.incrementProperty('currentPageNumber');\n        this.userInteractionObserver();\n      }\n    },\n\n    gotoLast () {\n      if (!get(this, 'gotoForwardEnabled')) {\n        return;\n      }\n      let pageSize = parseInt(get(this, 'pageSize'), 10);\n      let arrangedContentLength = get(this, 'arrangedContent.length');\n      let pageNumber = arrangedContentLength / pageSize;\n      pageNumber = (0 === pageNumber % 1) ? pageNumber : (Math.floor(pageNumber) + 1);\n      set(this, 'currentPageNumber', pageNumber);\n      this.userInteractionObserver();\n    },\n\n    gotoCustomPage (pageNumber) {\n      set(this, 'currentPageNumber', pageNumber);\n      this.userInteractionObserver();\n    },\n\n    /**\n     * @param {ModelsTable~ModelsTableColumn} column\n     */\n    sort (column) {\n      const sortMap = {\n        none: 'asc',\n        asc: 'desc',\n        desc: 'none'\n      };\n      let sortedBy = get(column, 'sortedBy') || get(column, 'propertyName');\n      if (isNone(sortedBy)) {\n        return;\n      }\n      let currentSorting = get(column, 'sorting');\n      let newSorting = sortMap[currentSorting.toLowerCase()];\n      let sortingArgs = [column, sortedBy, newSorting];\n      if (get(this, 'multipleColumnsSorting')) {\n        this._multiColumnsSorting(...sortingArgs);\n      }\n      else {\n        this._singleColumnSorting(...sortingArgs);\n      }\n      set(this, 'currentPageNumber', 1);\n      this.userInteractionObserver();\n    },\n\n    expandRow(index) {\n      assert(`row index should be numeric`, typeOf(index) === 'number');\n      let multipleExpand = get(this, 'multipleExpand');\n      let expandedRowIndexes = get(this, '_expandedRowIndexes');\n      if (multipleExpand) {\n        expandedRowIndexes.pushObject(index);\n      }\n      else {\n        if (expandedRowIndexes.length === 1) {\n          expandedRowIndexes.clear();\n        }\n        expandedRowIndexes.pushObject(index);\n      }\n      set(this, '_expandedRowIndexes', expandedRowIndexes);\n      this.userInteractionObserver();\n    },\n\n    collapseRow(index) {\n      assert(`row index should be numeric`, typeOf(index) === 'number');\n      let expandedRowIndexes = get(this, '_expandedRowIndexes').without(index);\n      set(this, '_expandedRowIndexes', expandedRowIndexes);\n      this.userInteractionObserver();\n    },\n\n    expandAllRows() {\n      let multipleExpand = get(this, 'multipleExpand');\n      let expandedRowIndexes = get(this, '_expandedRowIndexes');\n      let visibleContentLength = get(this, 'visibleContent.length');\n      if (multipleExpand) {\n        expandedRowIndexes.clear();\n        expandedRowIndexes.pushObjects(generateIndexes(visibleContentLength));\n        this.userInteractionObserver();\n      }\n    },\n\n    collapseAllRows() {\n      get(this, '_expandedRowIndexes').clear();\n      this.userInteractionObserver();\n    },\n\n    /**\n     * Handler for row-click\n     * Toggle <code>selected</code>-state for row\n     * Select only one or multiple rows depends on <code>multipleSelect</code>-value\n     *\n     * @param {number} index\n     * @param {object} dataItem\n     */\n    clickOnRow(index, dataItem) {\n      assert(`row index should be numeric`, typeOf(index) === 'number');\n      if (get(this, 'selectRowOnClick')) {\n        let multipleSelect = get(this, 'multipleSelect');\n        let selectedItems = get(this, '_selectedItems');\n        if (selectedItems.includes(dataItem)) {\n          selectedItems = selectedItems.without(dataItem);\n          set(this, '_selectedItems', selectedItems);\n        }\n        else {\n          if (multipleSelect) {\n            get(this, '_selectedItems').pushObject(dataItem);\n          }\n          else {\n            if(selectedItems.length === 1) {\n              get(this, '_selectedItems').clear();\n            }\n            get(this, '_selectedItems').pushObject(dataItem);\n          }\n        }\n      }\n      this.userInteractionObserver();\n    },\n\n    /**\n     * Clear all column filters and global filter\n     */\n    clearFilters() {\n      this._clearFilters();\n    },\n\n    /**\n     * Dummy action for internal use\n     */\n    emptyAction() {\n      return true;\n    },\n\n    /**\n     * Select/deselect all rows\n     */\n    toggleAllSelection() {\n      let selectedItems = get(this, '_selectedItems');\n      let data = get(this, 'data');\n      if(selectedItems.length === data.get('length')) {\n        get(this, '_selectedItems').clear();\n      }\n      else {\n        set(this, '_selectedItems', A(data.slice()));\n      }\n      this.userInteractionObserver();\n    }\n  }\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/components/models-table.js	(revision )
@@ -1,10 +1,27 @@
-import Ember from 'ember';
-import fmt from '../utils/fmt';
-import assignPoly from '../utils/assign-poly';
+import {assign} from '@ember/polyfills';
+import {on} from '@ember/object/evented';
+import {typeOf, compare, isBlank, isNone} from '@ember/utils';
+import {run} from '@ember/runloop';
+import Component from '@ember/component';
+import {assert, warn} from '@ember/debug';
+import O, {
+  observer,
+  computed,
+  getProperties,
+  setProperties,
+  getWithDefault,
+  set,
+  get
+} from '@ember/object';
+import {capitalize, dasherize} from '@ember/string';
+import jQ from 'jquery';
+import {isArray, A} from '@ember/array';
 import betterCompare from '../utils/better-compare';
 
+import Bootstrap3Theme from '../themes/bootstrap3';
+
 import layout from '../templates/components/models-table';
-import ModelsTableColumn from '../-private/column';
+import ModelsTableColumn from '../utils/column';
 
 /**
  * @typedef {object} groupedHeader
@@ -17,32 +34,6 @@
   keys
 } = Object;
 
-const {
-  get,
-  set,
-  getWithDefault,
-  setProperties,
-  getProperties,
-  computed,
-  observer,
-  isNone,
-  isBlank,
-  A,
-  on,
-  compare,
-  typeOf,
-  run,
-  Component,
-  assert,
-  String: S,
-  Object: O,
-  $: jQ,
-  isArray,
-  Logger: {warn}
-} = Ember;
-
-const assign = Object.assign || Ember.assign || assignPoly; // for Ember 2.4
-
 const NOT_SORTED = -1;
 
 const defaultMessages = {
@@ -57,59 +48,11 @@
   noDataToShow: 'No records to show'
 };
 
-const defaultIcons = {
-  'sort-asc': 'glyphicon glyphicon-triangle-top',
-  'sort-desc': 'glyphicon glyphicon-triangle-bottom',
-  'column-visible': 'glyphicon glyphicon-check',
-  'column-hidden': 'glyphicon glyphicon-unchecked',
-  'nav-first': 'glyphicon glyphicon-chevron-left',
-  'nav-prev': 'glyphicon glyphicon-menu-left',
-  'nav-next': 'glyphicon glyphicon-menu-right',
-  'nav-last': 'glyphicon glyphicon-chevron-right',
-  'caret': 'caret',
-  'expand-row': 'glyphicon glyphicon-plus',
-  'expand-all-rows': 'glyphicon glyphicon-plus',
-  'collapse-row': 'glyphicon glyphicon-minus',
-  'collapse-all-rows': 'glyphicon glyphicon-minus',
-  'select-all-rows': 'glyphicon glyphicon-check',
-  'deselect-all-rows': 'glyphicon glyphicon-unchecked',
-  'select-row': 'glyphicon glyphicon-check',
-  'deselect-row': 'glyphicon glyphicon-unchecked'
-};
-
-const defaultCssClasses = {
-  outerTableWrapper: '',
-  innerTableWrapper: 'inner-table-wrapper',
-  table: 'table table-striped table-bordered table-condensed',
-  globalFilterWrapper: 'pull-left',
-  columnsDropdownWrapper: 'pull-right columns-dropdown',
-  columnsDropdownButtonWrapper: 'btn-group',
-  columnsDropdown: 'dropdown-menu pull-right',
-  theadCell: 'table-header',
-  theadCellNoSorting: 'table-header-no-sorting',
-  theadCellNoFiltering: 'table-header-no-filtering',
-  tfooterWrapper: 'table-footer clearfix',
-  footerSummary: 'table-summary',
-  footerSummaryNumericPagination: 'col-md-4 col-sm-4 col-xs-4',
-  footerSummaryDefaultPagination: 'col-md-5 col-sm-5 col-xs-5',
-  pageSizeWrapper: 'col-md-2 col-sm-2 col-xs-2',
-  pageSizeSelectWrapper: 'pull-right',
-  paginationWrapper: 'table-nav',
-  paginationWrapperNumeric: 'col-md-6 col-sm-6 col-xs-6',
-  paginationWrapperDefault: 'col-md-5 col-sm-5 col-xs-5',
-  buttonDefault: 'btn btn-default',
-  noDataCell: '',
-  collapseRow: 'collapse-row',
-  collapseAllRows: 'collapse-all-rows',
-  expandRow: 'expand-row',
-  expandAllRows: 'expand-all-rows',
-  thead: '',
-  input: 'form-control',
-  clearFilterIcon: 'glyphicon glyphicon-remove-sign form-control-feedback',
-  clearAllFiltersIcon: 'glyphicon glyphicon-remove-circle',
-  globalFilterDropdownWrapper: ''
-};
-
+/**
+ * @ignore
+ * @param {ModelsTableColumn} column
+ * @returns {boolean}
+ */
 function isSortedByDefault(column) {
   return column.sortPrecedence > NOT_SORTED;
 }
@@ -120,6 +63,7 @@
  * @param {string} cellValue value in the table cell
  * @param {string} filterString needed substring
  * @returns {boolean}
+ * @ignore
  */
 function defaultFilter(cellValue, filterString) {
   return -1 !== cellValue.indexOf(filterString);
@@ -129,12 +73,18 @@
  * Convert some string to the human readable one
  *
  * @param {string} name value to convert
- * @return {string}
+ * @returns {string}
+ * @ignore
  */
 function propertyNameToTitle(name) {
-  return S.capitalize(S.dasherize(name).replace(/\-/g, ' '));
+  return capitalize(dasherize(name).replace(/-/g, ' '));
 }
 
+/**
+ * @ignore
+ * @param {string} option
+ * @returns {{value: *, label: *}}
+ */
 function optionStrToObj(option) {
   return {value: option, label: option};
 }
@@ -144,6 +94,10 @@
  * and don't have <code>predefinedFilterOptions</code>
  * <code>filterOptions</code> are calculated like <code>data.mapBy(column.propertyName).uniq()</code>,
  * where data is component's <code>data</code>
+ *
+ * @param {string} propertyName
+ * @returns {object[]}
+ * @ignore
  */
 function getFilterOptionsCP(propertyName) {
   return computed(`data.@each.${propertyName}`, function () {
@@ -162,17 +116,41 @@
   });
 }
 
-function generateIndexes(count) {
-  let ret = new Array(count);
-  for (let i = 0; i < count; i++) {
-    ret.push(i);
-  }
-  return ret;
-}
-
 /**
- * data -> filteredContent -> arrangedContent -> visibleContent
+ * Table-component with pagination, sorting and filtering.
  *
+ * It should be used when whole dataset is already loaded. For server-side pagination, filtering and sorting
+ * [models-table-server-paginated](Components.ModelsTableServerPaginated.html) should be used.
+ *
+ * Basic usage example:
+ *
+ * ```hbs
+ * {{models-table data=model columns=columns}}
+ * ```
+ *
+ * Usage with block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{mt.global-filter}}
+ *   {{mt.columns-dropdown}}
+ *   {{mt.table}}
+ *   {{mt.footer}}
+ * {{/models-table}}
+ * ```
+ *
+ * ModelsTable yields references to the following contextual components:
+ *
+ * * [models-table/global-filter](Components.ModelsTableGlobalFilter.html) - global filter used for table data
+ * * [models-table/columns-dropdown](Components.ModelsTableColumnsDropdown.html) - dropdown with list of options to toggle columns and column-sets visibility
+ * * [models-table/table](Components.ModelsTableTable.html) - table with a data
+ * * [models-table/footer](Components.ModelsTableFooter.html) - summary and pagination
+ *
+ * Check own docs for each component to get detailed info.
+ *
+ * ModelsTable has a lot of options you may configure, but there are two required properties called `data` and `columns`. First one contains data (e.g. list of records from the store). Second one is a list of table's columns (check [models-table-column](Utils.ModelsTableColumn.html) for available options).
+ *
+ * @namespace Components
  * @class ModelsTable
  * @extends Ember.Component
  */
@@ -180,26 +158,29 @@
 
   layout,
 
+  classNames: ['models-table-wrapper'],
+
   /**
-   * Number of records shown on one table-page (size of the <code>visibleContent</code>)
+   * Number of records shown on one table-page
    *
    * @type number
-   * @name ModelsTable#pageSize
+   * @property pageSize
    * @default 10
    */
   pageSize: 10,
 
   /**
-   * @type {number}
-   * @name ModelsTable#currentPageNumber
+   * @type number
+   * @property currentPageNumber
    * @default 1
    */
   currentPageNumber: 1,
 
   /**
-   * @type {string[]}
-   * @name ModelsTable#sortProperties
+   * @type string[]
+   * @property sortProperties
    * @default []
+   * @private
    */
   sortProperties: computed(function() {
     return A([]);
@@ -208,8 +189,8 @@
   /**
    * Determines if multi-columns sorting should be used
    *
-   * @type {boolean}
-   * @name ModelsTable#multipleColumnsSorting
+   * @type boolean
+   * @property multipleColumnsSorting
    * @default false
    */
   multipleColumnsSorting: true,
@@ -217,8 +198,8 @@
   /**
    * Determines if component footer should be shown on the page
    *
-   * @type {boolean}
-   * @name ModelsTable#showComponentFooter
+   * @type boolean
+   * @property showComponentFooter
    * @default true
    */
   showComponentFooter: true,
@@ -226,8 +207,8 @@
   /**
    * Determines if numeric pagination should be used
    *
-   * @type {boolean}
-   * @name ModelsTable#useNumericPagination
+   * @type boolean
+   * @property useNumericPagination
    * @default false
    */
   useNumericPagination: false,
@@ -235,8 +216,8 @@
   /**
    * Determines if columns-dropdown should be shown
    *
-   * @type {boolean}
-   * @name ModelsTable#showColumnsDropdown
+   * @type boolean
+   * @property showColumnsDropdown
    * @default true
    */
   showColumnsDropdown: true,
@@ -244,15 +225,15 @@
   /**
    * Determines if filtering by columns should be available to the user
    *
-   * @type {boolean}
-   * @name ModelsTable#useFilteringByColumns
+   * @type boolean
+   * @property useFilteringByColumns
    * @default true
    */
   useFilteringByColumns: true,
 
   /**
-   * @type {string}
-   * @name ModelsTable#filterString
+   * @type string
+   * @property filterString
    * @default ''
    */
   filterString: '',
@@ -260,18 +241,19 @@
   /**
    * Determines if filtering (global and by column) should ignore case
    *
-   * @type {boolean}
-   * @name ModelsTable#filteringIgnoreCase
+   * @type boolean
+   * @property filteringIgnoreCase
    * @default false
    */
   filteringIgnoreCase: false,
 
   /**
    * Determines if filtering should be done by hidden columns
-   * Notice: after changing this value filtering results will be updated only after filter options are changed
    *
-   * @type {boolean}
-   * @name ModelsTable#doFilteringByHiddenColumns
+   * **Notice:** after changing this value filtering results will be updated only after filter options are changed
+   *
+   * @type boolean
+   * @property doFilteringByHiddenColumns
    * @default true
    */
   doFilteringByHiddenColumns: true,
@@ -279,8 +261,8 @@
   /**
    * Determines if "Global filter"-field should be shown
    *
-   * @type {boolean}
-   * @name ModelsTable#showGlobalFilter
+   * @type boolean
+   * @property showGlobalFilter
    * @default true
    */
   showGlobalFilter: true,
@@ -288,8 +270,8 @@
   /**
    * Determines if focus should be on the "Global filter"-field on component render
    *
-   * @type {boolean}
-   * @name ModelsTable#focusGlobalFilter
+   * @type boolean
+   * @property focusGlobalFilter
    * @default false
    */
   focusGlobalFilter: false,
@@ -299,8 +281,8 @@
    * <code>template</code> are observed)
    * <b>IMPORTANT</b> All filter, sort and visibility options will be dropped to the default values while updating
    *
-   * @type {boolean}
-   * @name ModelsTable#columnsAreUpdateable
+   * @type boolean
+   * @property columnsAreUpdateable
    * @default false
    */
   columnsAreUpdateable: false,
@@ -309,19 +291,32 @@
    * <code>columns</code> fields which are observed to update shown table-columns
    * It is used only if <code>columnsAreUpdateable</code> is <code>true</code>
    *
-   * @type {string[]}
-   * @name ModelsTable#columnFieldsToCheckUpdate
-   * @default ['propertyName', 'template']
+   * @type string[]
+   * @property columnFieldsToCheckUpdate
+   * @default ['propertyName', 'component']
    */
   columnFieldsToCheckUpdate: computed(function() {
-    return A(['propertyName', 'template']);
+    return A(['propertyName', 'component']);
+  }),
+
+  /**
+   * `themeInstance` is an instance of [DefaultTheme](Themes.Default.html) or it's children.
+   * By default `models-table` uses [BootstrapTheme](Themes.Bootstrap.html) instance.
+   *
+   * You may create your own theme-class and set `themeInstance` to it's instance. Check Theme properties you may define in your own theme.
+   *
+   * @type Themes.Default
+   * @property themeInstance
+   */
+  themeInstance: computed(function() {
+    return  Bootstrap3Theme.create();
   }),
 
   /**
    * All table records
    *
-   * @type {Ember.Object[]}
-   * @name ModelsTable#data
+   * @type object[]
+   * @property data
    * @default []
    */
   data: computed(function() {
@@ -329,10 +324,10 @@
   }),
 
   /**
-   * Table columns
+   * Table columns. Check [ModelsTableColumn](Utils.ModelsTableColumn.html) for available properties
    *
-   * @type {ModelsTable~ModelsTableColumn[]}
-   * @name ModelsTable#columns
+   * @type object[]
+   * @property columns
    * @default []
    */
   columns: computed(function() {
@@ -341,9 +336,15 @@
 
   /**
    * Sets of columns that can be toggled together.
+   * Each object should have:
+   *  * `label` (string) - The label for the set. This will be displayed in the columns dropdown.
+   *  * `showColumns` (array|Function) - This should either be an array of `propertyNames` to show, or a function. If it is a function, the function will be called with the `processedColumns` as attribute.
+   *  * `hideOtherColumns` (boolean) -  If this is true (default), all columns not specified in <code>showColumns</code> will be hidden. If this is set to false, other columns will be left at whatever visibility they were before.
+   *  * `toggleSet` (boolean) - If this is true (default is false), the set columns will be shown if one of them is currently hidden,
+   else they will all be hidden. Settings this will result in a default of `hideOtherColumns=false`
    *
-   * @type {Object[]}
-   * @name ModelsTable#columnSets
+   * @type Object[]
+   * @property columnSets
    * @default []
    */
   columnSets: computed(function() {
@@ -351,217 +352,86 @@
   }),
 
   /**
-   * @type {Ember.Object[]}
-   * @name ModelsTable#processedColumns
+   * @type Object[]
+   * @property processedColumns
    * @default []
+   * @private
    */
   processedColumns: computed(function() {
     return A([]);
   }),
 
   /**
-   * @type {Object}
-   * @name ModelsTable#messages
+   * Overrides for messages used in the component.
+   *
+   * @type Object
+   * @property messages
+   * @default {
+   *  searchLabel: 'Search:',
+   *  searchPlaceholder: '',
+   *  'columns-title': 'Columns',
+   *  'columns-showAll': 'Show All',
+   *  'columns-hideAll': 'Hide All',
+   *  'columns-restoreDefaults': 'Restore Defaults',
+   *  tableSummary: 'Show %@ - %@ of %@',
+   *  allColumnsAreHidden: 'All columns are hidden. Use <strong>columns</strong>-dropdown to show some of them',
+   *  noDataToShow: 'No records to show'
+   * }
    */
   messages: computed(function() {
     return O.create({});
   }),
 
   /**
-   * @type {Object}
-   * @name ModelsTable#classes
-   */
-  classes: computed(function() {
-    return O.create({});
-  }),
-
-  /**
-   * @type {Object}
-   * @name ModelsTable#icons
-   */
-  icons: computed(function() {
-    return O.create({});
-  }),
-
-  /**
-   * List of the additional headers
-   * Used to group columns
+   * List of the additional headers. Used to group columns.
    *
-   * @type {groupedHeader[][]}
-   * @name ModelsTable#groupedHeaders
+   * Each object may have such fields:
+   *
+   * * `title` (string) - Header for grouped column
+   * * `colspan` (number) - HTML colspan attr
+   * * `rowspan` (number) - HTML rowspan attr
+   *
+   * @property groupedHeaders
+   * @type groupedHeader[][]
+   * @default []
    */
   groupedHeaders: computed(function() {
     return A([]);
   }),
 
-  /**
-   * Template with First|Prev|Next|Last buttons
-   *
-   * @type {string}
-   * @name ModelsTable#simplePaginationTemplate
-   * @default 'components/models-table/simple-pagination'
-   */
-  simplePaginationTemplate: 'components/models-table/simple-pagination',
-
-  /**
-   * Template with nav buttons
-   *
-   * @type {string}
-   * @name ModelsTable#numericPaginationTemplate
-   * @default 'components/models-table/numeric-pagination'
-   */
-  numericPaginationTemplate: 'components/models-table/numeric-pagination',
-
-  /**
-   * Template with table footer
-   *
-   * @type {string}
-   * @name ModelsTable#tableFooterTemplate
-   * @default 'components/models-table/table-footer'
-   */
-  tableFooterTemplate: 'components/models-table/table-footer',
-
-  /**
-   * Template for component footer
-   *
-   * @type {string}
-   * @name ModelsTable#tfooterTemplate
-   * @default
-   */
-  componentFooterTemplate: 'components/models-table/component-footer',
-
-  /**
-   * Template for page size
-   *
-   * @type {string}
-   * @name ModelsTable#pageSizeTemplate
-   * @default 'components/models-table/table-footer'
-   */
-  pageSizeTemplate: 'components/models-table/page-size',
-
   /**
    * Determines if page size should be shown
    *
-   * @type {boolean}
-   * @name ModelsTable#showPageSize
+   * @type boolean
+   * @property showPageSize
    * @default true
    */
   showPageSize: true,
 
   /**
-   * Template with global filter
-   *
-   * @type {string}
-   * @name ModelsTable#globalFilterTemplate
-   * @default 'components/models-table/global-filter'
-   */
-  globalFilterTemplate: 'components/models-table/global-filter',
-
-  /**
-   * Template with columns dropdown
-   *
-   * @type {string}
-   * @name ModelsTable#columnsDropdownTemplate
-   * @default 'components/models-table/columns-dropdown'
-   */
-  columnsDropdownTemplate: 'components/models-table/columns-dropdown',
-
-  /**
-   * Template with header row for column names
-   *
-   * @type {string}
-   * @name ModelsTable#headerRowSortingTemplate
-   * @default 'components/models-table/header-row-sorting'
-   */
-  headerSortingRowTemplate: 'components/models-table/header-row-sorting',
-
-  /**
-   * Template for sorting icons
-   *
-   * @type {string}
-   * @name ModelsTable#headerSortingIconsTemplate
-   * @default 'components/models-table/header-sorting-icons'
-   */
-  headerSortingIconsTemplate: 'components/models-table/header-sorting-icons',
-
-  /**
-   * Template with header row for column filters
-   *
-   * @type {string}
-   * @name ModelsTable#headerFilteringRowTemplate
-   * @default 'components/models-table/header-row-filtering'
-   */
-  headerFilteringRowTemplate: 'components/models-table/header-row-filtering',
-
-  /**
-   * Template with header rows for columns grouping
-   *
-   * @type {string}
-   * @name ModelsTable#headerFilteringRowTemplate
-   * @default 'components/models-table/header-rows-grouped'
-   */
-  headerGroupedRowsTemplate: 'components/models-table/header-rows-grouped',
-
-  /**
-   * Template for table's row
-   *
-   * @type {string}
-   * @default 'components/models-table/row'
-   * @name ModelsTable#rowTemplate
-   */
-  rowTemplate: 'components/models-table/row',
-
-  /**
-   * Template for expanded row
-   *
-   * @type {string}
-   * @default 'components/models-table/expanded-row'
-   * @name ModelsTable#expandedRowTemplate
-   */
-  expandedRowTemplate: 'components/models-table/expanded-row',
-
-  /**
-   * Template for row with message about no available data
-   *
-   * @type {string}
-   * @default 'components/models-table/no-data'
-   * @name ModelsTable#noDataShowTemplate
-   */
-  noDataShowTemplate: 'components/models-table/no-data',
-
-  /**
-   * Template for row with message about all columns are hidden
-   *
-   * @type {string}
-   * @default 'components/models-table/all-columns-hidden'
-   * @name ModelsTable#allColumnsHiddenTemplate
-   */
-  allColumnsHiddenTemplate: 'components/models-table/all-columns-hidden',
-
-  /**
-   * Indexes of the expanded rows
+   * Expanded row items
    * It's set to the initial value when current page or page size is changed
    *
-   * @type {number[]}
+   * @type object[]
+   * @property _expandedItems
    * @private
-   * @name ModelsTable#_expandedRowIndexes
    */
-  _expandedRowIndexes: null,
+  _expandedItems: null,
 
   /**
    * true - allow to expand more than 1 row
    * false - only 1 row may be expanded in the same time
    *
-   * @type {boolean}
+   * @type boolean
+   * @property multipleExpand
    * @default false
-   * @name ModelsTable#multipleExpand
    */
   multipleExpand: false,
 
   /**
-   * @type {object[]}
+   * @type object[]
+   * @property _selectedItems
    * @private
-   * @name ModelsTable#_selectedItems
    */
   _selectedItems: null,
 
@@ -569,9 +439,9 @@
    * Allow or disallow to select rows on click
    * If `false` - no row can be selected
    *
-   * @type {boolean}
+   * @type boolean
+   * @property selectRowOnClick
    * @default true
-   * @name ModelsTable#selectRowOnClick
    */
   selectRowOnClick: true,
 
@@ -579,18 +449,25 @@
    * Allow or disallow to select multiple rows
    * If `false` - only one row may be selected in the same time
    *
-   * @type {boolean}
+   * @type boolean
+   * @property multipleSelect
    * @default false
-   * @name ModelsTable#multipleSelect
    */
   multipleSelect: false,
 
+  /**
+   * @type string
+   * @property expandedRowComponent
+   * @default ''
+   */
+  expandedRowComponent: '',
+
   /**
    * Action-name sent on user interaction
    *
-   * @type {string}
+   * @type string
+   * @property displayDataChangedAction
    * @default 'displayDataChanged'
-   * @name ModelsTable#displayDataChangedAction
    */
   displayDataChangedAction: 'displayDataChanged',
 
@@ -598,17 +475,19 @@
    * Determines if action on user interaction should be sent
    *
    * @default false
-   * @type {boolean}
-   * @name ModelsTable#sendDisplayDataChangedAction
+   * @property sendDisplayDataChangedAction
+   * @type boolean
    */
   sendDisplayDataChangedAction: false,
 
   /**
    * Action-name sent on change of visible columns
    *
-   * @type {string}
+   * The action will receive an array of objects as parameter, where every object looks like this: `{ propertyName: 'firstName', isHidden: true, mayBeHidden: false }`
+   *
+   * @type string
+   * @property columnsVisibilityChangedAction
    * @default 'columnsVisibilityChanged'
-   * @name ModelsTable#columnsVisibilityChangedAction
    */
   columnsVisibilityChangedAction: 'columnsVisibilityChanged',
 
@@ -616,8 +495,8 @@
    * Determines if action on change of visible columns should be sent
    *
    * @default false
-   * @type {boolean}
-   * @name ModelsTable#sendColumnsVisibilityChangedAction
+   * @property sendColumnsVisibilityChangedAction
+   * @type boolean
    */
   sendColumnsVisibilityChangedAction: false,
 
@@ -626,25 +505,28 @@
    * It's NOT a list of indexes!
    *
    * @default null
-   * @type {object[]|null}
-   * @name ModelsTable#preselectedItems
+   * @property preselectedItems
+   * @type object[]|null
    */
   preselectedItems: null,
 
   /**
    * List of the currently visible columns
    *
-   * @type {Ember.Object[]}
+   * @type Object[]
+   * @property visibleProcessedColumns
    * @default []
-   * @name ModelsTable#visibleProcessedColumns
+   * @private
    */
   visibleProcessedColumns: computed.filterBy('processedColumns', 'isVisible', true),
 
   /**
    * True if all processedColumns are hidden by <code>isHidden</code>
    *
-   * @type {boolean}
-   * @name ModelsTable#allColumnsAreHidden
+   * @type boolean
+   * @property allColumnsAreHidden
+   * @readonly
+   * @private
    */
   allColumnsAreHidden: computed('processedColumns.@each.isHidden', function () {
     const processedColumns = get(this, 'processedColumns');
@@ -652,26 +534,34 @@
   }),
 
   /**
-   * @type {boolean}
+   * @type boolean
+   * @property globalFilterUsed
+   * @readonly
+   * @private
    */
   globalFilterUsed: computed.notEmpty('filterString'),
 
   /**
    * Global filter or filter by any column is used
    *
-   * @type {boolean}
+   * @type boolean
+   * @property anyFilterUsed
+   * @readonly
+   * @private
    */
   anyFilterUsed: computed('globalFilterUsed', 'processedColumns.@each.filterUsed', function () {
     return get(this, 'globalFilterUsed') || get(this, 'processedColumns').isAny('filterUsed');
   }),
 
   /**
-   * True if all processedColumns dosn't use filtering and sorting
+   * True if all processedColumns don't use filtering and sorting
    *
-   * @type {boolean}
-   * @name ModelsTable#noHeaderFilteringAndSorting
+   * @type boolean
+   * @property noHeaderFilteringAndSorting
+   * @readonly
+   * @private
    */
-  noHeaderFilteringAndSorting: computed('processedColumns.@each.useFilter', 'processedColumns.@each.useSorting', function () {
+  noHeaderFilteringAndSorting: computed('processedColumns.@each.{useSorting,useFilter}', function () {
     const processedColumns = get(this, 'processedColumns');
     return processedColumns.isEvery('useFilter', false) && processedColumns.isEvery('useSorting', false);
   }),
@@ -679,8 +569,10 @@
   /**
    * Number of pages
    *
-   * @type {number}
-   * @name ModelsTable#pagesCount
+   * @type number
+   * @property pagesCount
+   * @readonly
+   * @private
    */
   pagesCount: computed('arrangedContent.[]', 'pageSize', function () {
     const pagesCount = get(this, 'arrangedContent.length') / parseInt(get(this, 'pageSize'), 10);
@@ -688,78 +580,10 @@
   }),
 
   /**
-   * List of links to the page
-   * Used if <code>useNumericPagination</code> is true
-   * @typedef {object} visiblePageNumber
-   * @property {boolean} isLink
-   * @property {boolean} isActive
-   * @property {string} label
-   *
-   * @type {visiblePageNumber[]}
-   * @name ModelsTable#visiblePageNumbers
-   */
-  visiblePageNumbers: computed('arrangedContentLength', 'pagesCount', 'currentPageNumber', function () {
-    const {
-      pagesCount,
-      currentPageNumber
-    } = getProperties(this, 'pagesCount', 'currentPageNumber');
-    const notLinkLabel = '...';
-    let groups = []; // array of 8 numbers
-    let labels = A([]);
-    groups[0] = 1;
-    groups[1] = Math.min(1, pagesCount);
-    groups[6] = Math.max(1, pagesCount);
-    groups[7] = pagesCount;
-    groups[3] = Math.max(groups[1] + 1, currentPageNumber - 1);
-    groups[4] = Math.min(groups[6] - 1, currentPageNumber + 1);
-    groups[2] = Math.floor((groups[1] + groups[3]) / 2);
-    groups[5] = Math.floor((groups[4] + groups[6]) / 2);
-
-    for (let n = groups[0]; n <= groups[1]; n++) {
-      labels[n] = n;
-    }
-    const userGroup2 = groups[4] >= groups[3] && ((groups[3] - groups[1]) > 1);
-    if (userGroup2) {
-      labels[groups[2]] = notLinkLabel;
-    }
-    for (let i = groups[3]; i <= groups[4]; i++) {
-      labels[i] = i;
-    }
-    const userGroup5 = groups[4] >= groups[3] && ((groups[6] - groups[4]) > 1);
-    if (userGroup5) {
-      labels[groups[5]] = notLinkLabel;
-    }
-    for (let i = groups[6]; i <= groups[7]; i++) {
-      labels[i] = i;
-    }
-    return A(labels.compact().map(label => ({
-      label: label,
-      isLink: label !== notLinkLabel,
-      isActive: label === currentPageNumber})
-    ));
-  }),
-
-  /**
-   * Are buttons "Back" and "First" enabled
-   *
-   * @type {boolean}
-   * @name ModelsTable#gotoBackEnabled
-   */
-  gotoBackEnabled: computed.gt('currentPageNumber', 1),
-
-  /**
-   * Are buttons "Next" and "Last" enabled
-   *
-   * @type {boolean}
-   * @name ModelsTable#gotoForwardEnabled
-   */
-  gotoForwardEnabled: computed('currentPageNumber', 'pagesCount', function () {
-    return get(this, 'currentPageNumber') < get(this, 'pagesCount');
-  }),
-
-  /**
-   * @type {Ember.Object[]}
-   * @name ModelsTable#filteredContent
+   * @type Object[]
+   * @property filteredContent
+   * @readonly
+   * @private
    */
   filteredContent: computed('filterString', 'data.[]', 'useFilteringByColumns', 'processedColumns.@each.filterString', function () {
     const {
@@ -777,7 +601,7 @@
 
     let _processedColumns = processedColumns;
     if (!doFilteringByHiddenColumns) {
-      _processedColumns = _processedColumns.filterBy('isHidden', false);
+      _processedColumns = A(_processedColumns.filterBy('isHidden', false));
     }
 
     // global search
@@ -825,8 +649,10 @@
   }),
 
   /**
-   * @type {Ember.Object[]}
-   * @name ModelsTable#arrangedContent
+   * @type Object[]
+   * @property arrangedContent
+   * @readonly
+   * @private
    */
   arrangedContent: computed('filteredContent.[]', 'sortProperties.[]', function () {
     const filteredContent = get(this, 'filteredContent');
@@ -854,8 +680,10 @@
   /**
    * Content of the current table page
    *
-   * @type {Ember.Object[]}
-   * @name ModelsTable#visibleContent
+   * @type Object[]
+   * @property visibleContent
+   * @readonly
+   * @private
    */
   visibleContent: computed('arrangedContent.[]', 'pageSize', 'currentPageNumber', function () {
     let {
@@ -871,42 +699,34 @@
     return A(arrangedContent.slice(startIndex, startIndex + pageSize));
   }),
 
-  /**
-   * Real table summary
-   *
-   * @type {string}
-   * @name ModelsTable#summary
-   */
-  summary: computed('firstIndex', 'lastIndex', 'arrangedContentLength', 'messages.tableSummary', function () {
-    const {
-      arrangedContentLength,
-      firstIndex,
-      lastIndex
-    } = getProperties(this, 'arrangedContentLength', 'firstIndex', 'lastIndex');
-    return fmt(get(this, 'messages.tableSummary'), firstIndex, lastIndex, arrangedContentLength);
-  }),
-
   /**
    * Is user on the last page
    *
-   * @type {boolean}
-   * @name ModelsTable#isLastPage
+   * @type boolean
+   * @property isLastPage
+   * @readonly
+   * @private
    */
-  isLastPage: computed.not('gotoForwardEnabled'),
+  isLastPage: computed('currentPageNumber', 'pagesCount', function () {
+    return get(this, 'currentPageNumber') >= get(this, 'pagesCount');
+  }),
 
   /**
    * Alias to <code>arrangedContent.length</code>
    *
-   * @type {number}
-   * @name ModelsTable#arrangedContentLength
+   * @type number
+   * @property arrangedContentLength
+   * @readonly
+   * @private
    */
   arrangedContentLength: computed.alias('arrangedContent.length'),
 
   /**
    * Index of the first currently shown record
    *
-   * @type {number}
-   * @name ModelsTable#firstIndex
+   * @type number
+   * @property firstIndex
+   * @private
    */
   firstIndex: computed('arrangedContentLength' ,'pageSize', 'currentPageNumber', function () {
     const {
@@ -920,8 +740,10 @@
   /**
    * Index of the last shown record
    *
-   * @type {number}
-   * @name ModelsTable#lastIndex
+   * @type number
+   * @property lastIndex
+   * @readonly
+   * @private
    */
   lastIndex: computed('isLastPage', 'arrangedContentLength', 'currentPageNumber', 'pageSize', function () {
     const {
@@ -937,9 +759,9 @@
    * List of possible <code>pageSize</code> values
    * Used to change size of <code>visibleContent</code>
    *
-   * @type {number[]}
+   * @type number[]
    * @default [10, 25, 50]
-   * @name ModelsTable#pageSizeValues
+   * @property pageSizeValues
    */
   pageSizeValues: computed(function() {
     return A([10, 25, 50]);
@@ -950,7 +772,8 @@
    * It's mapped from <code>pageSizeValues</code>
    * This value should not be set manually!
    *
-   * @type {{value: string|number, label: string|number}}
+   * @type {value: string|number, label: string|number}
+   * @property pageSizeOptions
    * @default []
    * @private
    */
@@ -962,7 +785,9 @@
    * These are options for the columns dropdown.
    * By default, the "Show All", 'Hide All" and "Restore Defaults" buttons are displayed.
    *
-   * @type {{ showAll: boolean, hideAll: boolean, restoreDefaults: boolean, columnSets: object[] }}
+   * @type { showAll: boolean, hideAll: boolean, restoreDefaults: boolean, columnSets: object[] }
+   * @property columnDropdownOptions
+   * @readonly
    * @private
    */
   columnDropdownOptions: computed('columnSets.{label,showColumns,hideOtherColumns}', function() {
@@ -978,7 +803,7 @@
    * Show first page if for some reasons there is no content for current page, but table data exists
    *
    * @method visibleContentObserver
-   * @name ModelsTable#visibleContentObserver
+   * @returns {undefined}
    * @private
    */
   visibleContentObserver() {
@@ -986,6 +811,8 @@
   },
 
   /**
+   * @method visibleContentObserverOnce
+   * @returns {undefined}
    * @private
    */
   visibleContentObserverOnce() {
@@ -999,7 +826,7 @@
 
   /**
    * @method contentChangedAfterPolling
-   * @name ModelsTable#contentChangedAfterPolling
+   * @returns {undefined}
    * @private
    */
   contentChangedAfterPolling () {
@@ -1007,6 +834,8 @@
   },
 
   /**
+   * @method contentChangedAfterPollingOnce
+   * @returns {undefined}
    * @private
    */
   contentChangedAfterPollingOnce () {
@@ -1016,21 +845,18 @@
 
   /**
    * Component init
+   *
    * Set visibility and filtering attributes for each column
-   * Update messages used by table with user-provided messages (@see messages)
-   * Update icons used by table with user-provided icons (@see icons)
-   * Update classes used by table with user-provided css-classes (@see classes)
+   * Update messages used by table with user-provided messages (@see {@link messages})
    *
    * @method setup
-   * @name ModelsTable#setup
+   * @returns {undefined}
    */
   setup: on('init', function() {
     this._setupSelectedRows();
     this._setupExpandedRows();
     this._setupColumns();
     this._setupMessages();
-    this._setupIcons();
-    this._setupClasses();
     this._setupPageSizeOptions();
 
     if (get(this, 'columnsAreUpdateable')) {
@@ -1038,11 +864,14 @@
       assert('`columnFieldsToCheckUpdate` should be an array of strings', 'array' === typeOf(columnFieldsToCheckUpdate));
       columnFieldsToCheckUpdate.forEach(propertyName => this.addObserver(`columns.@each.${propertyName}`, this, this._setupColumnsOnce));
     }
+    this.addObserver('processedColumns.@each.filterString', this, this.filteringApplied);
     this.addObserver('visibleContent.length', this, this.visibleContentObserver);
   }),
 
   /**
    * Recalculate processedColumns when the columns attr changes
+   *
+   * @method updateColumns
    */
   updateColumns: on('didReceiveAttrs', function() {
     if (get(this, 'columnsAreUpdateable')) {
@@ -1054,7 +883,6 @@
    * Focus on "Global filter" on component render
    *
    * @method focus
-   * @name ModelsTable#focus
    */
   focus: on('didInsertElement', function () {
     if (get(this, 'showGlobalFilter') && get(this, 'focusGlobalFilter')) {
@@ -1066,7 +894,9 @@
    * Preselect table rows if `preselectedItems` is provided
    * `multipleSelected` may be set `true` if `preselectedItems` has more than 1 item
    *
-   * @private
+   * @private _setupSelectedRows
+   * @returns {undefined}
+   * @method
    */
   _setupSelectedRows() {
     set(this, '_selectedItems', A([]));
@@ -1074,33 +904,51 @@
     if (isArray(preselectedItems)) {
       set(this, '_selectedItems', A(preselectedItems));
       if (preselectedItems.length > 1 && !get(this, 'multipleSelected')) {
-        warn('`multipleSelected` is set `true`, because you have provided multiple `preselectedItems`.');
+        warn('`multipleSelected` is set `true`, because you have provided multiple `preselectedItems`.', false, {id: '#multipleSelected_autoset'});
         set(this, 'multipleSelected', true);
       }
     }
   },
 
+  /**
+   * @method _setupExpandedRows
+   * @returns {undefined}
+   * @private
+   */
   _setupExpandedRows() {
-    set(this, '_expandedRowIndexes', A([]));
+    set(this, '_expandedItems', A([]));
   },
 
   /**
    * Wrapper for <code>_setupColumns</code> to call it only once when observer is fired
    *
    * @method _setupColumnsOnce
-   * @name ModelsTable#_setupColumnsOnce
+   * @returns {undefined}
    * @private
    */
   _setupColumnsOnce() {
     run.once(this, this._setupColumns);
   },
 
+  /**
+   * Create a column.
+   * This can be overwritten if you need to use your own column object.
+   *
+   * @method _createColumn
+   * @param {object} options
+   * @returns {Object}
+   * @private
+   */
+  _createColumn(options) {
+    return ModelsTableColumn.create(options);
+  },
+
   /**
    * Create new properties for <code>columns</code> (filterString, useFilter, isVisible, defaultVisible)
    *
    * @method _setupColumns
+   * @returns {undefined}
    * @private
-   * @name ModelsTable#_setupColumns
    */
   _setupColumns () {
     let self = this;
@@ -1109,15 +957,11 @@
       let filterFunction = get(column, 'filterFunction');
       filterFunction = 'function' === typeOf(filterFunction) ? filterFunction : defaultFilter;
 
-      let c = ModelsTableColumn.create(column);
+      let c = this._createColumn(column);
       let propertyName = get(c, 'propertyName');
-      let sortedBy = get(c, 'sortedBy');
-      let filteredBy = get(c, 'filteredBy');
       setProperties(c, {
         data: get(this, 'data'),
         filterString: get(c, 'filterString') || '',
-        useFilter: !isNone(filteredBy || propertyName) && !get(c, 'disableFiltering'),
-        useSorting: !isNone(sortedBy || propertyName) && !get(c, 'disableSorting'),
         originalDefinition: column
       });
 
@@ -1194,50 +1038,23 @@
    * Update messages used by widget with custom values provided by user in the <code>customMessages</code>
    *
    * @method _setupMessages
+   * @returns {undefined}
    * @private
-   * @name ModelsTable#_setupMessages
    */
   _setupMessages: observer('customMessages', function () {
-    const customIcons = getWithDefault(this, 'customMessages', {});
+    const customMessages = getWithDefault(this, 'customMessages', {});
     let newMessages = {};
-    assign(newMessages, defaultMessages, customIcons);
+    assign(newMessages, defaultMessages, customMessages);
     set(this, 'messages', O.create(newMessages));
   }),
 
-  /**
-   * Update icons-classes used by widget with custom values provided by user in the <code>customIcons</code>
-   *
-   * @method _setupIcons
-   * @private
-   * @name ModelsTable#_setupIcons
-   */
-  _setupIcons() {
-    const customIcons = getWithDefault(this, 'customIcons', {});
-    let newIcons = {};
-    assign(newIcons, defaultIcons, customIcons);
-    set(this, 'icons', O.create(newIcons));
-  },
-
-  /**
-   * Update css-classes used by widget with custom values provided by user in the <code>customClasses</code>
-   *
-   * @method _setupClasses
-   * @private
-   * @name ModelsTable#_setupClasses
-   */
-  _setupClasses() {
-    const customClasses = getWithDefault(this, 'customClasses', {});
-    let newClasses = {};
-    assign(newClasses, defaultCssClasses, customClasses);
-    set(this, 'classes', O.create(newClasses));
-  },
-
   /**
    * Provide backward compatibility with <code>pageSizeValues</code> equal to an array with numbers and not objects
    * <code>pageSizeValues</code> is live as is, <code>pageSizeOptions</code> is used in the templates
    *
+   * @method _setupPageSizeOptions
+   * @returns {undefined}
    * @private
-   * @name ModelsTable#_setupPageSizeOptions
    */
   _setupPageSizeOptions() {
     let pageSizeOptions = get(this, 'pageSizeValues').map(optionStrToObj);
@@ -1247,12 +1064,12 @@
   /**
    * Set <code>sortProperties</code> when single-column sorting is used
    *
-   * @param {ModelsTable~ModelsTableColumn} column
+   * @param {ModelsTableColumn} column
    * @param {string} sortedBy
    * @param {string} newSorting 'asc|desc|none'
    * @method _singleColumnSorting
+   * @returns {undefined}
    * @private
-   * @name ModelsTable#_singleColumnSorting
    */
   _singleColumnSorting(column, sortedBy, newSorting) {
     get(this, 'processedColumns').setEach('sorting', 'none');
@@ -1263,12 +1080,12 @@
   /**
    * Set <code>sortProperties</code> when multi-columns sorting is used
    *
-   * @param {ModelsTable~ModelsTableColumn} column
+   * @param {ModelsTableColumn} column
    * @param {string} sortedBy
    * @param {string} newSorting 'asc|desc|none'
    * @method _multiColumnsSorting
+   * @returns {undefined}
    * @private
-   * @name ModelsTable#_multiColumnsSorting
    */
   _multiColumnsSorting(column, sortedBy, newSorting) {
     set(column, 'sorting', newSorting);
@@ -1296,8 +1113,8 @@
    * send <code>displayDataChangedAction</code>-action when user does sort of filter
    * action is sent only if <code>sendDisplayDataChangedAction</code> is true (default false)
    *
-   * @name ModelsTable#userInteractionObserver
    * @method userInteractionObserver
+   * @returns {undefined}
    * @private
    */
   userInteractionObserver () {
@@ -1305,6 +1122,8 @@
   },
 
   /**
+   * @method userInteractionObserverOnce
+   * @returns {undefined}
    * @private
    */
   userInteractionObserverOnce() {
@@ -1317,7 +1136,7 @@
         filterString: get(this, 'filterString'),
         filteredContent: get(this, 'filteredContent'),
         selectedItems: get(this, '_selectedItems'),
-        expandedRowIndexes: get(this, '_expandedRowIndexes'),
+        expandedItems: get(this, '_expandedItems'),
         columnFilters: {}
       });
       columns.forEach(column => {
@@ -1332,6 +1151,10 @@
   /**
    * send <code>columnsVisibilityChangedAction</code>-action when user changes which columns are visible
    * action is sent only if <code>sendColumnsVisibilityChangedAction</code> is true (default false)
+   *
+   * @returns {undefined}
+   * @method _sendColumnsVisibilityChangedAction
+   * @private
    */
   _sendColumnsVisibilityChangedAction() {
     if (get(this, 'sendColumnsVisibilityChangedAction')) {
@@ -1350,7 +1173,7 @@
    * Currently "normal" <code>Em.computed.sort</code> has issue when sort properties is empty
    *
    * @method forceUpdateArrangedContent
-   * @name ModelsTable#forseUpdateArrangedContent
+   * @returns {undefined}
    * @private
    */
   forceUpdateArrangedContent: observer('filteredContent.[]', 'sortProperties.[]', function () {
@@ -1361,10 +1184,10 @@
    * Handler for global filter and filter by each column
    *
    * @method filteringApplied
-   * @name ModelsTable#filteringApplied
+   * @returns {undefined}
    * @private
    */
-  filteringApplied: observer('filterString', 'processedColumns.@each.filterString', function () {
+  filteringApplied: observer('filterString', function () {
     set(this, 'currentPageNumber', 1);
     this.userInteractionObserver();
   }),
@@ -1373,7 +1196,7 @@
    * Handler for <code>pageSize</code> changing
    *
    * @method paginationApplied
-   * @name ModelsTable#paginationApplied
+   * @returns {undefined}
    * @private
    */
   paginationApplied: observer('pageSize', function () {
@@ -1384,12 +1207,12 @@
   /**
    * Collapse open rows when user change page size or moved to the another page
    *
-   * @method collapseRow
-   * @name ModelsTable#collapseRow
+   * @method collapseRowOnNavigate
+   * @returns {undefined}
    * @private
    */
-  collapseRow: observer('currentPageNumber', 'pageSize', function () {
-    set(this, '_expandedRowIndexes', A([]));
+  collapseRowOnNavigate: observer('currentPageNumber', 'pageSize', function () {
+    set(this, '_expandedItems', A([]));
   }),
 
   /**
@@ -1397,7 +1220,7 @@
    * This can be called to force a complete re-render of the table.
    *
    * @method rebuildTable
-   * @private
+   * @returns {undefined}
    */
   rebuildTable() {
     set(this, 'currentPageNumber', 1);
@@ -1409,6 +1232,7 @@
    * Clear all filters.
    *
    * @method _clearFilters
+   * @returns {undefined}
    * @private
    */
   _clearFilters() {
@@ -1416,14 +1240,23 @@
     get(this, 'processedColumns').setEach('filterString', '');
   },
 
+  /**
+   * @type Object
+   */
   actions: {
 
+    /**
+     * @method actions.sendAction
+     * @returns {undefined}
+     */
     sendAction () {
       this.sendAction(...arguments);
     },
 
     /**
-     * @param {ModelsTable~ModelsTableColumn} column
+     * @method actions.toggleHidden
+     * @param {ModelsTableColumn} column
+     * @returns {undefined}
      */
     toggleHidden (column) {
       if (get(column, 'mayBeHidden')) {
@@ -1432,16 +1265,28 @@
       }
     },
 
+    /**
+     * @method actions.showAllColumns
+     * @returns {undefined}
+     */
     showAllColumns () {
       get(this, 'processedColumns').setEach('isHidden', false);
       this._sendColumnsVisibilityChangedAction();
     },
 
+    /**
+     * @method actions.hideAllColumns
+     * @returns {undefined}
+     */
     hideAllColumns () {
       A(get(this, 'processedColumns').filterBy('mayBeHidden')).setEach('isHidden', true);
       this._sendColumnsVisibilityChangedAction();
     },
 
+    /**
+     * @method actions.restoreDefaultVisibility
+     * @returns {undefined}
+     */
     restoreDefaultVisibility() {
       get(this, 'processedColumns').forEach(c => {
         set(c, 'isHidden', !get(c, 'defaultVisible'));
@@ -1449,6 +1294,10 @@
       });
     },
 
+    /**
+     * @method actions.toggleColumnSet
+     * @returns {undefined}
+     */
     toggleColumnSet({ showColumns = [], hideOtherColumns, toggleSet = false } = {}) {
       let columns = get(this, 'processedColumns');
 
@@ -1504,56 +1353,20 @@
       }
     },
 
-    gotoFirst () {
-      if (!get(this, 'gotoBackEnabled')) {
-        return;
-      }
-      set(this, 'currentPageNumber', 1);
-      this.userInteractionObserver();
-    },
-
-    gotoPrev () {
-      if (!get(this, 'gotoBackEnabled')) {
-        return;
-      }
-      if (get(this, 'currentPageNumber') > 1) {
-        this.decrementProperty('currentPageNumber');
-        this.userInteractionObserver();
-      }
-    },
-
-    gotoNext () {
-      if (!get(this, 'gotoForwardEnabled')) {
-        return;
-      }
-      let currentPageNumber = get(this, 'currentPageNumber');
-      let pageSize = parseInt(get(this, 'pageSize'), 10);
-      let arrangedContentLength = get(this, 'arrangedContent.length');
-      if (arrangedContentLength > pageSize * (currentPageNumber - 1)) {
-        this.incrementProperty('currentPageNumber');
-        this.userInteractionObserver();
-      }
-    },
-
-    gotoLast () {
-      if (!get(this, 'gotoForwardEnabled')) {
-        return;
-      }
-      let pageSize = parseInt(get(this, 'pageSize'), 10);
-      let arrangedContentLength = get(this, 'arrangedContent.length');
-      let pageNumber = arrangedContentLength / pageSize;
-      pageNumber = (0 === pageNumber % 1) ? pageNumber : (Math.floor(pageNumber) + 1);
-      set(this, 'currentPageNumber', pageNumber);
-      this.userInteractionObserver();
-    },
-
+    /**
+     * @param {number} pageNumber
+     * @method actions.gotoCustomPage
+     * @returns {undefined}
+     */
     gotoCustomPage (pageNumber) {
       set(this, 'currentPageNumber', pageNumber);
       this.userInteractionObserver();
     },
 
     /**
-     * @param {ModelsTable~ModelsTableColumn} column
+     * @method actions.sort
+     * @param {ModelsTableColumn} column
+     * @returns {undefined}
      */
     sort (column) {
       const sortMap = {
@@ -1562,7 +1375,7 @@
         desc: 'none'
       };
       let sortedBy = get(column, 'sortedBy') || get(column, 'propertyName');
-      if (isNone(sortedBy)) {
+      if (!sortedBy) {
         return;
       }
       let currentSorting = get(column, 'sorting');
@@ -1578,43 +1391,61 @@
       this.userInteractionObserver();
     },
 
-    expandRow(index) {
+    /**
+     * @param {number} index
+     * @param {object} dataItem
+     * @returns {undefined}
+     * @method actions.expandRow
+     */
+    expandRow(index, dataItem) {
       assert(`row index should be numeric`, typeOf(index) === 'number');
       let multipleExpand = get(this, 'multipleExpand');
-      let expandedRowIndexes = get(this, '_expandedRowIndexes');
+      let expandedItems = get(this, '_expandedItems');
       if (multipleExpand) {
-        expandedRowIndexes.pushObject(index);
+        expandedItems.pushObject(dataItem);
       }
       else {
-        if (expandedRowIndexes.length === 1) {
-          expandedRowIndexes.clear();
+        if (expandedItems.length === 1) {
+          expandedItems.clear();
         }
-        expandedRowIndexes.pushObject(index);
+        expandedItems.pushObject(dataItem);
       }
-      set(this, '_expandedRowIndexes', expandedRowIndexes);
+      set(this, '_expandedItems', expandedItems);
       this.userInteractionObserver();
     },
 
-    collapseRow(index) {
+    /**
+     * @param {number} index
+     * @param {object} dataItem
+     * @returns {undefined}
+     * @method actions.collapseRow
+     */
+    collapseRow(index, dataItem) {
       assert(`row index should be numeric`, typeOf(index) === 'number');
-      let expandedRowIndexes = get(this, '_expandedRowIndexes').without(index);
-      set(this, '_expandedRowIndexes', expandedRowIndexes);
+      let expandedItems = get(this, '_expandedItems').without(dataItem);
+      set(this, '_expandedItems', expandedItems);
       this.userInteractionObserver();
     },
 
+    /**
+     * @method actions.expandAllRows
+     * @returns {undefined}
+     */
     expandAllRows() {
       let multipleExpand = get(this, 'multipleExpand');
-      let expandedRowIndexes = get(this, '_expandedRowIndexes');
-      let visibleContentLength = get(this, 'visibleContent.length');
+      let visibleContent = get(this, 'visibleContent');
       if (multipleExpand) {
-        expandedRowIndexes.clear();
-        expandedRowIndexes.pushObjects(generateIndexes(visibleContentLength));
+        set(this, '_expandedItems', A(visibleContent.slice()));
         this.userInteractionObserver();
       }
     },
 
+    /**
+     * @method actions.collapseAllRows
+     * @returns {undefined}
+     */
     collapseAllRows() {
-      get(this, '_expandedRowIndexes').clear();
+      set(this, '_expandedItems', A());
       this.userInteractionObserver();
     },
 
@@ -1625,6 +1456,8 @@
      *
      * @param {number} index
      * @param {object} dataItem
+     * @returns {undefined}
+     * @method actions.clickOnRow
      */
     clickOnRow(index, dataItem) {
       assert(`row index should be numeric`, typeOf(index) === 'number');
@@ -1652,6 +1485,8 @@
 
     /**
      * Clear all column filters and global filter
+     * @returns {undefined}
+     * @method actions.clearFilters
      */
     clearFilters() {
       this._clearFilters();
@@ -1659,6 +1494,8 @@
 
     /**
      * Dummy action for internal use
+     * @method actions.emptyAction
+     * @returns {undefined}
      */
     emptyAction() {
       return true;
@@ -1666,6 +1503,8 @@
 
     /**
      * Select/deselect all rows
+     * @method actions.toggleAllSelection
+     * @returns {undefined}
      */
     toggleAllSelection() {
       let selectedItems = get(this, '_selectedItems');
Index: tests/dummy/app/routes/examples.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {String: S} = Ember;\n\nexport default Ember.Route.extend({\n\n  setupController(controller, model) {\n    var names = this.get('router.currentState.routerJs.recognizer.names');\n    var thisName = this.get('routeName');\n    var routes = Object.keys(names).filter(k => {\n      var segments = names[k].segments;\n      var segment = segments[1];\n      if (!segment) {\n        return false;\n      }\n      var rName = segment.value;\n      return rName === thisName && k !== rName && k.indexOf('loading') === -1 && k.indexOf('error') === -1 && k.indexOf('index') === -1;\n    });\n    routes = routes.map(r => {\n      var name = r.replace(`${thisName}.`, '');\n      name = S.capitalize(S.dasherize(name).replace(/\\-/g, ' '));\n      return {name: name, route: r};\n    });\n    controller.set('routes', routes);\n    this._super(controller, model);\n  }\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/routes/examples.js	(revision )
@@ -1,24 +1,29 @@
-import Ember from 'ember';
+import Route from '@ember/routing/route';
+import { capitalize } from '@ember/string';
+import { dasherize } from '@ember/string';
 
-const {String: S} = Ember;
-
-export default Ember.Route.extend({
+export default Route.extend({
 
   setupController(controller, model) {
-    var names = this.get('router.currentState.routerJs.recognizer.names');
-    var thisName = this.get('routeName');
-    var routes = Object.keys(names).filter(k => {
-      var segments = names[k].segments;
-      var segment = segments[1];
+    const names = this.get('router.currentState.routerJs.recognizer.names');
+    const thisName = this.get('routeName');
+    let routes = Object.keys(names).filter(k => {
+      let segments = names[k].segments;
+      let segment = segments[1];
       if (!segment) {
         return false;
       }
-      var rName = segment.value;
-      return rName === thisName && k !== rName && k.indexOf('loading') === -1 && k.indexOf('error') === -1 && k.indexOf('index') === -1;
+      const rName = segment.value;
+      return rName === thisName &&
+        k !== rName &&
+        k.indexOf('loading') === -1 &&
+        k.indexOf('error') === -1 &&
+        k.indexOf('index') === -1 &&
+        k !== 'examples.example';
     });
     routes = routes.map(r => {
-      var name = r.replace(`${thisName}.`, '');
-      name = S.capitalize(S.dasherize(name).replace(/\-/g, ' '));
+      let name = r.replace(`${thisName}.`, '');
+      name = capitalize(dasherize(name).replace(/-/g, ' '));
       return {name: name, route: r};
     });
     controller.set('routes', routes);
Index: app/components/models-table/footer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/footer.js	(revision )
+++ app/components/models-table/footer.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/footer';
Index: addon/templates/components/models-table/row-expand.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/row-expand.hbs	(revision )
+++ addon/templates/components/models-table/row-expand.hbs	(revision )
@@ -0,0 +1,27 @@
+<td colspan="{{visibleProcessedColumns.length}}">
+  {{#if hasBlock}}
+    {{yield
+      (hash
+        expandedRowComponent=expandedRowComponent
+        record=record
+        processedColumns=processedColumns
+        messages=messages
+        index=index
+        clickOnRow=clickOnRow
+        sendAction=sendAction
+        themeInstance=themeInstance
+      )
+    }}
+  {{else}}
+    {{component
+      expandedRowComponent
+      record=record
+      processedColumns=processedColumns
+      messages=messages
+      index=index
+      clickOnRow=clickOnRow
+      sendAction=sendAction
+      themeInstance=themeInstance
+    }}
+  {{/if}}
+</td>
\ No newline at end of file
Index: tests/.eslintrc.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module.exports = {\n  env: {\n    embertest: true\n  },\n  globals: {\n    server: true\n  }\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/.eslintrc.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/.eslintrc.js	(revision )
@@ -3,6 +3,7 @@
     embertest: true
   },
   globals: {
-    server: true
+    server: true,
+    Prism: true
   }
 };
Index: tests/dummy/app/templates/examples/custom-column-classes.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    <p>Setting the <code>className</code> property on a column adds a css class to each cell in a column. This can be useful for styling columns.</p>\n    {{models-table data=model columns=columns}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n      <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n        data=model\n        columns=columns&rbrace;&rbrace;</code></pre>\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n  </div>\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/custom-column-classes.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/custom-column-classes.hbs	(revision )
@@ -1,17 +1,15 @@
+<h4>Custom classes for columns</h4>
+<p class="alert alert-info">Setting the <code>className</code> property on a column adds a css class to each cell in a column. This can be useful for styling columns.</p>
+{{models-table data=data columns=columns}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    <p>Setting the <code>className</code> property on a column adds a css class to each cell in a column. This can be useful for styling columns.</p>
-    {{models-table data=model columns=columns}}
-  </div>
-  <div class="col-md-4">
+  <div class="col-md-6">
     <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns&rbrace;&rbrace;</code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
+  columns=columns&rbrace;&rbrace;</code></pre>
+  </div>
+  <div class="col-md-6">
+    <p><code>columns</code></p>
+    <pre><code class="language-javascript">{{to-string this 'columns'}}</code></pre>
   </div>
 </div>
\ No newline at end of file
Index: tests/dummy/app/templates/custom/delete.hbs
===================================================================
--- tests/dummy/app/templates/custom/delete.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/delete.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<button {{action 'sendAction' 'delete' record}}>Delete</button>
Index: tests/dummy/app/templates/components/filter-cell-select.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"{{if column.filterUsed \"has-feedback\"}}\">\n  {{models-select options=filterOptions cssPropertyName=column.cssPropertyName value=column.filterString class=(concat classes.input \" changeFilterForColumn\")}}\n  {{#if column.filterUsed}}\n    <span onclick={{action (mut column.filterString) \"\"}} class=\"clearFilterIcon {{classes.clearFilterIcon}} \"></span>\n  {{/if}}\n</div>\n{{yield}}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/filter-cell-select.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/components/filter-cell-select.hbs	(revision )
@@ -1,5 +1,5 @@
 <div class="{{if column.filterUsed "has-feedback"}}">
-  {{models-select options=filterOptions cssPropertyName=column.cssPropertyName value=column.filterString class=(concat classes.input " changeFilterForColumn")}}
+  {{models-table/select options=filterOptions cssPropertyName=column.cssPropertyName value=column.filterString class=(concat classes.input " changeFilterForColumn")}}
   {{#if column.filterUsed}}
     <span onclick={{action (mut column.filterString) ""}} class="clearFilterIcon {{classes.clearFilterIcon}} "></span>
   {{/if}}
Index: tests/dummy/public/assets/prism.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/public/assets/prism.js	(revision )
+++ tests/dummy/public/assets/prism.js	(revision )
@@ -0,0 +1,7 @@
+/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+handlebars */
+var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\blang(?:uage)?-(\w+)\b/i,t=0,n=_self.Prism={manual:_self.Prism&&_self.Prism.manual,util:{encode:function(e){return e instanceof a?new a(e.type,n.util.encode(e.content),e.alias):"Array"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function(e){var t=n.util.type(e);switch(t){case"Object":var a={};for(var r in e)e.hasOwnProperty(r)&&(a[r]=n.util.clone(e[r]));return a;case"Array":return e.map(function(e){return n.util.clone(e)})}return e}},languages:{extend:function(e,t){var a=n.util.clone(n.languages[e]);for(var r in t)a[r]=t[r];return a},insertBefore:function(e,t,a,r){r=r||n.languages;var i=r[e];if(2==arguments.length){a=arguments[1];for(var l in a)a.hasOwnProperty(l)&&(i[l]=a[l]);return i}var o={};for(var s in i)if(i.hasOwnProperty(s)){if(s==t)for(var l in a)a.hasOwnProperty(l)&&(o[l]=a[l]);o[s]=i[s]}return n.languages.DFS(n.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=o)}),r[e]=o},DFS:function(e,t,a,r){r=r||{};for(var i in e)e.hasOwnProperty(i)&&(t.call(e,i,e[i],a||i),"Object"!==n.util.type(e[i])||r[n.util.objId(e[i])]?"Array"!==n.util.type(e[i])||r[n.util.objId(e[i])]||(r[n.util.objId(e[i])]=!0,n.languages.DFS(e[i],t,i,r)):(r[n.util.objId(e[i])]=!0,n.languages.DFS(e[i],t,null,r)))}},plugins:{},highlightAll:function(e,t){var a={callback:t,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};n.hooks.run("before-highlightall",a);for(var r,i=a.elements||document.querySelectorAll(a.selector),l=0;r=i[l++];)n.highlightElement(r,e===!0,a.callback)},highlightElement:function(t,a,r){for(var i,l,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(i=(o.className.match(e)||[,""])[1].toLowerCase(),l=n.languages[i]),t.className=t.className.replace(e,"").replace(/\s+/g," ")+" language-"+i,o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,"").replace(/\s+/g," ")+" language-"+i);var s=t.textContent,u={element:t,language:i,grammar:l,code:s};if(n.hooks.run("before-sanity-check",u),!u.code||!u.grammar)return u.code&&(n.hooks.run("before-highlight",u),u.element.textContent=u.code,n.hooks.run("after-highlight",u)),n.hooks.run("complete",u),void 0;if(n.hooks.run("before-highlight",u),a&&_self.Worker){var g=new Worker(n.filename);g.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r&&r.call(u.element),n.hooks.run("after-highlight",u),n.hooks.run("complete",u)},g.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r&&r.call(t),n.hooks.run("after-highlight",u),n.hooks.run("complete",u)},highlight:function(e,t,r){var i=n.tokenize(e,t);return a.stringify(n.util.encode(i),r)},matchGrammar:function(e,t,a,r,i,l,o){var s=n.Token;for(var u in a)if(a.hasOwnProperty(u)&&a[u]){if(u==o)return;var g=a[u];g="Array"===n.util.type(g)?g:[g];for(var c=0;c<g.length;++c){var h=g[c],f=h.inside,d=!!h.lookbehind,m=!!h.greedy,p=0,y=h.alias;if(m&&!h.pattern.global){var v=h.pattern.toString().match(/[imuy]*$/)[0];h.pattern=RegExp(h.pattern.source,v+"g")}h=h.pattern||h;for(var b=r,k=i;b<t.length;k+=t[b].length,++b){var w=t[b];if(t.length>e.length)return;if(!(w instanceof s)){h.lastIndex=0;var _=h.exec(w),P=1;if(!_&&m&&b!=t.length-1){if(h.lastIndex=k,_=h.exec(e),!_)break;for(var A=_.index+(d?_[1].length:0),j=_.index+_[0].length,x=b,O=k,S=t.length;S>x&&(j>O||!t[x].type&&!t[x-1].greedy);++x)O+=t[x].length,A>=O&&(++b,k=O);if(t[b]instanceof s||t[x-1].greedy)continue;P=x-b,w=e.slice(k,O),_.index-=k}if(_){d&&(p=_[1].length);var A=_.index+p,_=_[0].slice(p),j=A+_.length,N=w.slice(0,A),C=w.slice(j),E=[b,P];N&&(++b,k+=N.length,E.push(N));var I=new s(u,f?n.tokenize(_,f):_,y,_,m);if(E.push(I),C&&E.push(C),Array.prototype.splice.apply(t,E),1!=P&&n.matchGrammar(e,t,a,b,k,!0,u),l)break}else if(l)break}}}}},tokenize:function(e,t){var a=[e],r=t.rest;if(r){for(var i in r)t[i]=r[i];delete t.rest}return n.matchGrammar(e,a,t,0,0,!1),a},hooks:{all:{},add:function(e,t){var a=n.hooks.all;a[e]=a[e]||[],a[e].push(t)},run:function(e,t){var a=n.hooks.all[e];if(a&&a.length)for(var r,i=0;r=a[i++];)r(t)}}},a=n.Token=function(e,t,n,a,r){this.type=e,this.content=t,this.alias=n,this.length=0|(a||"").length,this.greedy=!!r};if(a.stringify=function(e,t,r){if("string"==typeof e)return e;if("Array"===n.util.type(e))return e.map(function(n){return a.stringify(n,t,e)}).join("");var i={type:e.type,content:a.stringify(e.content,t,r),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:r};if("comment"==i.type&&(i.attributes.spellcheck="true"),e.alias){var l="Array"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(i.classes,l)}n.hooks.run("wrap",i);var o=Object.keys(i.attributes).map(function(e){return e+'="'+(i.attributes[e]||"").replace(/"/g,"&quot;")+'"'}).join(" ");return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+(o?" "+o:"")+">"+i.content+"</"+i.tag+">"},!_self.document)return _self.addEventListener?(_self.addEventListener("message",function(e){var t=JSON.parse(e.data),a=t.language,r=t.code,i=t.immediateClose;_self.postMessage(n.highlight(r,n.languages[a],a)),i&&_self.close()},!1),_self.Prism):_self.Prism;var r=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return r&&(n.filename=r.src,n.manual||r.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(n.highlightAll):window.setTimeout(n.highlightAll,16):document.addEventListener("DOMContentLoaded",n.highlightAll))),_self.Prism}();"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism);
+Prism.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\s\S])*\1|[^\s'">=]+))?)*\s*\/?>/i,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:('|")[\s\S]*?(\1)|[^\s>]+)/i,inside:{punctuation:/[=>"']/}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add("wrap",function(a){"entity"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,"&"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;
+Prism.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^\{\}\s][^\{\};]*?(?=\s*\{)/,string:{pattern:/("|')(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},property:/(\b|\B)[\w-]+(?=\s*:)/i,important:/\B!important\b/i,"function":/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.util.clone(Prism.languages.css),Prism.languages.markup&&(Prism.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\s\S]*?>)[\s\S]*?(?=<\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:"language-css"}}),Prism.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|').*?\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:Prism.languages.css}},alias:"language-css"}},Prism.languages.markup.tag));
+Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],string:{pattern:/(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,lookbehind:!0,inside:{punctuation:/(\.|\\)/}},keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(true|false)\b/,"function":/[a-z0-9_]+(?=\()/i,number:/\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/};
+Prism.languages.javascript=Prism.languages.extend("clike",{keyword:/\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b-?(0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,"function":/[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/(^|[^\/])\/(?!\/)(\[[^\]\r\n]+]|\\.|[^\/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,lookbehind:!0,greedy:!0}}),Prism.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\\\|\\?[^\\])*?`/,greedy:!0,inside:{interpolation:{pattern:/\$\{[^}]+\}/,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:"language-javascript"}}),Prism.languages.js=Prism.languages.javascript;
+!function(e){var a=/\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g;e.languages.handlebars=e.languages.extend("markup",{handlebars:{pattern:a,inside:{delimiter:{pattern:/^\{\{\{?|\}\}\}?$/i,alias:"punctuation"},string:/(["'])(\\?.)*?\1/,number:/\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee][+-]?\d+)?)\b/,"boolean":/\b(true|false)\b/,block:{pattern:/^(\s*~?\s*)[#\/]\S+?(?=\s*~?\s*$|\s)/i,lookbehind:!0,alias:"keyword"},brackets:{pattern:/\[[^\]]+\]/,inside:{punctuation:/\[|\]/,variable:/[\s\S]+/}},punctuation:/[!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]/,variable:/[^!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~\s]+/}}}),e.languages.insertBefore("handlebars","tag",{"handlebars-comment":{pattern:/\{\{![\s\S]*?\}\}/,alias:["handlebars","comment"]}}),e.hooks.add("before-highlight",function(e){"handlebars"===e.language&&(e.tokenStack=[],e.backupCode=e.code,e.code=e.code.replace(a,function(a){for(var n=e.tokenStack.length;-1!==e.backupCode.indexOf("___HANDLEBARS"+n+"___");)++n;return e.tokenStack[n]=a,"___HANDLEBARS"+n+"___"}))}),e.hooks.add("before-insert",function(e){"handlebars"===e.language&&(e.code=e.backupCode,delete e.backupCode)}),e.hooks.add("after-highlight",function(a){if("handlebars"===a.language){for(var n=0,t=Object.keys(a.tokenStack);n<t.length;++n){var r=t[n],o=a.tokenStack[r];a.highlightedCode=a.highlightedCode.replace("___HANDLEBARS"+r+"___",e.highlight(o,a.grammar,"handlebars").replace(/\$/g,"$$$$"))}a.element.innerHTML=a.highlightedCode}})}(Prism);
\ No newline at end of file
Index: tests/integration/components/models-table/pagination-simple-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table/pagination-simple-test.js	(revision )
+++ tests/integration/components/models-table/pagination-simple-test.js	(revision )
@@ -0,0 +1,62 @@
+import { moduleForComponent, test } from 'ember-qunit';
+import hbs from 'htmlbars-inline-precompile';
+import ModelsTableBs from '../../../pages/models-table-bs';
+import { startMirage } from 'dummy/initializers/ember-cli-mirage';
+
+import { generateColumns } from '../../../helpers/f';
+
+const {navigation} = ModelsTableBs;
+
+moduleForComponent('models-table/pagination-simple', 'Integration | Component | models table/pagination simple', {
+  integration: true,
+  beforeEach() {
+    ModelsTableBs.setContext(this);
+    this.server = startMirage();
+    this.server.createList('user', 100);
+    this.setProperties({
+      data: this.server.db.users,
+      columns: generateColumns(['index'])
+    });
+  },
+  afterEach() {
+    this.server.shutdown();
+    ModelsTableBs.removeContext();
+  }
+});
+
+function check(assert) {
+  assert.ok(navigation.goToFirstPageDisabled);
+  assert.ok(navigation.goToPrevPageDisabled);
+  assert.notOk(navigation.goToNextPageDisabled);
+  assert.notOk(navigation.goToLastPageDisabled);
+  navigation.goToLastPage();
+  assert.notOk(navigation.goToFirstPageDisabled);
+  assert.notOk(navigation.goToPrevPageDisabled);
+  assert.ok(navigation.goToNextPageDisabled);
+  assert.ok(navigation.goToLastPageDisabled);
+}
+
+test('buttons are shown', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{#mt.footer as |footer|}}
+      {{footer.pagination-simple}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+  check(assert);
+});
+
+test('buttons are shown (2)', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{#mt.footer as |footer|}}
+      {{#footer.pagination-simple as |ps|}}
+        <a href="#" {{action ps.gotoFirst}} class="{{if ps.gotoBackEnabled "enabled" "disabled"}}"></a>
+        <a href="#" {{action ps.gotoPrev}} class="{{if ps.gotoBackEnabled "enabled" "disabled"}}"></a>
+        <a href="#" {{action ps.gotoNext}} class="{{if ps.gotoForwardEnabled "enabled" "disabled"}}"></a>
+        <a href="#" {{action ps.gotoLast}} class="{{if ps.gotoForwardEnabled "enabled" "disabled"}}"></a>
+      {{/footer.pagination-simple}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+  check(assert);
+});
\ No newline at end of file
Index: app/templates/components/models-table/header-sorting-icons.hbs
===================================================================
--- app/templates/components/models-table/header-sorting-icons.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/header-sorting-icons.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<span class="{{if column.sortAsc icons.sort-asc}} {{if column.sortDesc icons.sort-desc}}"></span>
\ No newline at end of file
Index: app/templates/components/models-table/header-rows-grouped.hbs
===================================================================
--- app/templates/components/models-table/header-rows-grouped.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/header-rows-grouped.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,7 +0,0 @@
-{{#each groupedHeaders as |row|}}
-  <tr>
-    {{#each row as |cell|}}
-      <th colspan="{{cell.colspan}}" rowspan="{{cell.rowspan}}">{{cell.title}}</th>
-    {{/each}}
-  </tr>
-{{/each}}
\ No newline at end of file
Index: app/themes/bootstrap3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/themes/bootstrap3.js	(revision )
+++ app/themes/bootstrap3.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/themes/bootstrap3';
Index: tests/dummy/app/routes/examples/select-rows-with-checkboxes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/select-rows-with-checkboxes.js	(revision )
+++ tests/dummy/app/routes/examples/select-rows-with-checkboxes.js	(revision )
@@ -0,0 +1,24 @@
+import ExampleRoute from './example';
+import {get, set} from '@ember/object';
+
+export default ExampleRoute.extend({
+
+  setupController(controller) {
+    this._super(...arguments);
+    get(controller, 'columns').unshiftObject({
+      component: 'select-row-checkbox',
+      useFilter: false,
+      mayBeHidden: false,
+      componentForSortCell: 'select-all-rows-checkbox'
+    });
+  },
+
+  actions: {
+    didTransition() {
+      set(this, 'controller.selectRowCheckboxTemplate', `<span class="{{if isSelected themeInstance.select-row themeInstance.deselect-row}}" onclick={{action "clickOnRow" index record}}></span>`);
+      set(this, 'controller.selectAllRowsCheckboxTemplate', `<span {{action "toggleAllSelection"}} class="{{if (is-equal selectedItems.length data.length) themeInstance.select-all-rows themeInstance.deselect-all-rows}}"></span>`);
+      return this._super(...arguments);
+    }
+  }
+
+});
Index: addon/helpers/exists-in.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {get, set, computed, observer} = Ember;\n\nexport default Ember.Helper.extend({\n  content: computed('needle', 'haystack.[]', function() {\n    let needle = get(this, 'needle');\n    let haystack = get(this, 'haystack');\n    return haystack.includes(needle);\n  }).readOnly(),\n\n  compute([haystack, needle]) {\n    set(this, 'needle', needle);\n    set(this, 'haystack', haystack);\n    return get(this, 'content');\n  },\n\n  contentDidChange: observer('content', function() {\n    this.recompute();\n  })\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/helpers/exists-in.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/helpers/exists-in.js	(revision )
@@ -1,12 +1,11 @@
-import Ember from 'ember';
+import Helper from '@ember/component/helper';
+import { observer, computed, set, get } from '@ember/object';
 
-const {get, set, computed, observer} = Ember;
-
-export default Ember.Helper.extend({
+export default Helper.extend({
   content: computed('needle', 'haystack.[]', function() {
     let needle = get(this, 'needle');
     let haystack = get(this, 'haystack');
-    return haystack.includes(needle);
+    return haystack ? haystack.includes(needle) : false;
   }).readOnly(),
 
   compute([haystack, needle]) {
Index: tests/dummy/app/templates/examples/column-sets.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table data=model columns=columns columnSets=columnSets}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n        <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n          data=model\n          columns=columns\n          columnSets=columnSets&rbrace;&rbrace;</code></pre>\n\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n  </div>\n</div>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/column-sets.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/column-sets.hbs	(revision )
@@ -1,18 +1,42 @@
+<h4>Column sets <small>simple table</small></h4>
+{{models-table data=data columns=columns columnSets=columnSets}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns columnSets=columnSets}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;models-table
-          data=model
-          columns=columns
-          columnSets=columnSets&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
+  <div class="col-md-6">
+    <p>Component usage</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
+  columns=columns
+  columnSets=columnSets&rbrace;&rbrace;</code></pre>
+    <p><code>columns</code></p>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
   </div>
+  <div class="col-md-6">
+    <p><code>columnSets</code></p>
+    <pre><code class="language-javascript">[
+{
+  label: 'Only Name',
+  showColumns: ['firstName', 'lastName']
+},
+{
+  label: 'Random',
+  showColumns(columns) {
+    columns.forEach((column) => column.set('isHidden', Math.random() > 0.5));
+    this._sendColumnsVisibilityChangedAction();
+  }
+},
+{
+  label: 'Add Name',
+  showColumns: ['firstName', 'lastName'],
+  hideOtherColumns: false
+},
+{
+  label: 'Toggle Name',
+  showColumns: ['firstName', 'lastName'],
+  toggleSet: true
+}
+]</code></pre>
+  </div>
 </div>
+
+<h4>Columns sets <small>server paginated table</small></h4>
+{{models-table-server-paginated data=model columns=columns columnSets=columnSets}}
\ No newline at end of file
Index: .npmignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/bower_components\n/config/ember-try.js\n/dist\n/tests\n/tmp\n**/.gitkeep\n.bowerrc\n.editorconfig\n.ember-cli\n.gitignore\n.eslintrc.js\n.watchmanconfig\n.travis.yml\nbower.json\nember-cli-build.js\ntestem.js\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .npmignore	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ .npmignore	(revision )
@@ -1,5 +1,6 @@
 /bower_components
 /config/ember-try.js
+/docs
 /dist
 /tests
 /tmp
Index: tests/dummy/app/components/custom-pagination.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-pagination.js	(revision )
+++ tests/dummy/app/components/custom-pagination.js	(revision )
@@ -0,0 +1,6 @@
+import Component from '@ember/component';
+import layout from '../templates/components/custom-pagination';
+
+export default Component.extend({
+  layout
+});
Index: tests/dummy/app/templates/custom/pagination.hbs
===================================================================
--- tests/dummy/app/templates/custom/pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,4 +0,0 @@
-<a href="#" {{action "gotoFirst"}} class={{gotoBackEnabled:enabled:disabled}}>F</a>&nbsp;
-<a href="#" {{action "gotoPrev"}} class={{gotoBackEnabled:enabled:disabled}}>P</a>&nbsp;
-<a href="#" {{action "gotoNext"}} class={{gotoForwardEnabled:enabled:disabled}}>N</a>&nbsp;
-<a href="#" {{action "gotoLast"}} class={{gotoForwardEnabled:enabled:disabled}}>L</a>
\ No newline at end of file
Index: app/templates/components/models-table/table-footer.hbs
===================================================================
--- app/templates/components/models-table/table-footer.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/table-footer.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,0 +0,0 @@
Index: tests/dummy/app/templates/examples/cell-template.hbs
===================================================================
--- tests/dummy/app/templates/examples/cell-template.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/cell-template.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,20 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns&rbrace;&rbrace;
-      </code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-    <p><code>templates/custom/fullname.hbs</code>:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;!`record` - row from model, current column is available as `column`&rbrace;&rbrace;
-&lbrace;&lbrace;record.firstName&rbrace;&rbrace; &lbrace;&lbrace;record.lastName&rbrace;&rbrace;</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/dummy/app/templates/custom/external-link.hbs
===================================================================
--- tests/dummy/app/templates/custom/external-link.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/external-link.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<a target="_blank" {{action "emptyAction" on="click" preventDefault=false}} href={{get record column.propertyName}}>Link</a>
\ No newline at end of file
Index: tests/dummy/app/utils/c.js
===================================================================
--- tests/dummy/app/utils/c.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/utils/c.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,38 +0,0 @@
-import Ember from 'ember';
-
-var names = ("Ingeborg Jim Rigoberto Ian Wei Otilia Wendell Chasity " +
-"Billi Chester Omer Paulene Hiram Laurice Deneen Chuck Petrina Lamonica " +
-"Roy Ai Marsha Kiana Tamar Fabiola Travis Mazie Dawna Fe Tommye Jene").split(' ');
-
-var surnames = ("Brown Smith Patel Jones Williams Johnson Taylor Thomas " +
-"Roberts Khan Lewis Jackson Clarke James Phillips Wilson Ali Mason " +
-"Mitchell Rose Davis Davies Rodríguez Cox Alexander " +
-"Stewart Quinn Robinson Murphy Graham").split(' ');
-
-var cities = ["Shanghai", "Karachi", "Beijing", "Tianjin", "Istanbul", "Lagos",
-  "Guangzhou", "Mumbai", "Moscow", "Dhaka", "Cairo", "São Paulo",
-  "Lahore", "Shenzhen", "Seoul", "Jakarta", "Kinshasa", "Tokyo", "Mexico City",
-  "Lima", "New York City", "Bengaluru", "London", "Bangkok", "Dongguan",
-  "Nanjing", "Tehran", "Shenyang", "Ahmedabad", "Bogotá"];
-
-const {
-  A,
-  Object: O
-} = Ember;
-
-export default function generateContent (recordsCount) {
-  var ret = A([]);
-  for (let i = 0; i < recordsCount; i++) {
-    let indx = i % 30;
-    ret.push(O.create({
-      id: i + 1,
-      firstName: names[indx],
-      lastName: surnames[indx],
-      age: Math.floor(Math.random() * (50 - 18)) + 18,
-      city: cities[indx],
-      cityWithHtml: `<i>${cities[indx]}</i>`,
-      rand: !!(i % 2)
-    }));
-  }
-  return ret;
-}
\ No newline at end of file
Index: addon/components/models-select.js
===================================================================
--- addon/components/models-select.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/components/models-select.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,18 +0,0 @@
-import Ember from 'ember';
-import layout from '../templates/components/models-select';
-
-export default Ember.Component.extend({
-
-  layout,
-
-  tagName: 'select',
-
-  classNameBindings: ['cssPropertyName'],
-
-  cssPropertyName: '',
-
-  change() {
-    this.set('value', this.$('option:selected').val());
-  }
-
-});
Index: tests/dummy/app/controllers/examples/without-footer.js
===================================================================
--- tests/dummy/app/controllers/examples/without-footer.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/without-footer.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,29 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Table without footer',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
-});
\ No newline at end of file
Index: app/templates/components/models-table/numeric-pagination.hbs
===================================================================
--- app/templates/components/models-table/numeric-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/numeric-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,11 +0,0 @@
-<div class="btn-toolbar pull-right" role="toolbar">
-  <div class="btn-group" role="group">
-    {{#each visiblePageNumbers as |page|}}
-      {{#if page.isLink}}
-        <button type="button" class="{{if page.isActive "active"}} {{classes.buttonDefault}}" {{action "gotoCustomPage" page.label}}>{{page.label}}</button>
-      {{else}}
-        <button disabled="disabled" type="button" class="{{classes.buttonDefault}}" {{action "gotoCustomPage" page.label}}>{{page.label}}</button>
-      {{/if}}
-    {{/each}}
-  </div>
-</div>
Index: tests/dummy/app/templates/application.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h1>Ember Models Table</h1>\n\n      <h2>Install</h2>\n      <pre>ember install ember-models-table</pre>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <ul class=\"nav nav-tabs\">\n        {{#link-to \"index\" tagName=\"li\"}}{{#link-to \"index\"}}Docs{{/link-to}}{{/link-to}}\n        {{#link-to \"examples\" tagName=\"li\"}}{{#link-to \"examples\"}}Examples{{/link-to}}{{/link-to}}\n      </ul>\n    </div>\n  </div>\n</div>\n<div class=\"container-fluid\">\n  {{outlet}}\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/application.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/application.hbs	(revision )
@@ -1,18 +1,8 @@
 <div class="container-fluid">
   <div class="row">
     <div class="col-md-12">
-      <h1>Ember Models Table</h1>
-
       <h2>Install</h2>
       <pre>ember install ember-models-table</pre>
-    </div>
-  </div>
-  <div class="row">
-    <div class="col-md-12">
-      <ul class="nav nav-tabs">
-        {{#link-to "index" tagName="li"}}{{#link-to "index"}}Docs{{/link-to}}{{/link-to}}
-        {{#link-to "examples" tagName="li"}}{{#link-to "examples"}}Examples{{/link-to}}{{/link-to}}
-      </ul>
     </div>
   </div>
 </div>
Index: addon/helpers/html-safe.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/helpers/html-safe.js	(revision )
+++ addon/helpers/html-safe.js	(revision )
@@ -0,0 +1,8 @@
+import {htmlSafe as _htmlSafe} from '@ember/string';
+import {helper} from '@ember/component/helper';
+
+export function htmlSafe([str]/*, hash*/) {
+  return _htmlSafe(str || '');
+}
+
+export default helper(htmlSafe);
Index: tests/dummy/app/controllers/examples/filtering-ignore-case.js
===================================================================
--- tests/dummy/app/controllers/examples/filtering-ignore-case.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/filtering-ignore-case.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,33 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Filtering ignore case',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID',
-      filterPlaceholder: 'Enter id'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name',
-      filterPlaceholder: 'Enter first name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name',
-      filterPlaceholder: 'Enter last name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City',
-      filterPlaceholder: 'Enter city'
-    }
-  ])
-
-});
\ No newline at end of file
Index: tests/dummy/app/templates/index.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>Component's options</h3>\n      <table class=\"table-striped table-bordered table-condensed table\">\n        <thead>\n          <tr>\n            <td>Option</td>\n            <td>Type</td>\n            <td>Default value</td>\n            <td>Description</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code>data</code></td>\n            <td>Ember.Object[]</td>\n            <td><pre>[]</pre></td>\n            <td><p>All table records</p></td>\n          </tr>\n          <tr>\n            <td><code>columns</code></td>\n            <td>Object[]</td>\n            <td><pre>[]</pre></td>\n            <td>\n              <p>All table columns</p>\n              <p>Each column may have such fields:</p>\n              <table class=\"table table-condensed table-column-options\">\n                <tbody>\n                  <tr>\n                    <td><code>propertyName</code></td>\n                    <td>String</td>\n                    <td><p>Field-name of the data's object shown in the current column. If it isn't provided, sorting and filtering options for current column are ignored</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>title</code></td>\n                    <td>String</td>\n                    <td><p>Header for column. If it isn't provided, capitalized <code>propertyName</code> is used</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>template</code></td>\n                    <td>String</td>\n                    <td><p>Custom template for each cell in the current column</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>component</code></td>\n                    <td>String</td>\n                    <td>\n                      <p>Custom component used in the column's cells. It receives 4 attributes:</p>\n                      <ul>\n                        <li>table - this table-component</li>\n                        <li>column - current column (one of the <code>processedColumns</code>)</li>\n                        <li>record - current record</li>\n                        <li>data - data passed to the component</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td><code>templateForFilterCell</code></td>\n                    <td>String</td>\n                    <td><p>Custom template used in the header cell with filter</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>componentForFilterCell</code></td>\n                    <td>String</td>\n                    <td>\n                      <p>Custom component used in the header cell with filter. It receives 4 attributes:</p>\n                      <ul>\n                        <li>table - this table-component</li>\n                        <li>column - current column (one of the <code>processedColumns</code>)</li>\n                        <li>row - current record</li>\n                        <li>data - data passed to the component</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td><code>templateForSortCell</code></td>\n                    <td>String</td>\n                    <td><p>Custom template used in the header cell with sorting and column title</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>componentForSortCell</code></td>\n                    <td>String</td>\n                    <td>\n                      <p>Custom component used in the header cell with sorting and column title. It receives 4 attributes:</p>\n                      <ul>\n                        <li>table - this table-component</li>\n                        <li>column - current column (one of the <code>processedColumns</code>)</li>\n                        <li>row - current record</li>\n                        <li>data - data passed to the component</li>\n                      </ul>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td><code>sortedBy</code></td>\n                    <td>String</td>\n                    <td><p>Field-name for sorting by current column. If it isn't provided, <code>propertyName</code> is used</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>disableSorting</code></td>\n                    <td>Boolean</td>\n                    <td><p>If this is true, sorting will be disabled for this column.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>sortDirection</code></td>\n                    <td>String</td>\n                    <td><p>The default sorting for this column. Can be either <code>asc</code> or <code>desc</code>. Needs to be set in conjunction with <code>sortPrecedence</code>,\n                    otherwise it will not have any effect.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>sortPrecedence</code></td>\n                    <td>Number</td>\n                    <td><p>If this is bigger than -1, this column will be sorted by default by the specified <code>sortDirection</code>.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>isHidden</code></td>\n                    <td>Boolean</td>\n                    <td><p>Is current column hidden by default</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>mayBeHidden</code></td>\n                    <td>Boolean</td>\n                    <td><p>Is current column me be hidden. This field determines, if column appears in the columns-dropdown. If <code>mayBeHidden</code> is <code>true</code> and <code>isHidden</code> is also <code>true</code> for current column, this column always be hidden</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>disableFiltering</code></td>\n                    <td>Boolean</td>\n                    <td><p>If this is true, filtering will be disabled for this column.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>filteredBy</code></td>\n                    <td>String</td>\n                    <td><p>Custom data's property that is used to filter column. If it isn't provided, <code>propertyName</code> is used</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>filterString</code></td>\n                    <td>String</td>\n                    <td><p>This will be set as default filter value for this column.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>filterWithSelect</code></td>\n                    <td>Boolean</td>\n                    <td><p>If <code>true</code> select-dropdown will be used for filtering by current column. Options are unique values for <code>data.@each.${propertyName}</code></p></td>\n                  </tr>\n                  <tr>\n                    <td><code>predefinedFilterOptions</code></td>\n                    <td>String[] | Object[]</td>\n                    <td><p>List of predefined options for select-dropdown. Used if <code>filterWithSelect</code> is <code>true</code>. It isn't overrode with <code>data.@each.${propertyName}</code>. You may provide list if values only or list of object with properties <code>label</code> and <code>value</code>.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>sortFilterOptions</code></td>\n                    <td>Boolean</td>\n                    <td><p>Should options in the select-box be sorted (<code>false</code> by default)</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>className</code></td>\n                    <td>String</td>\n                    <td><p>Custom class-name for cells in the current column</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>filterFunction</code></td>\n                    <td>Function</td>\n                    <td><p>Custom function used to filter rows. It takes 3 arguments - cell string representation, filter string and whole row (object). This function may be used together with <code>filterWithSelect</code>.</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>filterPlaceholder</code></td>\n                    <td>String</td>\n                    <td><p>Placeholder for filter-input</p></td>\n                  </tr>\n                  <tr>\n                    <td><code>routeName</code></td>\n                    <td>String</td>\n                    <td><p>If this property is defined, link to the route will be rendered in the cell. <code>propertyName</code> is used as an anchor. If it's not declared, <code>id</code> will be used. <br /> Main idea for <code>routeName</code> is to provide a simple way to generate links for each model in the <code>data</code>. It should not be used for any other purposes. See {{link-to \"route-cells\" \"examples.route-cells\"}} example.</p></td>\n                  </tr>\n                </tbody>\n              </table>\n            </td>\n          </tr>\n          <tr>\n            <td><code>columnSets</code></td>\n            <td>Object[]</td>\n            <td><pre>[]</pre></td>\n            <td>\n              <p>Sets of columns that can be toggled together.</p>\n              <p>Each object should have:</p>\n              <table class=\"table table-condensed table-column-options\">\n                <tbody>\n                  <tr>\n                    <td><code>label</code></td>\n                    <td>String</td>\n                    <td>The label for the set. This will be displayed in the columns dropdown.</td>\n                  </tr>\n                  <tr>\n                    <td><code>showColumns</code></td>\n                    <td>Array|Function</td>\n                    <td>\n                      This should either be an array of <code>propertyNames</code> to show, or a function.\n                      If it is a function, the function will be called with the <code>processedColumns</code> as attribute.\n                    </td>\n                  </tr>\n                  <tr>\n                    <td><code>hideOtherColumns</code></td>\n                    <td>Boolean</td>\n                    <td>\n                      If this is true (default), all columns not specified in <code>showColumns</code> will be hidden.\n                      If this is set to false, other columns will be left at whatever visibility they were before.\n                    </td>\n                  </tr>\n                  <tr>\n                    <td><code>toggleSet</code></td>\n                    <td>Boolean</td>\n                    <td>\n                      If this is true (default is false), the set columns will be shown if one of them is currently hidden,\n                      else they will all be hidden. Settings this will result in a default of <code>hideOtherColumns=false</code>.\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </td>\n          </tr>\n          <tr>\n            <td><code>groupedHeaders</code></td>\n            <td>Object[][]</td>\n            <td><pre>[]</pre></td>\n            <td>\n              <p>List of the additional headers. Used to group columns</p>\n              <p>Each object may have such fields:</p>\n              <table class=\"table table-condensed table-column-options\">\n                <tbody>\n                <tr>\n                  <td><code>title</code></td>\n                  <td>String</td>\n                  <td>Header for grouped column</td>\n                </tr>\n                <tr>\n                  <td><code>colspan</code></td>\n                  <td>Number</td>\n                  <td>HTML colspan attr</td>\n                </tr>\n                <tr>\n                  <td><code>rowspan</code></td>\n                  <td>Number</td>\n                  <td>HTML rowspan attr</td>\n                </tr>\n                </tbody>\n              </table>\n              <p class=\"alert alert-danger\"><strong>IMPORTANT</strong> <code>showColumnsDropdown</code> should be <code>false</code> to avoid markup breaking when some column becomes shown/hidden.</p>\n            </td>\n          </tr>\n          <tr>\n            <td><code>multipleColumnsSorting</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.multipleColumnsSorting}}</pre></td>\n            <td><p>Determines if multi-columns sorting should be used</p></td>\n          </tr>\n          <tr>\n            <td><code>useNumericPagination</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.useNumericPagination}}</pre></td>\n            <td><p>Determines if numeric pagination should be used</p></td>\n          </tr>\n          <tr>\n            <td><code>showComponentFooter</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.showComponentFooter}}</pre></td>\n            <td><p>Determines if table footer should be shown on the page</p></td>\n          </tr>\n          <tr>\n            <td><code>pageSize</code></td>\n            <td>Number</td>\n            <td><pre>{{c.pageSize}}</pre></td>\n            <td>Number of records shown on one table-page (size of the <code>visibleContent</code>)</td>\n          </tr>\n          <tr>\n            <td><code>showColumnsDropdown</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.showColumnsDropdown}}</pre></td>\n            <td><p>Determines if columns-dropdown should be shown</p></td>\n          </tr>\n          <tr>\n            <td><code>useFilteringByColumns</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.useFilteringByColumns}}</pre></td>\n            <td><p>Determines if filtering by columns should be available to the user</p></td>\n          </tr>\n          <tr>\n            <td><code>filteringIgnoreCase</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.filteringIgnoreCase}}</pre></td>\n            <td><p>Determines if filtering (global and by column) should ignore case</p></td>\n          </tr>\n          <tr>\n            <td><code>showGlobalFilter</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.showGlobalFilter}}</pre></td>\n            <td><p>Determines if \"Global filter\"-field should be shown</p></td>\n          </tr>\n          <tr>\n            <td><code>focusGlobalFilter</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.focusGlobalFilter}}</pre></td>\n            <td><p>Determines if focus should be on the \"Global filter\"-field on component render</p></td>\n          </tr>\n          <tr>\n            <td><code>doFilteringByHiddenColumns</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.doFilteringByHiddenColumns}}</pre></td>\n            <td><p>Determines if filtering should be done by hidden columns</p><p class=\"alert alert-info\">Notice: after changing this value filtering results will be updated only after filter options are changed</p></td>\n          </tr>\n          <tr>\n            <td><code>displayDataChangedAction</code></td>\n            <td>String</td>\n            <td><pre>{{c.displayDataChangedAction}}</pre></td>\n            <td><p>Action-name sent on user interaction. The action will receive the current settings of the table as parameter.</p></td>\n          </tr>\n          <tr>\n            <td><code>sendDisplayDataChangedAction</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.sendDisplayDataChangedAction}}</pre></td>\n            <td><p>Determines if action on user interaction should be sent</p></td>\n          </tr>\n          <tr>\n            <td><code>columnsVisibilityChangedAction</code></td>\n            <td>String</td>\n            <td><pre>{{c.columnsVisibilityChangedAction}}</pre></td>\n            <td><p>Action-name sent on change of visible columns. The action will receive an array of objects as parameter, where every object looks like this: <code>{ propertyName: 'firstName', isHidden: true, mayBeHidden: false }</code>.</p></td>\n          </tr>\n          <tr>\n            <td><code>sendColumnsVisibilityChangedAction</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.sendColumnsVisibilityChangedAction}}</pre></td>\n            <td><p>Determines if action on change of visible columns should be sent</p></td>\n          </tr>\n          <tr>\n            <td><code>columnsAreUpdateable</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.columnsAreUpdateable}}</pre></td>\n            <td><p>Determines if <code>processedColumns</code> will be updated if <code>columns</code> are changed (<code>propertyName</code> and <code>template</code> are observed).</p><p class=\"alert alert-danger\"><strong>IMPORTANT</strong> All filter, sort and visibility options will be dropped to the default values while updating.</p></td>\n          </tr>\n          <tr>\n            <td><code>columnFieldsToCheckUpdate</code></td>\n            <td>String[]</td>\n            <td><pre>{{c.columnFieldsToCheckUpdate}}</pre></td>\n            <td><p><code>columns</code>-fields which are observed to update shown table-columns. It is used only if <code>columnsAreUpdateable</code> is <code>true</code></p></td>\n          </tr>\n          <tr>\n            <td><code>simplePaginationTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.simplePaginationTemplate}}</pre></td>\n            <td><p>Path to the custom template with pagination. Ignored if <code>useNumericPagination</code> is <code>true</code></p></td>\n          </tr>\n          <tr>\n            <td><code>numericPaginationTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.numericPaginationTemplate}}</pre></td>\n            <td><p>Path to the custom template with numeric pagination. Used if <code>useNumericPagination</code> is <code>true</code></p></td>\n          </tr>\n          <tr>\n            <td><code>tableFooterTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.tableFooterTemplate}}</pre></td>\n            <td><p>Path to the custom template with table footer.</p></td>\n          </tr>\n          <tr>\n            <td><code>componentFooterTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.componentFooterTemplate}}</pre></td>\n            <td><p>Path to the custom template with component footer. Used if <code>showComponentFooter</code> is <code>true</code></p></td>\n          </tr>\n          <tr>\n            <td><code>pageSizeTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.pageSizeTemplate}}</pre></td>\n            <td><p>Path to the custom template for page size</p></td>\n          </tr>\n          <tr>\n            <td><code>showPageSize</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.showPageSize}}</pre></td>\n            <td><p>Determines if page size should be shown</p></td>\n          </tr>\n          <tr>\n            <td><code>globalFilterTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.globalFilterTemplate}}</pre></td>\n            <td><p>Path to the custom template with global filter. Used if <code>showGlobalFilter</code> is <code>true</code></p></td>\n          </tr>\n          <tr>\n            <td><code>columnsDropdownTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.columnsDropdownTemplate}}</pre></td>\n            <td><p>Path to the custom template with columns dropdown. Used if <code>showColumnsDropdown</code> is <code>true</code></p></td>\n          </tr>\n          <tr>\n            <td><code>rowTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.rowTemplate}}</pre></td>\n            <td><p>Path to the custom template with table's row</p></td>\n          </tr>\n          <tr>\n            <td><code>noDataShowTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.noDataShowTemplate}}</pre></td>\n            <td><p>Path to the custom template for row with message about no available data</p></td>\n          </tr>\n          <tr>\n            <td><code>allColumnsHiddenTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.allColumnsHiddenTemplate}}</pre></td>\n            <td><p>Path to the custom template for row with message about all columns are hidden</p></td>\n          </tr>\n          <tr>\n            <td><code>headerSortingRowTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.headerSortingRowTemplate}}</pre></td>\n            <td><p>Path to the custom template with header row for column names</p></td>\n          </tr>\n          <tr>\n            <td><code>headerSortingIconsTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.headerSortingIconsTemplate}}</pre></td>\n            <td><p>Path to the custom template for sorting icons</p></td>\n          </tr>\n          <tr>\n            <td><code>headerFilteringRowTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.headerFilteringRowTemplate}}</pre></td>\n            <td><p>Path to the custom template with header row for column filters</p></td>\n          </tr>\n          <tr>\n            <td><code>headerGroupedRowsTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.headerGroupedRowsTemplate}}</pre></td>\n            <td><p>Path to the custom template with header rows for columns grouping</p></td>\n          </tr>\n          <tr>\n            <td><code>expandedRowTemplate</code></td>\n            <td>String</td>\n            <td><pre>{{c.expandedRowTemplate}}</pre></td>\n            <td><p>Path to the custom template with expanded row content</p></td>\n          </tr>\n          <tr>\n            <td><code>multipleExpand</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.multipleExpand}}</pre></td>\n            <td><p><code>true</code> - allow to expand more than 1 row<br />\n              <code>false</code> - only 1 row may be expanded in the same time</p></td>\n          </tr>\n          <tr>\n            <td><code>selectRowOnClick</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.selectRowOnClick}}</pre></td>\n            <td><p>Allow or disallow to select any rows on clicking them. Rows can still be selected programmatically. If `false` - no row can be selected</p></td>\n          </tr>\n          <tr>\n            <td><code>multipleSelect</code></td>\n            <td>Boolean</td>\n            <td><pre>{{c.multipleSelect}}</pre></td>\n            <td><p>Allow or disallow to select multiple rows. If `false` - only one row may be selected in the same time</p></td>\n          </tr>\n          <tr>\n            <td><code>preselectedItems</code></td>\n            <td>Array</td>\n            <td><pre>{{c.preselectedItems}}</pre></td>\n            <td><p>Rows with this items should be preselected on component init.</p><p class=\"alert alert-danger\"><strong>IMPORTANT</strong> It's NOT a list of indexes!</p></td>\n          </tr>\n          <tr>\n            <td><code>customMessages</code></td>\n            <td>Object</td>\n            <td><pre>{}</pre></td>\n            <td>\n              <p>Overrides for messages used in the component. Defaults:</p>\n              <pre><code class=\"javascript\">{{to-string c 'messages'}}</code></pre>\n            </td>\n          </tr>\n          <tr>\n            <td><code>customIcons</code></td>\n            <td>Object</td>\n            <td><pre>{}</pre></td>\n            <td>\n              <p>Overrides for icons-classes used in the component. Defaults:</p>\n              <pre><code class=\"javascript\">{{to-string c 'icons'}}</code></pre>\n            </td>\n          </tr>\n          <tr>\n            <td><code>customClasses</code></td>\n            <td>Object</td>\n            <td><pre>{}</pre></td>\n            <td>\n              <p>Overrides for css-classes (excluding <code>icons</code>) used in the component. Defaults:</p>\n              <pre><code class=\"javascript\">{{to-string c 'classes'}}</code></pre>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n{{outlet}}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/index.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/index.hbs	(revision )
@@ -1,499 +1,1 @@
-
-  <div class="row">
-    <div class="col-md-12">
-      <h3>Component's options</h3>
-      <table class="table-striped table-bordered table-condensed table">
-        <thead>
-          <tr>
-            <td>Option</td>
-            <td>Type</td>
-            <td>Default value</td>
-            <td>Description</td>
-          </tr>
-        </thead>
-        <tbody>
-          <tr>
-            <td><code>data</code></td>
-            <td>Ember.Object[]</td>
-            <td><pre>[]</pre></td>
-            <td><p>All table records</p></td>
-          </tr>
-          <tr>
-            <td><code>columns</code></td>
-            <td>Object[]</td>
-            <td><pre>[]</pre></td>
-            <td>
-              <p>All table columns</p>
-              <p>Each column may have such fields:</p>
-              <table class="table table-condensed table-column-options">
-                <tbody>
-                  <tr>
-                    <td><code>propertyName</code></td>
-                    <td>String</td>
-                    <td><p>Field-name of the data's object shown in the current column. If it isn't provided, sorting and filtering options for current column are ignored</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>title</code></td>
-                    <td>String</td>
-                    <td><p>Header for column. If it isn't provided, capitalized <code>propertyName</code> is used</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>template</code></td>
-                    <td>String</td>
-                    <td><p>Custom template for each cell in the current column</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>component</code></td>
-                    <td>String</td>
-                    <td>
-                      <p>Custom component used in the column's cells. It receives 4 attributes:</p>
-                      <ul>
-                        <li>table - this table-component</li>
-                        <li>column - current column (one of the <code>processedColumns</code>)</li>
-                        <li>record - current record</li>
-                        <li>data - data passed to the component</li>
-                      </ul>
-                    </td>
-                  </tr>
-                  <tr>
-                    <td><code>templateForFilterCell</code></td>
-                    <td>String</td>
-                    <td><p>Custom template used in the header cell with filter</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>componentForFilterCell</code></td>
-                    <td>String</td>
-                    <td>
-                      <p>Custom component used in the header cell with filter. It receives 4 attributes:</p>
-                      <ul>
-                        <li>table - this table-component</li>
-                        <li>column - current column (one of the <code>processedColumns</code>)</li>
-                        <li>row - current record</li>
-                        <li>data - data passed to the component</li>
-                      </ul>
-                    </td>
-                  </tr>
-                  <tr>
-                    <td><code>templateForSortCell</code></td>
-                    <td>String</td>
-                    <td><p>Custom template used in the header cell with sorting and column title</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>componentForSortCell</code></td>
-                    <td>String</td>
-                    <td>
-                      <p>Custom component used in the header cell with sorting and column title. It receives 4 attributes:</p>
-                      <ul>
-                        <li>table - this table-component</li>
-                        <li>column - current column (one of the <code>processedColumns</code>)</li>
-                        <li>row - current record</li>
-                        <li>data - data passed to the component</li>
-                      </ul>
-                    </td>
-                  </tr>
-                  <tr>
-                    <td><code>sortedBy</code></td>
-                    <td>String</td>
-                    <td><p>Field-name for sorting by current column. If it isn't provided, <code>propertyName</code> is used</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>disableSorting</code></td>
-                    <td>Boolean</td>
-                    <td><p>If this is true, sorting will be disabled for this column.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>sortDirection</code></td>
-                    <td>String</td>
-                    <td><p>The default sorting for this column. Can be either <code>asc</code> or <code>desc</code>. Needs to be set in conjunction with <code>sortPrecedence</code>,
-                    otherwise it will not have any effect.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>sortPrecedence</code></td>
-                    <td>Number</td>
-                    <td><p>If this is bigger than -1, this column will be sorted by default by the specified <code>sortDirection</code>.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>isHidden</code></td>
-                    <td>Boolean</td>
-                    <td><p>Is current column hidden by default</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>mayBeHidden</code></td>
-                    <td>Boolean</td>
-                    <td><p>Is current column me be hidden. This field determines, if column appears in the columns-dropdown. If <code>mayBeHidden</code> is <code>true</code> and <code>isHidden</code> is also <code>true</code> for current column, this column always be hidden</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>disableFiltering</code></td>
-                    <td>Boolean</td>
-                    <td><p>If this is true, filtering will be disabled for this column.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>filteredBy</code></td>
-                    <td>String</td>
-                    <td><p>Custom data's property that is used to filter column. If it isn't provided, <code>propertyName</code> is used</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>filterString</code></td>
-                    <td>String</td>
-                    <td><p>This will be set as default filter value for this column.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>filterWithSelect</code></td>
-                    <td>Boolean</td>
-                    <td><p>If <code>true</code> select-dropdown will be used for filtering by current column. Options are unique values for <code>data.@each.${propertyName}</code></p></td>
-                  </tr>
-                  <tr>
-                    <td><code>predefinedFilterOptions</code></td>
-                    <td>String[] | Object[]</td>
-                    <td><p>List of predefined options for select-dropdown. Used if <code>filterWithSelect</code> is <code>true</code>. It isn't overrode with <code>data.@each.${propertyName}</code>. You may provide list if values only or list of object with properties <code>label</code> and <code>value</code>.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>sortFilterOptions</code></td>
-                    <td>Boolean</td>
-                    <td><p>Should options in the select-box be sorted (<code>false</code> by default)</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>className</code></td>
-                    <td>String</td>
-                    <td><p>Custom class-name for cells in the current column</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>filterFunction</code></td>
-                    <td>Function</td>
-                    <td><p>Custom function used to filter rows. It takes 3 arguments - cell string representation, filter string and whole row (object). This function may be used together with <code>filterWithSelect</code>.</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>filterPlaceholder</code></td>
-                    <td>String</td>
-                    <td><p>Placeholder for filter-input</p></td>
-                  </tr>
-                  <tr>
-                    <td><code>routeName</code></td>
-                    <td>String</td>
-                    <td><p>If this property is defined, link to the route will be rendered in the cell. <code>propertyName</code> is used as an anchor. If it's not declared, <code>id</code> will be used. <br /> Main idea for <code>routeName</code> is to provide a simple way to generate links for each model in the <code>data</code>. It should not be used for any other purposes. See {{link-to "route-cells" "examples.route-cells"}} example.</p></td>
-                  </tr>
-                </tbody>
-              </table>
-            </td>
-          </tr>
-          <tr>
-            <td><code>columnSets</code></td>
-            <td>Object[]</td>
-            <td><pre>[]</pre></td>
-            <td>
-              <p>Sets of columns that can be toggled together.</p>
-              <p>Each object should have:</p>
-              <table class="table table-condensed table-column-options">
-                <tbody>
-                  <tr>
-                    <td><code>label</code></td>
-                    <td>String</td>
-                    <td>The label for the set. This will be displayed in the columns dropdown.</td>
-                  </tr>
-                  <tr>
-                    <td><code>showColumns</code></td>
-                    <td>Array|Function</td>
-                    <td>
-                      This should either be an array of <code>propertyNames</code> to show, or a function.
-                      If it is a function, the function will be called with the <code>processedColumns</code> as attribute.
-                    </td>
-                  </tr>
-                  <tr>
-                    <td><code>hideOtherColumns</code></td>
-                    <td>Boolean</td>
-                    <td>
-                      If this is true (default), all columns not specified in <code>showColumns</code> will be hidden.
-                      If this is set to false, other columns will be left at whatever visibility they were before.
-                    </td>
-                  </tr>
-                  <tr>
-                    <td><code>toggleSet</code></td>
-                    <td>Boolean</td>
-                    <td>
-                      If this is true (default is false), the set columns will be shown if one of them is currently hidden,
-                      else they will all be hidden. Settings this will result in a default of <code>hideOtherColumns=false</code>.
-                    </td>
-                  </tr>
-                </tbody>
-              </table>
-            </td>
-          </tr>
-          <tr>
-            <td><code>groupedHeaders</code></td>
-            <td>Object[][]</td>
-            <td><pre>[]</pre></td>
-            <td>
-              <p>List of the additional headers. Used to group columns</p>
-              <p>Each object may have such fields:</p>
-              <table class="table table-condensed table-column-options">
-                <tbody>
-                <tr>
-                  <td><code>title</code></td>
-                  <td>String</td>
-                  <td>Header for grouped column</td>
-                </tr>
-                <tr>
-                  <td><code>colspan</code></td>
-                  <td>Number</td>
-                  <td>HTML colspan attr</td>
-                </tr>
-                <tr>
-                  <td><code>rowspan</code></td>
-                  <td>Number</td>
-                  <td>HTML rowspan attr</td>
-                </tr>
-                </tbody>
-              </table>
-              <p class="alert alert-danger"><strong>IMPORTANT</strong> <code>showColumnsDropdown</code> should be <code>false</code> to avoid markup breaking when some column becomes shown/hidden.</p>
-            </td>
-          </tr>
-          <tr>
-            <td><code>multipleColumnsSorting</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.multipleColumnsSorting}}</pre></td>
-            <td><p>Determines if multi-columns sorting should be used</p></td>
-          </tr>
-          <tr>
-            <td><code>useNumericPagination</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.useNumericPagination}}</pre></td>
-            <td><p>Determines if numeric pagination should be used</p></td>
-          </tr>
-          <tr>
-            <td><code>showComponentFooter</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.showComponentFooter}}</pre></td>
-            <td><p>Determines if table footer should be shown on the page</p></td>
-          </tr>
-          <tr>
-            <td><code>pageSize</code></td>
-            <td>Number</td>
-            <td><pre>{{c.pageSize}}</pre></td>
-            <td>Number of records shown on one table-page (size of the <code>visibleContent</code>)</td>
-          </tr>
-          <tr>
-            <td><code>showColumnsDropdown</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.showColumnsDropdown}}</pre></td>
-            <td><p>Determines if columns-dropdown should be shown</p></td>
-          </tr>
-          <tr>
-            <td><code>useFilteringByColumns</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.useFilteringByColumns}}</pre></td>
-            <td><p>Determines if filtering by columns should be available to the user</p></td>
-          </tr>
-          <tr>
-            <td><code>filteringIgnoreCase</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.filteringIgnoreCase}}</pre></td>
-            <td><p>Determines if filtering (global and by column) should ignore case</p></td>
-          </tr>
-          <tr>
-            <td><code>showGlobalFilter</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.showGlobalFilter}}</pre></td>
-            <td><p>Determines if "Global filter"-field should be shown</p></td>
-          </tr>
-          <tr>
-            <td><code>focusGlobalFilter</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.focusGlobalFilter}}</pre></td>
-            <td><p>Determines if focus should be on the "Global filter"-field on component render</p></td>
-          </tr>
-          <tr>
-            <td><code>doFilteringByHiddenColumns</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.doFilteringByHiddenColumns}}</pre></td>
-            <td><p>Determines if filtering should be done by hidden columns</p><p class="alert alert-info">Notice: after changing this value filtering results will be updated only after filter options are changed</p></td>
-          </tr>
-          <tr>
-            <td><code>displayDataChangedAction</code></td>
-            <td>String</td>
-            <td><pre>{{c.displayDataChangedAction}}</pre></td>
-            <td><p>Action-name sent on user interaction. The action will receive the current settings of the table as parameter.</p></td>
-          </tr>
-          <tr>
-            <td><code>sendDisplayDataChangedAction</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.sendDisplayDataChangedAction}}</pre></td>
-            <td><p>Determines if action on user interaction should be sent</p></td>
-          </tr>
-          <tr>
-            <td><code>columnsVisibilityChangedAction</code></td>
-            <td>String</td>
-            <td><pre>{{c.columnsVisibilityChangedAction}}</pre></td>
-            <td><p>Action-name sent on change of visible columns. The action will receive an array of objects as parameter, where every object looks like this: <code>{ propertyName: 'firstName', isHidden: true, mayBeHidden: false }</code>.</p></td>
-          </tr>
-          <tr>
-            <td><code>sendColumnsVisibilityChangedAction</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.sendColumnsVisibilityChangedAction}}</pre></td>
-            <td><p>Determines if action on change of visible columns should be sent</p></td>
-          </tr>
-          <tr>
-            <td><code>columnsAreUpdateable</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.columnsAreUpdateable}}</pre></td>
-            <td><p>Determines if <code>processedColumns</code> will be updated if <code>columns</code> are changed (<code>propertyName</code> and <code>template</code> are observed).</p><p class="alert alert-danger"><strong>IMPORTANT</strong> All filter, sort and visibility options will be dropped to the default values while updating.</p></td>
-          </tr>
-          <tr>
-            <td><code>columnFieldsToCheckUpdate</code></td>
-            <td>String[]</td>
-            <td><pre>{{c.columnFieldsToCheckUpdate}}</pre></td>
-            <td><p><code>columns</code>-fields which are observed to update shown table-columns. It is used only if <code>columnsAreUpdateable</code> is <code>true</code></p></td>
-          </tr>
-          <tr>
-            <td><code>simplePaginationTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.simplePaginationTemplate}}</pre></td>
-            <td><p>Path to the custom template with pagination. Ignored if <code>useNumericPagination</code> is <code>true</code></p></td>
-          </tr>
-          <tr>
-            <td><code>numericPaginationTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.numericPaginationTemplate}}</pre></td>
-            <td><p>Path to the custom template with numeric pagination. Used if <code>useNumericPagination</code> is <code>true</code></p></td>
-          </tr>
-          <tr>
-            <td><code>tableFooterTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.tableFooterTemplate}}</pre></td>
-            <td><p>Path to the custom template with table footer.</p></td>
-          </tr>
-          <tr>
-            <td><code>componentFooterTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.componentFooterTemplate}}</pre></td>
-            <td><p>Path to the custom template with component footer. Used if <code>showComponentFooter</code> is <code>true</code></p></td>
-          </tr>
-          <tr>
-            <td><code>pageSizeTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.pageSizeTemplate}}</pre></td>
-            <td><p>Path to the custom template for page size</p></td>
-          </tr>
-          <tr>
-            <td><code>showPageSize</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.showPageSize}}</pre></td>
-            <td><p>Determines if page size should be shown</p></td>
-          </tr>
-          <tr>
-            <td><code>globalFilterTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.globalFilterTemplate}}</pre></td>
-            <td><p>Path to the custom template with global filter. Used if <code>showGlobalFilter</code> is <code>true</code></p></td>
-          </tr>
-          <tr>
-            <td><code>columnsDropdownTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.columnsDropdownTemplate}}</pre></td>
-            <td><p>Path to the custom template with columns dropdown. Used if <code>showColumnsDropdown</code> is <code>true</code></p></td>
-          </tr>
-          <tr>
-            <td><code>rowTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.rowTemplate}}</pre></td>
-            <td><p>Path to the custom template with table's row</p></td>
-          </tr>
-          <tr>
-            <td><code>noDataShowTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.noDataShowTemplate}}</pre></td>
-            <td><p>Path to the custom template for row with message about no available data</p></td>
-          </tr>
-          <tr>
-            <td><code>allColumnsHiddenTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.allColumnsHiddenTemplate}}</pre></td>
-            <td><p>Path to the custom template for row with message about all columns are hidden</p></td>
-          </tr>
-          <tr>
-            <td><code>headerSortingRowTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.headerSortingRowTemplate}}</pre></td>
-            <td><p>Path to the custom template with header row for column names</p></td>
-          </tr>
-          <tr>
-            <td><code>headerSortingIconsTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.headerSortingIconsTemplate}}</pre></td>
-            <td><p>Path to the custom template for sorting icons</p></td>
-          </tr>
-          <tr>
-            <td><code>headerFilteringRowTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.headerFilteringRowTemplate}}</pre></td>
-            <td><p>Path to the custom template with header row for column filters</p></td>
-          </tr>
-          <tr>
-            <td><code>headerGroupedRowsTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.headerGroupedRowsTemplate}}</pre></td>
-            <td><p>Path to the custom template with header rows for columns grouping</p></td>
-          </tr>
-          <tr>
-            <td><code>expandedRowTemplate</code></td>
-            <td>String</td>
-            <td><pre>{{c.expandedRowTemplate}}</pre></td>
-            <td><p>Path to the custom template with expanded row content</p></td>
-          </tr>
-          <tr>
-            <td><code>multipleExpand</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.multipleExpand}}</pre></td>
-            <td><p><code>true</code> - allow to expand more than 1 row<br />
-              <code>false</code> - only 1 row may be expanded in the same time</p></td>
-          </tr>
-          <tr>
-            <td><code>selectRowOnClick</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.selectRowOnClick}}</pre></td>
-            <td><p>Allow or disallow to select any rows on clicking them. Rows can still be selected programmatically. If `false` - no row can be selected</p></td>
-          </tr>
-          <tr>
-            <td><code>multipleSelect</code></td>
-            <td>Boolean</td>
-            <td><pre>{{c.multipleSelect}}</pre></td>
-            <td><p>Allow or disallow to select multiple rows. If `false` - only one row may be selected in the same time</p></td>
-          </tr>
-          <tr>
-            <td><code>preselectedItems</code></td>
-            <td>Array</td>
-            <td><pre>{{c.preselectedItems}}</pre></td>
-            <td><p>Rows with this items should be preselected on component init.</p><p class="alert alert-danger"><strong>IMPORTANT</strong> It's NOT a list of indexes!</p></td>
-          </tr>
-          <tr>
-            <td><code>customMessages</code></td>
-            <td>Object</td>
-            <td><pre>{}</pre></td>
-            <td>
-              <p>Overrides for messages used in the component. Defaults:</p>
-              <pre><code class="javascript">{{to-string c 'messages'}}</code></pre>
-            </td>
-          </tr>
-          <tr>
-            <td><code>customIcons</code></td>
-            <td>Object</td>
-            <td><pre>{}</pre></td>
-            <td>
-              <p>Overrides for icons-classes used in the component. Defaults:</p>
-              <pre><code class="javascript">{{to-string c 'icons'}}</code></pre>
-            </td>
-          </tr>
-          <tr>
-            <td><code>customClasses</code></td>
-            <td>Object</td>
-            <td><pre>{}</pre></td>
-            <td>
-              <p>Overrides for css-classes (excluding <code>icons</code>) used in the component. Defaults:</p>
-              <pre><code class="javascript">{{to-string c 'classes'}}</code></pre>
-            </td>
-          </tr>
-        </tbody>
-      </table>
-    </div>
-  </div>
-
 {{outlet}}
Index: addon/components/models-table/columns-hidden.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/columns-hidden.js	(revision )
+++ addon/components/models-table/columns-hidden.js	(revision )
@@ -0,0 +1,70 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/columns-hidden';
+
+/**
+ * Table row used within [models-table/table-body](Components.ModelsTableTableBody.html).
+ *
+ * Component used when all columns are hidden and no data items are shown. Usually it contains a simple message.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#if body.allColumnsAreHidden}}
+ *         {{#body.columns-hidden as |ch|}}
+ *             Any message here
+ *         {{/body.columns-hidden}}
+ *       {{else}}
+ *         {{! ... }}
+ *       {{/if}}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTableColumnsHidden
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tr',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTableTable/columnsCount:property"}}ModelsTable.columnsCount{{/crossLink}}
+   *
+   * @property columnsCount
+   * @type number
+   * @default null
+   */
+  columnsCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+});
Index: tests/dummy/app/routes/examples/example.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/example.js	(revision )
+++ tests/dummy/app/routes/examples/example.js	(revision )
@@ -0,0 +1,44 @@
+import Route from '@ember/routing/route';
+import {get} from '@ember/object';
+import {A} from '@ember/array';
+import {next} from '@ember/runloop';
+
+export default Route.extend({
+  beforeModel() {
+    return this.get('store').query('user', {pageSize: 100});
+  },
+  model() {
+    return this.get('store').query('user', {});
+  },
+
+  setupController(controller) {
+    controller.set('columns', A([
+      {propertyName: 'index'},
+      {propertyName: 'firstName'},
+      {propertyName: 'lastName'},
+      {propertyName: 'age'},
+      {propertyName: 'city'}
+    ]));
+    controller.set('filterQueryParameters', {
+      globalFilter: 'globalSearch',
+      sort: 'sort',
+      sortDirection: 'sortDirection',
+      page: 'page',
+      pageSize: 'pageSize'
+    });
+    controller.set('data', A(get(this, 'store').peekAll('user').slice()));
+    return this._super(...arguments);
+  },
+
+  actions: {
+    didTransition() {
+      next(() => {
+        if (window && window['Prism']) {
+          Prism.highlightAll();
+        }
+      });
+      return true;
+    }
+  }
+
+});
Index: tests/dummy/app/components/custom-sort-cell-action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-sort-cell-action.js	(revision )
+++ tests/dummy/app/components/custom-sort-cell-action.js	(revision )
@@ -0,0 +1,12 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/custom-sort-cell-action';
+
+export default Component.extend({
+  layout,
+  actions: {
+    sendAction() {
+      get(this, 'sendAction')('externalAction', get(this, 'record'));
+    }
+  }
+});
Index: addon/templates/components/models-table/page-size-select.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/page-size-select.hbs	(revision )
+++ addon/templates/components/models-table/page-size-select.hbs	(revision )
@@ -0,0 +1,26 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      select=(
+        component "models-table/select"
+        options=pageSizeOptions
+        value=pageSize
+        themeInstance=themeInstance
+        sendAction=sendAction
+        class="changePageSize"
+      )
+      themeInstance=themeInstance
+      pageSizeOptions=pageSizeOptions
+      pageSize=pageSize
+      sendAction=sendAction
+    )
+  }}
+{{else}}
+  {{models-table/select
+    options=pageSizeOptions
+    value=pageSize
+    themeInstance=themeInstance
+    sendAction=sendAction
+    class="changePageSize"
+  }}
+{{/if}}
\ No newline at end of file
Index: tests/dummy/app/templates/examples/select-rows-with-checkboxes.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{my-table-with-custom-header data=model columns=columns multipleSelect=true sendDisplayDataChangedAction=true}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n        <pre><code class=\"handlebars\">&lbrace;&lbrace;my-table-with-custom-header\n  data=model\n  columns=columns\n  multipleSelect=true\n  sendDisplayDataChangedAction=true&rbrace;&rbrace;</code></pre>\n\n    <p><code>my-table-with-custom-header</code></p>\n    <p>Same as <code>models-table</code> but with one extra-action <code>toggleAllSelection</code>:</p>\n    <pre><code class=\"javascript\">{{to-string c 'toggleAllSelection'}}</code></pre>\n\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n\n    <p>Action called on select/deselect for every row - <code>displayDataChanged</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'displayDataChanged'}}</code></pre>\n  </div>\n</div>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/select-rows-with-checkboxes.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/select-rows-with-checkboxes.hbs	(revision )
@@ -1,26 +1,46 @@
+<h4>Select rows with checkboxes <small>simple table</small></h4>
+{{models-table data=data columns=columns multipleSelect=true}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
+  <div class="col-md-6">
+    <p><code>select-row-checkbox</code></p>
+    <pre><code class="language-javascript">import Component from '@ember/component';
+import {get} from '@ember/object';
+import layout from '../templates/components/select-row-checkbox';
+export default Component.extend({
+  layout,
+  actions: {
+    clickOnRow(index, record, event) {
+      get(this, 'clickOnRow')(index, record);
+      event.stopPropagation();
+    }
+  }
+});
+</code></pre>
+    <pre><code class="language-handlebars">{{selectRowCheckboxTemplate}}</code></pre>
+
+    <p><code>select-all-rows-checkbox</code></p>
+    <pre><code class="language-javascript">import Component from '@ember/component';
+import {get} from '@ember/object';
+import layout from '../templates/components/select-all-rows-checkbox';
+export default Component.extend({
+  layout,
+  actions: {
+    toggleAllSelection() {
+      get(this, 'toggleAllSelection')();
+    }
+  }
+});
+
+</code></pre>
+    <pre><code class="language-handlebars">{{selectAllRowsCheckboxTemplate}}</code></pre>
   </div>
-  <div class="col-md-8">
-    {{my-table-with-custom-header data=model columns=columns multipleSelect=true sendDisplayDataChangedAction=true}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;my-table-with-custom-header
-  data=model
+  <div class="col-md-6">
+    <p>Component usage</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
   columns=columns
-  multipleSelect=true
-  sendDisplayDataChangedAction=true&rbrace;&rbrace;</code></pre>
-
-    <p><code>my-table-with-custom-header</code></p>
-    <p>Same as <code>models-table</code> but with one extra-action <code>toggleAllSelection</code>:</p>
-    <pre><code class="javascript">{{to-string c 'toggleAllSelection'}}</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-
-    <p>Action called on select/deselect for every row - <code>displayDataChanged</code>:</p>
-    <pre><code class="javascript">{{to-string this 'displayDataChanged'}}</code></pre>
+  multipleSelect=true&rbrace;&rbrace;</code></pre>
+    <p><code>columns</code></p>
+    <pre><code class="language-javascript">{{to-string this 'columns'}}</code></pre>
   </div>
-</div>
+</div>
\ No newline at end of file
Index: app/components/models-table/row-sorting.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/row-sorting.js	(revision )
+++ app/components/models-table/row-sorting.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/row-sorting';
Index: tests/dummy/app/templates/examples/without-footer.hbs
===================================================================
--- tests/dummy/app/templates/examples/without-footer.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/without-footer.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,18 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns showComponentFooter=false}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;models-table
-          data=model
-          columns=columns
-          showComponentFooter=false&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/dummy/app/templates/components/custom-sort-cell-action.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-sort-cell-action.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-sort-cell-action.hbs	(revision )
@@ -0,0 +1,4 @@
+{{column.title}}
+<span class="{{if column.sortAsc themeInstance.sort-asc}} {{if column.sortDesc themeInstance.sort-desc}}"></span>
+<button class="action" {{action 'sendAction'}}></button>
+{{yield}}
\ No newline at end of file
Index: tests/dummy/app/templates/examples/custom-messages.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table data=model columns=columns customMessages=customMessages}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n      <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n        data=model\n        columns=columns\n        customMessages=customMessages&rbrace;&rbrace;</code></pre>\n    <p><code>customMessages</code> (must be <code>Ember.Object</code>):</p>\n    <pre><code class=\"javascript\">{{to-string this 'customMessages'}}</code></pre>\n  </div>\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/custom-messages.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/custom-messages.hbs	(revision )
@@ -1,17 +1,15 @@
+<h4>Custom messages</h4>
+{{models-table data=data columns=columns customMessages=customMessages}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns customMessages=customMessages}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        customMessages=customMessages&rbrace;&rbrace;</code></pre>
-    <p><code>customMessages</code> (must be <code>Ember.Object</code>):</p>
-    <pre><code class="javascript">{{to-string this 'customMessages'}}</code></pre>
+  <div class="col-md-6">
+    <p>Component usage</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
+  columns=columns
+  customMessages=customMessages&rbrace;&rbrace;</code></pre>
+  </div>
+  <div>
+    <p><code>customMessages</code></p>
+    <pre><code class="language-javascript">{{to-string this 'customMessages'}}</code></pre>
   </div>
 </div>
\ No newline at end of file
Index: tests/integration/components/models-table/page-size-select-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table/page-size-select-test.js	(revision )
+++ tests/integration/components/models-table/page-size-select-test.js	(revision )
@@ -0,0 +1,62 @@
+import { moduleForComponent, test } from 'ember-qunit';
+import hbs from 'htmlbars-inline-precompile';
+
+import ModelsTableBs from '../../../pages/models-table-bs';
+import { startMirage } from 'dummy/initializers/ember-cli-mirage';
+
+import { generateColumns } from '../../../helpers/f';
+
+const {rows} = ModelsTableBs;
+
+moduleForComponent('models-table/page-size-select', 'Integration | Component | models table/page size select', {
+  integration: true,
+  beforeEach() {
+    ModelsTableBs.setContext(this);
+    this.server = startMirage();
+    this.server.createList('user', 100);
+    this.setProperties({
+      data: this.server.db.users,
+      columns: generateColumns(['index'])
+    });
+  },
+  afterEach() {
+    this.server.shutdown();
+    ModelsTableBs.removeContext();
+  }
+});
+
+test('dropdown is shown', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{footer.size-select}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.equal(ModelsTableBs.pageSize, '10');
+  ModelsTableBs.changePageSize(25);
+  assert.equal(rows().count, 25);
+  this.set('data', this.server.db.users.slice(0, 15));
+  assert.equal(ModelsTableBs.pageSize, '25');
+  assert.equal(rows().count, 15);
+});
+
+test('dropdown is shown (2)', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{#footer.size-select as |s|}}
+        {{s.select}}
+      {{/footer.size-select}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.equal(ModelsTableBs.pageSize, '10');
+  ModelsTableBs.changePageSize(25);
+  assert.equal(rows().count, 25);
+  this.set('data', this.server.db.users.slice(0, 15));
+  assert.equal(ModelsTableBs.pageSize, '25');
+  assert.equal(rows().count, 15);
+});
\ No newline at end of file
Index: tests/dummy/app/templates/components/custom-filter-cell-action.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-filter-cell-action.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-filter-cell-action.hbs	(revision )
@@ -0,0 +1,2 @@
+<button class="action" {{action "sendAction"}}></button>
+{{yield}}
\ No newline at end of file
Index: tests/dummy/app/templates/components/custom-sort-cell.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-sort-cell.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-sort-cell.hbs	(revision )
@@ -0,0 +1,4 @@
+{{column.originalDefinition.CustomColumString}}|{{column.originalDefinition.CustomColumObject.name}}|{{column.originalDefinition.CustomColumBool}}|{{column.originalDefinition.CustomColumNumber}}
+
+<span class="{{if column.sortAsc themeInstance.sort-asc}} {{if column.sortDesc themeInstance.sort-desc}}"></span>
+{{yield}}
\ No newline at end of file
Index: tests/dummy/app/templates/examples/filtering-select-box-bool.hbs
===================================================================
--- tests/dummy/app/templates/examples/filtering-select-box-bool.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/filtering-select-box-bool.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,17 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;models-table
-          data=model
-          columns=columns&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/dummy/app/styles/app.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>a:hover {\n    text-decoration: none;\n}\na.active {\n    font-weight: 700;\n}\npre {\n    text-align: left;\n    white-space: pre-line;\n}\n.table-footer {\n    border: 1px solid #ddd;\n    padding: 5px 0;\n}\n\n.models-table-wrapper {\n    margin-bottom: 20px;\n}\n\n.btn-default {\n    background-image: none !important;\n}\n\n.columns-dropdown {\n    margin-bottom: 20px;\n}\n\n.table-column-options.table > tbody > tr > td {\n    border-top-width: 0;\n}\n\ntr.selected-row>td, tr.selected-expand>td {\n    background: #C6E746;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/styles/app.css	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/styles/app.css	(revision )
@@ -31,4 +31,9 @@
 
 tr.selected-row>td, tr.selected-expand>td {
     background: #C6E746;
+}
+
+.navbar-text.gh {
+    margin-top: 13px !important;
+    margin-bottom: 11px !important;
 }
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/numeric-pagination.js
===================================================================
--- tests/dummy/app/controllers/examples/numeric-pagination.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/numeric-pagination.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,29 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A, set} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Table with numeric navigation',
-  model: A(Array.prototype.concat(generateContent(30), generateContent(30), generateContent(30), generateContent(30))).map((item, index) => {set(item, 'id', index + 1); return item;}),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
-});
\ No newline at end of file
Index: tests/integration/components/models-table/cell-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table/cell-test.js	(revision )
+++ tests/integration/components/models-table/cell-test.js	(revision )
@@ -0,0 +1,25 @@
+import { moduleForComponent, test } from 'ember-qunit';
+import hbs from 'htmlbars-inline-precompile';
+
+moduleForComponent('models-table/cell', 'Integration | Component | models table/cell', {
+  integration: true
+});
+
+test('it renders', function(assert) {
+
+  // Set any properties with this.set('myProperty', 'value');
+  // Handle any actions with this.on('myAction', function(val) { ... });
+
+  this.render(hbs`{{models-table/cell}}`);
+
+  assert.equal(this.$().text().trim(), '');
+
+  // Template block usage:
+  this.render(hbs`
+    {{#models-table/cell}}
+      template block text
+    {{/models-table/cell}}
+  `);
+
+  assert.equal(this.$().text().trim(), 'template block text');
+});
Index: app/components/models-table/summary.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/summary.js	(revision )
+++ app/components/models-table/summary.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/summary';
Index: addon/templates/components/models-table/row-sorting.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/row-sorting.hbs	(revision )
+++ addon/templates/components/models-table/row-sorting.hbs	(revision )
@@ -0,0 +1,59 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      themeInstance=themeInstance
+      selectedItems=selectedItems
+      expandedItems=expandedItems
+      sendAction=sendAction
+      expandAllRows=expandAllRows
+      collapseAllRows=collapseAllRows
+      toggleAllSelection=toggleAllSelection
+      processedColumns=processedColumns
+    )
+  }}
+{{else}}
+  {{#each processedColumns as |column|}}
+    {{#if column.isVisible}}
+      {{#if column.useSorting}}
+        <th class="{{themeInstance.theadCell}} {{column.className}}" {{action "sort" column}}>
+          {{#if column.componentForSortCell}}
+            {{component
+              column.componentForSortCell
+              column=column
+              data=data
+              selectedItems=selectedItems
+              expandedItems=expandedItems
+              sendAction=sendAction
+              themeInstance=themeInstance
+              expandAllRows=expandAllRows
+              toggleAllSelection=toggleAllSelection
+              collapseAllRows=collapseAllRows
+            }}
+          {{else}}
+            {{column.title}}
+            <span class="{{if column.sortAsc themeInstance.sort-asc}} {{if column.sortDesc themeInstance.sort-desc}}"></span>
+          {{/if}}
+        </th>
+      {{else}}
+        <th class="{{themeInstance.theadCell}} {{themeInstance.theadCellNoSorting}} {{column.className}}">
+          {{#if column.componentForSortCell}}
+            {{component
+              column.componentForSortCell
+              column=column
+              data=data
+              selectedItems=selectedItems
+              expandedItems=expandedItems
+              sendAction=sendAction
+              themeInstance=themeInstance
+              expandAllRows=expandAllRows
+              collapseAllRows=collapseAllRows
+              toggleAllSelection=toggleAllSelection
+            }}
+          {{else}}
+            {{column.title}}
+          {{/if}}
+        </th>
+      {{/if}}
+    {{/if}}
+  {{/each}}
+{{/if}}
\ No newline at end of file
Index: tests/dummy/app/components/custom-sort-cell.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-sort-cell.js	(revision )
+++ tests/dummy/app/components/custom-sort-cell.js	(revision )
@@ -0,0 +1,6 @@
+import Component from '@ember/component';
+import layout from '../templates/components/custom-sort-cell';
+
+export default Component.extend({
+  layout
+});
Index: addon/components/models-table/row.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/row.js	(revision )
+++ addon/components/models-table/row.js	(revision )
@@ -0,0 +1,154 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../../templates/components/models-table/row';
+
+/**
+ * Table body row is used within [models-table/table-body](Components.ModelsTableTableBody.html).
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#each body.visibleContent as |record index|}}
+ *         {{body.row record=record index=index}}
+ *       {{/each}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#each body.visibleContent as |record index|}}
+ *         {{#body.row record=record index=index as |row|}}
+ *           {{#each row.visibleProcessedColumns as |column|}}
+ *             {{row.cell column=column}}
+ *           {{/each}}
+ *         {{/body.row}}
+ *       {{/each}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * **Important!** You must bound `record` and `index` to the `row`.
+ *
+ * ModelsTableTableHeader yields references to the following contextual components:
+ *
+ * * [models-table/cell](Components.ModelsTableCell.html) - component represents each row's cell
+ *
+ * Check own docs for each component to get detailed info.
+
+ *
+ * @class ModelsTableRow
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  classNameBindings: ['isSelected:selected-row'],
+  tagName: 'tr',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/visibleProcessedColumns:property"}}ModelsTable.visibleProcessedColumns{{/crossLink}}
+   *
+   * @property visibleProcessedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  visibleProcessedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clickOnRow:method"}}ModelsTable.actions.clickOnRow{{/crossLink}}
+   *
+   * @event clickOnRow
+   */
+  clickOnRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandRow:method"}}ModelsTable.actions.expandRow{{/crossLink}}
+   *
+   * @event expandRow
+   */
+  expandRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseRow:method"}}ModelsTable.actions.collapseRow{{/crossLink}}
+   *
+   * @event collapseRow
+   */
+  collapseRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_selectedItems:property"}}ModelsTable._selectedItems{{/crossLink}}
+   *
+   * @property selectedItems
+   * @type object[]
+   * @default null
+   */
+  selectedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_expandedItems:property"}}ModelsTable._expandedItems{{/crossLink}}
+   *
+   * @property expandedItems
+   * @type number[]
+   * @default null
+   */
+  expandedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  click() {
+    get(this, 'clickOnRow')(get(this, 'index'), get(this, 'record'));
+  }
+});
Index: addon/templates/components/models-table/footer.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/footer.hbs	(revision )
+++ addon/templates/components/models-table/footer.hbs	(revision )
@@ -0,0 +1,105 @@
+<div class={{themeInstance.tfooterInternalWrapper}}>
+  {{#if hasBlock}}
+    {{yield
+      (hash
+        summary=(
+          component "models-table/summary"
+          firstIndex=firstIndex
+          lastIndex=lastIndex
+          recordsCount=recordsCount
+          anyFilterUsed=anyFilterUsed
+          themeInstance=themeInstance
+          messages=messages
+          clearFilters=clearFilters
+          sendAction=sendAction
+          useNumericPagination=useNumericPagination
+        )
+        size-select=(
+          component "models-table/page-size-select"
+          pageSizeOptions=pageSizeOptions
+          pageSize=pageSize
+          themeInstance=themeInstance
+          messages=messages
+          sendAction=sendAction
+        )
+        pagination-numeric=(
+          component "models-table/pagination-numeric"
+          currentPageNumber=currentPageNumber
+          recordsCount=recordsCount
+          pageSize=pageSize
+          pagesCount=pagesCount
+          themeInstance=themeInstance
+          messages=messages
+          goToPage=goToPage
+          sendAction=sendAction
+        )
+        pagination-simple=(
+          component "models-table/pagination-simple"
+          currentPageNumber=currentPageNumber
+          recordsCount=recordsCount
+          pagesCount=pagesCount
+          pageSize=pageSize
+          themeInstance=themeInstance
+          messages=messages
+          goToPage=goToPage
+          sendAction=sendAction
+        )
+        themeInstance=themeInstance
+      )
+    }}
+  {{else}}
+  {{! table summary start }}
+    {{models-table/summary
+      firstIndex=firstIndex
+      lastIndex=lastIndex
+      recordsCount=recordsCount
+      anyFilterUsed=anyFilterUsed
+      themeInstance=themeInstance
+      clearFilters=clearFilters
+      messages=messages
+      sendAction=sendAction
+      useNumericPagination=useNumericPagination
+    }}
+    {{! table summary end }}
+    {{! pagesize selection start }}
+    {{#if showPageSize}}
+      <div class="{{themeInstance.pageSizeWrapper}}">
+        <div class="{{themeInstance.pageSizeSelectWrapper}}">
+          {{models-table/page-size-select
+            pageSizeOptions=pageSizeOptions
+            pageSize=pageSize
+            themeInstance=themeInstance
+            messages=messages
+            sendAction=sendAction
+          }}
+        </div>
+      </div>
+    {{/if}}
+    {{! pagesize selection end }}
+    {{! pagination start }}
+    {{#if useNumericPagination}}
+      {{models-table/pagination-numeric
+        currentPageNumber=currentPageNumber
+        recordsCount=recordsCount
+        pageSize=pageSize
+        pagesCount=pagesCount
+        goToPage=goToPage
+        themeInstance=themeInstance
+        messages=messages
+        sendAction=sendAction
+      }}
+    {{else}}
+      {{models-table/pagination-simple
+        currentPageNumber=currentPageNumber
+        recordsCount=recordsCount
+        pagesCount=pagesCount
+        pageSize=pageSize
+        goToPage=goToPage
+        themeInstance=themeInstance
+        messages=messages
+        sendAction=sendAction
+      }}
+    {{/if}}
+  {{! pagination end }}
+  {{/if}}
+</div>
\ No newline at end of file
Index: tests/dummy/app/routes/examples/grouped-headers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/grouped-headers.js	(revision )
+++ tests/dummy/app/routes/examples/grouped-headers.js	(revision )
@@ -0,0 +1,16 @@
+import ExampleRoute from './example';
+
+export default ExampleRoute.extend({
+  setupController(controller) {
+    this._super(...arguments);
+    controller.set('groupedHeaders', [
+      [
+        {title: 'Big Title', colspan: 5}
+      ],
+      [
+        {title: 'Subtitle 1', colspan: 3},
+        {title: 'Subtitle 2', colspan: 2}
+      ]
+    ]);
+  }
+});
\ No newline at end of file
Index: addon/utils/better-compare.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {\n  typeOf,\n  compare,\n  Comparable\n} = Ember;\n\n/**\n * This is a better version of Ember.compare.\n * Sadly, Ember.compare() will always return 0 when comparing two instances of JavaScript objects that do not\n * implement the Comparable-mixin.\n * This function will compare instances via their `valueOf()` method if available.\n *\n * @param {Mixed} v\n * @param {Mixed} w\n * @return {number}\n */\nexport default function betterCompare(v, w) {\n  let type1 = typeOf(v);\n  let type2 = typeOf(w);\n\n  if (Comparable) {\n    if (type1 === 'instance' && Comparable.detect(v) && v.constructor.compare) {\n      return v.constructor.compare(v, w);\n    }\n\n    if (type2 === 'instance' && Comparable.detect(w) && w.constructor.compare) {\n      return w.constructor.compare(w, v) * -1;\n    }\n  }\n\n  if ((type1 === 'instance' && type2 === 'instance') || (type1 === 'object' && type2 === 'object')) {\n    if (typeOf(v.compare) === 'function' && typeOf(w.compare) === 'function') {\n      return v.compare(v, w);\n    }\n    if (typeOf(v.valueOf) === 'function' && typeOf(w.valueOf) === 'function') {\n      return compare(v.valueOf(), w.valueOf());\n    }\n  }\n\n  return compare(v, w);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/utils/better-compare.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/utils/better-compare.js	(revision )
@@ -1,10 +1,4 @@
-import Ember from 'ember';
-
-const {
-  typeOf,
-  compare,
-  Comparable
-} = Ember;
+import { compare, typeOf } from '@ember/utils';
 
 /**
  * This is a better version of Ember.compare.
@@ -14,22 +8,12 @@
  *
  * @param {Mixed} v
  * @param {Mixed} w
- * @return {number}
+ * @returns {number}
  */
 export default function betterCompare(v, w) {
   let type1 = typeOf(v);
   let type2 = typeOf(w);
 
-  if (Comparable) {
-    if (type1 === 'instance' && Comparable.detect(v) && v.constructor.compare) {
-      return v.constructor.compare(v, w);
-    }
-
-    if (type2 === 'instance' && Comparable.detect(w) && w.constructor.compare) {
-      return w.constructor.compare(w, v) * -1;
-    }
-  }
-
   if ((type1 === 'instance' && type2 === 'instance') || (type1 === 'object' && type2 === 'object')) {
     if (typeOf(v.compare) === 'function' && typeOf(w.compare) === 'function') {
       return v.compare(v, w);
Index: tests/dummy/app/templates/examples/expandable-rows.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    <p>Some column should has template with actions <code>expandRow</code> and <code>collapseRow</code> (see <code>app/templates/components/models-table/expand-row-cell.hbs</code>). This column should have field <code>mayBeHidden</code> set to <code>true</code>. Value for <code>expandedRowTemplate</code> should be provided to the component. It's a path to the template with information shown in the expanded row. Set <code>multipleExpand</code> to <code>true</code> to allow multiple rows be expanded in the same time.</p>\n    {{models-table data=model columns=columns expandedRowTemplate=expandedRowTemplate multipleExpand=true}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n    <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n        data=model\n        columns=columns\n        expandedRowTemplate=expandedRowTemplate\n        multipleExpand=true&rbrace;&rbrace;</code></pre>\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n  </div>\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/expandable-rows.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/expandable-rows.hbs	(revision )
@@ -1,19 +1,61 @@
+<h4>Expandable Rows
+  <small>simple table</small>
+</h4>
+<p class="alert alert-info">Some column should has component with actions <code>expandRow</code> and
+  <code>collapseRow</code>. This column should have field <code>mayBeHidden</code> set to <code>false</code>. Value for <code>expandedRowComponent</code> should be provided to the component. It should be equal to the component name shown in the expanded row. Set <code>multipleExpand</code> to <code>true</code> to allow multiple rows be expanded in the same time.</p>
+{{models-table data=data columns=columns expandedRowComponent=expandedRowComponent multipleExpand=true}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
+  <div class="col-md-6">
+    <p><code>expand-all-toggle</code> component</p>
+    <pre><code class="language-javascript">import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/expand-all-toggle';
+export default Component.extend({
+  layout,
+  actions: {
+    collapseAllRows() {
+      get(this, 'collapseAllRows')();
+    },
+    expandAllRows() {
+      get(this, 'expandAllRows')();
+    }
+  }
+});
+</code></pre>
+    <pre><code class="language-handlebars">{{expandAllToggleTemplate}}</code></pre>
   </div>
-  <div class="col-md-8">
-    <p>Some column should has template with actions <code>expandRow</code> and <code>collapseRow</code> (see <code>app/templates/components/models-table/expand-row-cell.hbs</code>). This column should have field <code>mayBeHidden</code> set to <code>true</code>. Value for <code>expandedRowTemplate</code> should be provided to the component. It's a path to the template with information shown in the expanded row. Set <code>multipleExpand</code> to <code>true</code> to allow multiple rows be expanded in the same time.</p>
-    {{models-table data=model columns=columns expandedRowTemplate=expandedRowTemplate multipleExpand=true}}
+  <div class="col-md-6">
+    <p><code>expand-toggle</code> component</p>
+    <pre><code class="language-javascript">import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/expand-toggle';
+
+export default Component.extend({
+  layout,
+  actions: {
+    collapseRow(index, record) {
+      get(this, 'collapseRow')(index, record);
+    },
+    expandRow(index, record) {
+      get(this, 'expandRow')(index, record);
+    }
+  }
+});
+    </code></pre>
+    <pre><code class="language-handlebars">{{expandToggleTemplate}}</code></pre>
   </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-    <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        expandedRowTemplate=expandedRowTemplate
-        multipleExpand=true&rbrace;&rbrace;</code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
+</div>
+<div class="row">
+  <div class="col-md-6">
+    <p>Component usage</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
+  columns=columns
+  expandedRowComponent=expandedRowComponent
+  multipleExpand=true&rbrace;&rbrace;</code></pre>
+  </div>
+  <div class="col-md-6">
+    <p><code>columns</code></p>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
   </div>
 </div>
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/custom-actions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport generateContent from '../../utils/c';\n\nconst {A} = Ember;\n\nexport default Ember.Controller.extend({\n\n  title: 'Custom Actions',\n  model: generateContent(30),\n  columns: A([\n    {\n      propertyName: 'id',\n      title: 'ID'\n    },\n    {\n      propertyName: 'firstName',\n      title: 'First Name'\n    },\n    {\n      propertyName: 'lastName',\n      title: 'Last Name'\n    },\n    {\n      propertyName: 'city',\n      title: 'City'\n    },\n    {\n      title: 'Delete',\n      template: 'custom/delete'\n    }\n  ]),\n\n  actions: {\n    deleteRecord (record) {\n      var model = this.get('model');\n      this.set('model', model.without(record));\n    }\n  }\n\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/examples/custom-actions.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/custom-actions.js	(revision )
@@ -1,39 +1,10 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
+import Controller from '@ember/controller';
 
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Custom Actions',
-  model: generateContent(30),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    },
-    {
-      title: 'Delete',
-      template: 'custom/delete'
-    }
-  ]),
+export default Controller.extend({
 
   actions: {
     deleteRecord (record) {
-      var model = this.get('model');
-      this.set('model', model.without(record));
+      record.destroyRecord();
     }
   }
 
Index: tests/dummy/config/environment.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-env node */\n'use strict';\n\nmodule.exports = function(environment) {\n  let ENV = {\n    modulePrefix: 'dummy',\n    environment,\n    rootURL: '/',\n    locationType: 'hash',\n    EmberENV: {\n      FEATURES: {\n        // Here you can enable experimental features on an ember canary build\n        // e.g. 'with-controller': true\n      },\n      EXTEND_PROTOTYPES: {\n        // Prevent Ember Data from overriding Date.parse.\n        Date: false\n      }\n    },\n\n    APP: {\n      // Here you can pass flags/options to your application instance\n      // when it is created\n    }\n  };\n\n  if (environment === 'development') {\n    // ENV.APP.LOG_RESOLVER = true;\n    // ENV.APP.LOG_ACTIVE_GENERATION = true;\n    // ENV.APP.LOG_TRANSITIONS = true;\n    // ENV.APP.LOG_TRANSITIONS_INTERNAL = true;\n    // ENV.APP.LOG_VIEW_LOOKUPS = true;\n  }\n\n  if (environment === 'test') {\n    // Testem prefers this...\n    ENV.locationType = 'none';\n\n    // keep test console output quieter\n    ENV.APP.LOG_ACTIVE_GENERATION = false;\n    ENV.APP.LOG_VIEW_LOOKUPS = false;\n\n    ENV.APP.rootElement = '#ember-testing';\n  }\n\n  if (environment === 'production') {\n    ENV.rootURL = '/ember-models-table/';\n    ENV['ember-cli-mirage'] = {enabled: true};\n  }\n\n  return ENV;\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/config/environment.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/config/environment.js	(revision )
@@ -44,7 +44,7 @@
   }
 
   if (environment === 'production') {
-    ENV.rootURL = '/ember-models-table/';
+    ENV.rootURL = '/ember-models-table/v.2/';
     ENV['ember-cli-mirage'] = {enabled: true};
   }
 
Index: addon/components/models-table/columns-dropdown.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/columns-dropdown.js	(revision )
+++ addon/components/models-table/columns-dropdown.js	(revision )
@@ -0,0 +1,122 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../../templates/components/models-table/columns-dropdown';
+
+/**
+ * Dropdown with list of table's columns used within [models-table](Components.ModelsTable.html).
+ *
+ * It allows to toggle visibility for column sets or single column.
+ *
+ * Columns that should not be hidden must have property `canBeHidden` set to `false`.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{mt.columns-dropdown}}
+ *   {{! .... }}
+ * {{/models-table}}
+ *
+ * @namespace Components
+ * @class ModelsTableColumnsDropdown
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type object[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/columnDropdownOptions:property"}}ModelsTable.columnDropdownOptions{{/crossLink}}
+   *
+   * @property columnDropdownOptions
+   * @type object[]
+   * @default null
+   */
+  columnDropdownOptions: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.showAllColumns:method"}}ModelsTable.actions.showAllColumns{{/crossLink}}
+   *
+   * @event showAllColumns
+   */
+  showAllColumns: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.hideAllColumns:method"}}ModelsTable.actions.hideAllColumns{{/crossLink}}
+   *
+   * @event hideAllColumns
+   */
+  hideAllColumns: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.restoreDefaultVisibility:method"}}ModelsTable.actions.restoreDefaultVisibility{{/crossLink}}
+   *
+   * @event restoreDefaultVisibility
+   */
+  restoreDefaultVisibility: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.toggleColumnSet:method"}}ModelsTable.actions.toggleColumnSet{{/crossLink}}
+   *
+   * @event toggleColumnSet
+   */
+  toggleColumnSet: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.toggleHidden:method"}}ModelsTable.actions.toggleHidden{{/crossLink}}
+   *
+   * @event toggleHidden
+   */
+  toggleHidden: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  actions: {
+    showAllColumns() {
+      get(this, 'showAllColumns')();
+    },
+    hideAllColumns() {
+      get(this, 'hideAllColumns')();
+    },
+    restoreDefaultVisibility() {
+      get(this, 'restoreDefaultVisibility')();
+    },
+    toggleColumnSet(columnSet) {
+      get(this, 'toggleColumnSet')(columnSet);
+    },
+    toggleHidden(column) {
+      get(this, 'toggleHidden')(column);
+    }
+  }
+});
Index: app/templates/components/models-table/component-footer.hbs
===================================================================
--- app/templates/components/models-table/component-footer.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/component-footer.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,26 +0,0 @@
-<div class="{{classes.tfooterWrapper}}">
-  {{! table summary start }}
-  <div class="{{if useNumericPagination classes.footerSummaryNumericPagination classes.footerSummaryDefaultPagination}} {{classes.footerSummary}}">
-    {{summary}}
-    <a href="#" {{action "clearFilters"}} class="btn btn-link clearFilters {{unless anyFilterUsed "invisible"}}">
-      <span class="{{classes.clearAllFiltersIcon}}"></span>
-    </a>
-  </div>
-  {{! table summary end }}
-  {{! pagesize selection start }}
-  {{#if showPageSize}}
-    {{partial pageSizeTemplate}}
-  {{/if}}
-  {{! pagesize selection end }}
-  {{! pagination start }}
-  {{#if useNumericPagination}}
-    <div class="{{classes.paginationWrapper}} {{classes.paginationWrapperNumeric}}">
-      {{partial numericPaginationTemplate}}
-    </div>
-  {{else}}
-    <div class="{{classes.paginationWrapper}} {{classes.paginationWrapperDefault}}">
-      {{partial simplePaginationTemplate}}
-    </div>
-  {{/if}}
-  {{! pagination end }}
-</div>
Index: tests/dummy/app/components/cell-component.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport layout from '../templates/components/cell-component';\n\nexport default Ember.Component.extend({\n  layout\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/cell-component.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/components/cell-component.js	(revision )
@@ -1,6 +1,6 @@
-import Ember from 'ember';
+import Component from '@ember/component';
 import layout from '../templates/components/cell-component';
 
-export default Ember.Component.extend({
+export default Component.extend({
   layout
 });
Index: tests/dummy/app/controllers/examples/select-rows-with-checkboxes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport generateContent from '../../utils/c';\n\nconst {A, on, getOwner, set, Logger} = Ember;\n\nexport default Ember.Controller.extend({\n\n  title: 'Common table',\n  model: generateContent(20),\n  columns: A([\n    {\n      template: 'custom/checkbox',\n      useFilter: false,\n      mayBeHidden: false,\n      templateForSortCell: 'custom/checkbox-all'\n    },\n    {\n      propertyName: 'id'\n    },\n    {\n      propertyName: 'firstName'\n    },\n    {\n      propertyName: 'lastName'\n    },\n    {\n      propertyName: 'city'\n    }\n  ]),\n\n  actions: {\n    displayDataChanged(settings) {\n      Logger.log(settings.selectedItems);\n    }\n  },\n\n\n  // for demo purposes\n  c: {},\n  onInit: on('init', function() {\n    let owner = getOwner(this);\n    set(this, 'c', owner.lookup('component:my-table-with-custom-header'));\n  })\n\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/examples/select-rows-with-checkboxes.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/select-rows-with-checkboxes.js	(revision )
@@ -1,45 +1,5 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
+import Controller from '@ember/controller';
 
-const {A, on, getOwner, set, Logger} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Common table',
-  model: generateContent(20),
-  columns: A([
-    {
-      template: 'custom/checkbox',
-      useFilter: false,
-      mayBeHidden: false,
-      templateForSortCell: 'custom/checkbox-all'
-    },
-    {
-      propertyName: 'id'
-    },
-    {
-      propertyName: 'firstName'
-    },
-    {
-      propertyName: 'lastName'
-    },
-    {
-      propertyName: 'city'
-    }
-  ]),
-
-  actions: {
-    displayDataChanged(settings) {
-      Logger.log(settings.selectedItems);
-    }
-  },
-
-
-  // for demo purposes
-  c: {},
-  onInit: on('init', function() {
-    let owner = getOwner(this);
-    set(this, 'c', owner.lookup('component:my-table-with-custom-header'));
-  })
+export default Controller.extend({
 
 });
\ No newline at end of file
Index: tests/dummy/app/routes/examples/custom-messages.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/custom-messages.js	(revision )
+++ tests/dummy/app/routes/examples/custom-messages.js	(revision )
@@ -0,0 +1,18 @@
+import ExampleRoute from './example';
+import {set} from '@ember/object';
+
+export default ExampleRoute.extend({
+  setupController(controller) {
+    this._super(...arguments);
+    set(controller, 'customMessages', {
+      searchLabel: 'Se@rch',
+      'columns-title': 'ColumnZ',
+      'columns-showAll': 'Show Me All!',
+      'columns-hideAll': 'Hide All!',
+      'columns-restoreDefaults': 'Restore My Columns',
+      tableSummary: 'Now are showing %@ - %@ of %@',
+      allColumnsAreHidden: 'No visible columns, dude!',
+      noDataToShow: 'No data. Sorry, bro...'
+    });
+  }
+});
Index: tests/dummy/app/templates/components/custom-concat.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-concat.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-concat.hbs	(revision )
@@ -0,0 +1,2 @@
+{{record.index}}+{{record.reversedIndex}}
+{{yield}}
\ No newline at end of file
Index: addon/utils/column.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/utils/column.js	(revision )
+++ addon/utils/column.js	(revision )
@@ -0,0 +1,315 @@
+import { isEmpty, isNone } from '@ember/utils';
+import O, { get, set, computed, observer } from '@ember/object';
+import { A } from '@ember/array';
+
+/**
+ * Column definition class for ModelsTable columns
+ *
+ * Check its public properties
+ *
+ * @class ModelsTableColumn
+ * @extends Ember.Object
+ * @namespace Utils
+ * @private
+ */
+export default O.extend({
+
+  /**
+   * Field-name of the data's object shown in the current column. If it isn't provided, sorting and filtering options for current column are ignored
+   *
+   * @default ''
+   * @property propertyName
+   * @type string
+   */
+  propertyName: '',
+
+  /**
+   * Header for column. If it isn't provided, capitalized `propertyName` is used
+   *
+   * @default ''
+   * @property title
+   * @type string
+   */
+  title: null,
+
+  /**
+   * Custom component used in the column's cells
+   *
+   * @type string
+   * @property component
+   * @default ''
+   */
+  component: '',
+
+  /**
+   * Custom component used in the header cell with filter
+   *
+   * @type string
+   * @property componentForFilterCell
+   * @default ''
+   */
+  componentForFilterCell: '',
+
+  /**
+   * Custom component used in the header cell with sorting and column title
+   *
+   * @type string
+   * @property componentForSortCell
+   * @default ''
+   */
+  componentForSortCell: '',
+
+  /**
+   * Field-name for sorting by current column. If it isn't provided, `propertyName` is used
+   *
+   * @type string
+   * @property sortedBy
+   * @default ''
+   */
+  sortedBy: '',
+
+  /**
+   * The default sorting for this column. Can be either `asc` or `desc`. Needs to be set in conjunction with `sortPrecedence`,
+   otherwise it will not have any effect
+   *
+   * @type string
+   * @property sortDirection
+   * @default ''
+   */
+  sortDirection: '',
+
+  /**
+   * Sort precedence for this column - needs to be larger than -1 for sortDirection to take effect
+   *
+   * @type number
+   * @property sortPrecedence
+   * @default ''
+   */
+  sortPrecedence: null,
+
+  /**
+   * If sorting should be disabled for this column
+   *
+   * @property disableSorting
+   * @type boolean
+   * @default false
+   */
+  disableSorting: false,
+
+  /**
+   * If filtering should be disabled for this column
+   *
+   * @property disableFiltering
+   * @type boolean
+   * @default false
+   */
+  disableFiltering: false,
+
+  /**
+   * FilterString a default filtering for this column
+   *
+   * @property filterString
+   * @type string
+   * @default ''
+   */
+  filterString: '',
+
+  /**
+   * Custom data's property that is used to filter column. If it isn't provided, `propertyName` is used
+   *
+   * @type string
+   * @property filteredBy
+   * @default ''
+   */
+  filteredBy: '',
+
+  /**
+   * Sorting is column sorted now
+   *
+   * @property sorting
+   * @type boolean
+   * @default false
+   */
+  sorting: false,
+
+  /**
+   * Is current column hidden by default
+   *
+   * @property isHidden
+   * @default false
+   * @type boolean
+   */
+  isHidden: false,
+
+  /**
+   * Can current column be hidden. This field determines, if column appears in the columns-dropdown. If `mayBeHidden` is `true` and `isHidden` is also `true` for column, this column always be hidden
+   *
+   * @property mayBeHidden
+   * @default true
+   * @type boolean
+   */
+  mayBeHidden: true,
+
+  /**
+   * If `true` select-dropdown will be used for filtering by current column. Options are unique values for <code>data.@each.${propertyName}</code>
+   *
+   * @property filterWithSelect
+   * @type boolean
+   * @default false
+   */
+  filterWithSelect: false,
+
+  /**
+   * Should options in the select-box be sorted
+   *
+   * @property sortFilterOptions
+   * @default false
+   * @type boolean
+   */
+  sortFilterOptions: false,
+
+  /**
+   * List of option to the filter-box (used if {{#crossLink "Utils.ModelsTableColumn/filterWithSelect:property"}}filterWithSelect{{/crossLink}} is true)
+   *
+   * @type string[]|number[]|boolean[]
+   * @property predefinedFilterOptions
+   * @default null
+   */
+  predefinedFilterOptions: null,
+
+  /**
+   * Custom class-name for cells in the current column. This class-name will also be added to the header and filter of the column
+   *
+   * @property className
+   * @default ''
+   * @type string
+   */
+  className: '',
+
+  /**
+   * Custom function used to filter rows (used if {{#crossLink "Utils.ModelsTableColumn/filterWithSelect:property"}}filterWithSelect{{/crossLink}} is false)
+   *
+   * @property filterFunction
+   * @type function
+   */
+  filterFunction: null,
+
+  /**
+   * Placeholder for filter-input
+   *
+   * @property filterPlaceholder
+   * @type string
+   * @default ''
+   */
+  filterPlaceholder: '',
+
+  /**
+   * If this property is defined, link to the route will be rendered in the cell. {{#crossLink "Utils.ModelsTableColumn/propertyName:property"}}propertyName{{/crossLink}} is used as an anchor. If it's not declared, `id` will be used. <br /> Main idea for `routeName` is to provide a simple way to generate links for each model in the `data`. It should not be used for any other purposes
+   *
+   * @property routeName
+   * @type string
+   * @default ''
+   */
+  routeName: '',
+
+  /**
+   * Object containing the definition of the column passed into the component
+   *
+   * @property originalDefinition
+   * @type object
+   * @default null
+   * @readOnly
+   * @private
+   */
+  originalDefinition: null,
+
+  /**
+   * @type string
+   * @property cssPropertyName
+   * @private
+   * @readOnly
+   */
+  cssPropertyName: computed('propertyName', function () {
+    return get(this, 'propertyName').replace(/\./g, '-');
+  }),
+
+  /**
+   * @type boolean
+   * @property isVisible
+   * @private
+   * @readOnly
+   */
+  isVisible: computed.not('isHidden'),
+
+  /**
+   * @type boolean
+   * @property sortAsc
+   * @private
+   * @readOnly
+   */
+  sortAsc: computed.equal('sorting', 'asc'),
+
+  /**
+   * @type boolean
+   * @property sortDesc
+   * @private
+   * @readOnly
+   */
+  sortDesc: computed.equal('sorting', 'desc'),
+
+  /**
+   * @type boolean
+   * @property filterUsed
+   * @private
+   * @readOnly
+   */
+  filterUsed: computed.notEmpty('filterString'),
+
+  /**
+   * Allow sorting for column or not
+   *
+   * @type boolean
+   * @property useSorting
+   * @private
+   * @readOnly
+   */
+  useSorting: computed('sortedBy', 'propertyName', 'disableSorting', function () {
+    return !isNone(get(this, 'sortedBy') || get(this, 'propertyName')) && !get(this, 'disableSorting');
+  }),
+
+  /**
+   * Allow filtering for column or not
+   *
+   * @type boolean
+   * @property useFilter
+   * @private
+   * @readOnly
+   */
+  useFilter: computed('filteredBy', 'propertyName', 'disableFiltering', function () {
+    return !isNone(get(this, 'filteredBy') || get(this, 'propertyName')) && !get(this, 'disableFiltering');
+  }),
+
+  /**
+   * If preselected option doesn't exist after <code>filterOptions</code> update,
+   * <code>filterString</code> is reverted to empty string (basically, filtering for this column is dropped)
+   *
+   * @method cleanFilterString
+   * @private
+   */
+  cleanFilterString: observer('filterWithSelect', 'filterOptions.[]', 'filterString', function () {
+    let filterOptions = get(this, 'filterOptions');
+    let filterWithSelect = get(this, 'filterWithSelect');
+    let filterString = get(this, 'filterString');
+    if (!filterWithSelect || isEmpty(filterOptions)) {
+      return;
+    }
+    const filterOptionExists = A(filterOptions).find(option => {
+      const value = get(option, 'value');
+      return [value, '' + value].indexOf(filterString) !== -1;
+    });
+    if (!filterOptionExists) {
+      set(this, 'filterString', '');
+    }
+  })
+
+});
Index: tests/dummy/app/components/custom-filter-cell-action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-filter-cell-action.js	(revision )
+++ tests/dummy/app/components/custom-filter-cell-action.js	(revision )
@@ -0,0 +1,12 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/custom-filter-cell-action';
+
+export default Component.extend({
+  layout,
+  actions: {
+    sendAction() {
+      get(this, 'sendAction')('externalAction', get(this, 'record'));
+    }
+  }
+});
Index: addon/components/models-table/row-sorting.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/row-sorting.js	(revision )
+++ addon/components/models-table/row-sorting.js	(revision )
@@ -0,0 +1,127 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../../templates/components/models-table/row-sorting';
+
+/**
+ * Table header item used within [models-table/table-header](Components.ModelsTableTableHeader.html).
+ *
+ * Component generates tr with column titles in the separated cells. Click by each cell will sort table data by selected field. Check properties [disableSorting](Utils.ModelsTableColumn.html#property_disableSorting), [sortedBy](Utils.ModelsTableColumn.html#property_sortedBy) for ModelsTableColumn.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.header as |header|}}
+ *       {{header.row-sorting}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.header as |header|}}
+ *       {{#header.row-sorting as |rs|}}
+ *         {{#each rs.processedColumns as |column|}}
+ *            <td>{{column.title}}</td>
+ *       {{/header.row-sorting}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @namespace Components
+ * @class ModelsTableRowSorting
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tr',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type object[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @type object[]
+   * @default null
+   */
+  data: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sort:method"}}ModelsTable.actions.sort{{/crossLink}}
+   *
+   * @event sort
+   */
+  sort: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.toggleAllSelection:method"}}ModelsTable.actions.toggleAllSelection{{/crossLink}}
+   *
+   * @event toggleAllSelection
+   */
+  toggleAllSelection: null,
+
+  actions: {
+    sort(column) {
+      get(this, 'sort')(column);
+    }
+  }
+});
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># See https://help.github.com/ignore-files/ for more about ignoring files.\n\n# compiled output\n/dist\n/tmp\n\n# dependencies\n/node_modules\n/bower_components\n\n# misc\n/.sass-cache\n/connect.lock\n/coverage/*\n/libpeerconnection.log\nnpm-debug.log*\nyarn-error.log\ntestem.log\n.idea\n# ember-try\n.node_modules.ember-try/\nbower.json.ember-try\npackage.json.ember-try\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ .gitignore	(revision )
@@ -21,3 +21,5 @@
 .node_modules.ember-try/
 bower.json.ember-try
 package.json.ember-try
+
+/docs
\ No newline at end of file
Index: tests/dummy/app/templates/custom/filter-cell-input.hbs
===================================================================
--- tests/dummy/app/templates/custom/filter-cell-input.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/filter-cell-input.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,4 +0,0 @@
-<div class="{{if column.filterUsed "has-feedback"}}">
-  {{input type="text" value=column.filterString class=classes.input enter="" placeholder=column.filterPlaceholder}}
-  <span onclick={{action (mut column.filterString) ""}} class="clearFilterIcon {{classes.clearFilterIcon}} "></span>
-</div>
\ No newline at end of file
Index: tests/dummy/app/templates/examples/custom-pagination.hbs
===================================================================
--- tests/dummy/app/templates/examples/custom-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/custom-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,21 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns simplePaginationTemplate="custom/pagination"}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        simplePaginationTemplate="custom/pagination"&rbrace;&rbrace;</code></pre>
-    <p><code>templates/custom/pagination.hbs</code>:</p>
-<pre><code class="handlebars">&lt;a href="#" \{{action "gotoFirst"}} \{{bind-attr class="gotoBackEnabled:enabled:disabled"}}&gt;F&lt;/a&gt;
-  &lt;a href="#" \{{action "gotoPrev"}} \{{bind-attr class="gotoBackEnabled:enabled:disabled"}}&gt;P&lt;/a&gt;
-  &lt;a href="#" \{{action "gotoNext"}} \{{bind-attr class="gotoForwardEnabled:enabled:disabled"}}&gt;N&lt;/a&gt;
-  &lt;a href="#" \{{action "gotoLast"}} \{{bind-attr class="gotoForwardEnabled:enabled:disabled"}}&gt;L&lt;/a&gt;
-</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: app/components/models-table/table-header.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/table-header.js	(revision )
+++ app/components/models-table/table-header.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/table-header';
Index: tests/dummy/app/templates/components/expanded-row.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/expanded-row.hbs	(revision )
+++ tests/dummy/app/templates/components/expanded-row.hbs	(revision )
@@ -0,0 +1,2 @@
+<p>Expanded row for record with id = <span class="id">{{record.id}}</span>.</p>
+{{yield}}
\ No newline at end of file
Index: app/templates/components/models-table/all-columns-hidden.hbs
===================================================================
--- app/templates/components/models-table/all-columns-hidden.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/all-columns-hidden.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<tr><td colspan={{processedColumns.length}} class="{{classes.noDataCell}}">{{{messages.allColumnsAreHidden}}}</td></tr>
\ No newline at end of file
Index: tests/dummy/app/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>Ember Models Table</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    {{content-for \"head\"}}\n\n    <link rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\">\n    <link rel=\"stylesheet\" href=\"{{rootURL}}assets/dummy.css\">\n\n    {{content-for \"head-footer\"}}\n  </head>\n  <body>\n    {{content-for \"body\"}}\n\n    <script src=\"{{rootURL}}assets/vendor.js\"></script>\n    <script src=\"{{rootURL}}assets/dummy.js\"></script>\n\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css\">\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/styles/default.min.css\">\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/highlight.min.js\"></script>\n    <script>hljs.initHighlightingOnLoad();</script>\n\n    {{content-for \"body-footer\"}}\n\n    <a href=\"https://github.com/onechiporenko/ember-models-table\">\n      <img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\">\n    </a>\n\n  </body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/index.html	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/index.html	(revision )
@@ -9,12 +9,31 @@
 
     {{content-for "head"}}
 
-    <link rel="stylesheet" href="{{rootURL}}assets/vendor.css">
-    <link rel="stylesheet" href="{{rootURL}}assets/dummy.css">
+    <link integrity="" rel="stylesheet" href="{{rootURL}}assets/vendor.css">
+    <link integrity="" rel="stylesheet" href="{{rootURL}}assets/dummy.css">
 
     {{content-for "head-footer"}}
+    <script async defer src="https://buttons.github.io/buttons.js"></script>
   </head>
   <body>
+
+  <nav class="navbar navbar-default navbar-static-top">
+    <div class="container-fluid">
+      <div class="navbar-header"><a class="navbar-brand" href="#">Ember Models Table</a></div>
+      <div class="collapse navbar-collapse">
+        <ul class="nav navbar-nav">
+          <li><a href="/ember-models-table/v.1/">v1.x demo</a></li>
+          <li class="active"><a href="/ember-models-table/v.2/">v2.x demo</a></li>
+          <li><a href="/ember-models-table/v.2/docs/">v2.x API docs</a></li>
+        </ul>
+        <p class="navbar-text gh">
+          <a class="github-button" href="https://github.com/onechiporenko/ember-models-table" data-show-count="true" aria-label="Star onechiporenko/ember-models-table on GitHub">Star</a>
+          <a class="github-button" href="https://github.com/onechiporenko/ember-models-table/fork" data-show-count="true" aria-label="Fork onechiporenko/ember-models-table on GitHub">Fork</a>
+        </p>
+      </div>
+    </div>
+  </nav>
+
     {{content-for "body"}}
 
     <script src="{{rootURL}}assets/vendor.js"></script>
@@ -23,15 +42,10 @@
     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">
     <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
-    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/styles/default.min.css">
-    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/highlight.min.js"></script>
-    <script>hljs.initHighlightingOnLoad();</script>
+
+    <script src="{{rootURL}}assets/prism.js"></script>
+    <link rel="stylesheet" href="{{rootURL}}assets/prism.css">
 
     {{content-for "body-footer"}}
-
-    <a href="https://github.com/onechiporenko/ember-models-table">
-      <img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png">
-    </a>
-
   </body>
 </html>
Index: tests/dummy/app/templates/examples/add-remove-column.hbs
===================================================================
--- tests/dummy/app/templates/examples/add-remove-column.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/add-remove-column.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,19 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-    <p>{{description}}</p>
-  </div>
-  <div class="col-md-8">
-    <p><button class="btn btn-default" {{action "toggleColumn"}}>Toggle "Last Name" column</button></p>
-    {{models-table data=model columns=columns columnsAreUpdateable=true}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        columnsAreUpdateable=true &rbrace;&rbrace;</code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/dummy/app/components/select-all-rows-checkbox.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/select-all-rows-checkbox.js	(revision )
+++ tests/dummy/app/components/select-all-rows-checkbox.js	(revision )
@@ -0,0 +1,12 @@
+import Component from '@ember/component';
+import {get} from '@ember/object';
+import layout from '../templates/components/select-all-rows-checkbox';
+
+export default Component.extend({
+  layout,
+  actions: {
+    toggleAllSelection() {
+      get(this, 'toggleAllSelection')();
+    }
+  }
+});
Index: tests/dummy/app/routes/examples/expandable-rows.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/expandable-rows.js	(revision )
+++ tests/dummy/app/routes/examples/expandable-rows.js	(revision )
@@ -0,0 +1,38 @@
+import ExampleRoute from './example';
+import {set, get} from '@ember/object';
+
+export default ExampleRoute.extend({
+
+  setupController(controller) {
+    this._super(...arguments);
+    get(controller, 'columns').unshiftObject({
+      component: 'expand-toggle',
+      componentForFilterCell: 'expand-all-toggle',
+      mayBeHidden: false
+    });
+    set(controller, 'expandedRowComponent', 'expanded-row');
+  },
+
+  actions: {
+    didTransition() {
+      set(this, 'controller.expandAllToggleTemplate', `<a href="#" {{action "expandAllRows" bubbles=false}} class={{themeInstance.expandAllRows}}>
+  <i class="{{themeInstance.expand-all-rows}}"></i>
+</a><br />
+<a href="#" {{action "collapseAllRows" bubbles=false}} class={{themeInstance.collapseAllRows}}>
+  <i class="{{themeInstance.collapse-all-rows}}"></i>
+</a>`);
+      set(this, 'controller.expandToggleTemplate', `{{#if isExpanded}}
+  <a href="#" {{action "collapseRow" index record bubbles=false}} class={{themeInstance.collapseRow}}>
+    <i class="{{themeInstance.collapse-row}}"></i>
+  </a>
+{{else}}
+  <a href="#" {{action "expandRow" index record bubbles=false}} class={{themeInstance.expandRow}}>
+    <i class="{{themeInstance.expand-row}}"></i>
+  </a>
+{{/if}}
+{{yield}}`);
+      return this._super(...arguments);
+    }
+  }
+
+});
Index: tests/dummy/app/controllers/examples/sort-by.js
===================================================================
--- tests/dummy/app/controllers/examples/sort-by.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/sort-by.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,31 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Table with custom sort column',
-  message: 'Click on `Last Name` triggers sorting by `First Name`',
-  model: generateContent(30),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name',
-      sortedBy: 'firstName'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
-});
\ No newline at end of file
Index: addon/templates/components/models-table/table-body.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/table-body.hbs	(revision )
+++ addon/templates/components/models-table/table-body.hbs	(revision )
@@ -0,0 +1,105 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      columns-hidden=(
+        component "models-table/columns-hidden"
+        columnsCount=columnsCount
+        messages=messages
+        sendAction=sendAction
+        themeInstance=themeInstance
+      )
+      row=(
+        component "models-table/row"
+        visibleProcessedColumns=visibleProcessedColumns
+        messages=messages
+        clickOnRow=clickOnRow
+        sendAction=sendAction
+        expandRow=expandRow
+        collapseRow=collapseRow
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+        selectedItems=selectedItems
+        expandedItems=expandedItems
+        themeInstance=themeInstance
+        isSelected=(exists-in selectedItems record)
+        isExpanded=(exists-in expandedItems record)
+      )
+      row-expand=(
+        component "models-table/row-expand"
+        expandedRowComponent=expandedRowComponent
+        processedColumns=processedColumns
+        messages=messages
+        selectedItems=selectedItems
+        visibleProcessedColumns=visibleProcessedColumns
+        clickOnRow=clickOnRow
+        sendAction=sendAction
+        themeInstance=themeInstance
+      )
+      no-data=(
+        component "models-table/no-data"
+        messages=messages
+        columnsCount=visibleProcessedColumns.length
+        sendAction=sendAction
+        themeInstance=themeInstance
+      )
+      allColumnsAreHidden=allColumnsAreHidden
+      visibleContent=visibleContent
+      visibleProcessedColumns=visibleProcessedColumns
+      expandedItems=expandedItems
+      sendAction=sendAction
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  {{#if allColumnsAreHidden}}
+    {{models-table/columns-hidden
+      columnsCount=columnsCount
+      messages=messages
+      sendAction=sendAction
+      themeInstance=themeInstance
+    }}
+  {{else}}
+    {{#if visibleContent.length}}
+      {{#each visibleContent as |record index|}}
+        {{models-table/row
+          record=record
+          visibleProcessedColumns=visibleProcessedColumns
+          index=index
+          selectedItems=selectedItems
+          messages=messages
+          isSelected=(exists-in selectedItems record)
+          isExpanded=(exists-in expandedItems record)
+          expandedItems=expandedItems
+          clickOnRow=clickOnRow
+          sendAction=sendAction
+          expandRow=expandRow
+          collapseRow=collapseRow
+          expandAllRows=expandAllRows
+          collapseAllRows=collapseAllRows
+          themeInstance=themeInstance
+        }}
+        {{#if (exists-in expandedItems record)}}
+          {{models-table/row-expand
+            expandedRowComponent=expandedRowComponent
+            record=record
+            processedColumns=processedColumns
+            messages=messages
+            index=index
+            selectedItems=selectedItems
+            visibleProcessedColumns=visibleProcessedColumns
+            clickOnRow=clickOnRow
+            sendAction=sendAction
+            themeInstance=themeInstance
+          }}
+        {{/if}}
+      {{/each}}
+    {{else}}
+      {{models-table/no-data
+        messages=messages
+        columnsCount=visibleProcessedColumns.length
+        sendAction=sendAction
+        themeInstance=themeInstance
+      }}
+    {{/if}}
+  {{/if}}
+{{/if}}
\ No newline at end of file
Index: tests/dummy/app/templates/components/custom-action.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/custom-action.hbs	(revision )
+++ tests/dummy/app/templates/components/custom-action.hbs	(revision )
@@ -0,0 +1,2 @@
+<div class="action" {{action 'sendAction' 'action' record}}>{{record.index}}</div>
+{{yield}}
\ No newline at end of file
Index: addon/templates/components/models-table/cell.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/cell.hbs	(revision )
+++ addon/templates/components/models-table/cell.hbs	(revision )
@@ -0,0 +1,50 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      data=data
+      record=record
+      index=index
+      column=column
+      sendAction=sendAction
+      expandRow=expandRow
+      collapseRow=collapseRow
+      expandAllRows=expandAllRows
+      collapseAllRows=collapseAllRows
+      themeInstance=themeInstance
+      clickOnRow=clickOnRow
+      isExpanded=isExpanded
+      isSelected=isSelected
+    )
+  }}
+{{else}}
+  {{#if column.routeName}}
+    {{#link-to column.routeName record.id}}
+      {{#if column.propertyName}}
+        {{get record column.propertyName}}
+      {{else}}
+        {{record.id}}
+      {{/if}}
+    {{/link-to}}
+  {{else}}
+    {{#if column.component}}
+      {{component
+        column.component
+        data=data
+        record=record
+        index=index
+        column=column
+        sendAction=sendAction
+        expandRow=expandRow
+        collapseRow=collapseRow
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+        clickOnRow=clickOnRow
+        themeInstance=themeInstance
+        isExpanded=isExpanded
+        isSelected=isSelected
+      }}
+    {{else}}
+      {{get record column.propertyName}}
+    {{/if}}
+  {{/if}}
+{{/if}}
\ No newline at end of file
Index: addon/templates/components/models-table/summary.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/summary.hbs	(revision )
+++ addon/templates/components/models-table/summary.hbs	(revision )
@@ -0,0 +1,19 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      anyFilterUsed=anyFilterUsed
+      summary=summary
+      clearFilters=clearFilters
+      firstIndex=firstIndex
+      lastIndex=lastIndex
+      recordsCount=recordsCount
+    )
+  }}
+{{else}}
+  {{summary}}
+  {{#if anyFilterUsed}}
+    <a href="#" {{action "clearFilters"}} class="{{themeInstance.buttonLink}} clearFilters">
+      <span class="{{themeInstance.clearAllFiltersIcon}}"></span>
+    </a>
+  {{/if}}
+{{/if}}
\ No newline at end of file
Index: app/components/models-table/grouped-header.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/grouped-header.js	(revision )
+++ app/components/models-table/grouped-header.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/grouped-header';
Index: app/templates/components/models-table/global-filter.hbs
===================================================================
--- app/templates/components/models-table/global-filter.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/global-filter.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,10 +0,0 @@
-<div class="{{classes.globalFilterWrapper}}">
-  <div class="form-inline globalSearch">
-    <div class="form-group">
-      <label>{{messages.searchLabel}}</label> {{input type="text" value=filterString class=(concat classes.input " filterString") enter="" placeholder=messages.searchPlaceholder}}
-      {{#if globalFilterUsed}}
-        <span onclick={{action (mut filterString) ""}} class="clearFilterIcon {{classes.clearFilterIcon}}"></span>
-      {{/if}}
-    </div>
-  </div>
-</div>
Index: addon/templates/components/models-table/columns-hidden.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/columns-hidden.hbs	(revision )
+++ addon/templates/components/models-table/columns-hidden.hbs	(revision )
@@ -0,0 +1,12 @@
+<td colspan={{columnsCount}} class="{{themeInstance.noDataCell}}">
+  {{#if hasBlock}}
+    {{yield
+      (hash
+        columnsCount=columnsCount
+        themeInstance=themeInstance
+      )
+    }}
+  {{else}}
+    {{html-safe messages.allColumnsAreHidden}}
+  {{/if}}
+</td>
Index: tests/dummy/app/routes/examples/common-table.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/common-table.js	(revision )
+++ tests/dummy/app/routes/examples/common-table.js	(revision )
@@ -0,0 +1,3 @@
+import ExampleRoute from './example';
+
+export default ExampleRoute.extend({});
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"ember-models-table\",\n  \"version\": \"1.13.0\",\n  \"description\": \"Table with pagination, sorting and filtering\",\n  \"keywords\": [\n    \"ember-addon\"\n  ],\n  \"license\": \"MIT\",\n  \"author\": \"Oleg Nechiporenko\",\n  \"directories\": {\n    \"doc\": \"doc\",\n    \"test\": \"tests\"\n  },\n  \"repository\": \"https://github.com/onechiporenko/ember-models-table\",\n  \"scripts\": {\n    \"build\": \"ember build\",\n    \"start\": \"ember server\",\n    \"test\": \"ember try:each\"\n  },\n  \"dependencies\": {\n    \"ember-cli-babel\": \"^6.8.1\",\n    \"ember-cli-htmlbars\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"broccoli-asset-rev\": \"^2.4.5\",\n    \"ember-ajax\": \"^3.0.0\",\n    \"ember-cli\": \"~2.14.2\",\n    \"ember-cli-dependency-checker\": \"^1.3.0\",\n    \"ember-cli-eslint\": \"^3.0.0\",\n    \"ember-cli-htmlbars-inline-precompile\": \"^0.4.3\",\n    \"ember-cli-inject-live-reload\": \"^1.4.1\",\n    \"ember-cli-mirage\": \"0.3.1\",\n    \"ember-cli-qunit\": \"^4.0.0\",\n    \"ember-cli-shims\": \"^1.1.0\",\n    \"ember-cli-sri\": \"^2.1.0\",\n    \"ember-cli-uglify\": \"^1.2.0\",\n    \"ember-data\": \"^2.13.0\",\n    \"ember-disable-prototype-extensions\": \"^1.1.2\",\n    \"ember-export-application-global\": \"^2.0.0\",\n    \"ember-inflector\": \"^2.0.0\",\n    \"ember-load-initializers\": \"^1.0.0\",\n    \"ember-resolver\": \"^4.0.0\",\n    \"ember-source\": \"~2.14.1\",\n    \"ember-to-string\": \"^1.0.2\",\n    \"loader.js\": \"^4.2.3\"\n  },\n  \"engines\": {\n    \"node\": \"^4.5 || 6.* || >= 7.*\"\n  },\n  \"ember-addon\": {\n    \"demoURL\": \"http://onechiporenko.github.io/ember-models-table/\",\n    \"configPath\": \"tests/dummy/config\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ package.json	(revision )
@@ -1,6 +1,6 @@
 {
   "name": "ember-models-table",
-  "version": "1.13.0",
+  "version": "2.0.0-beta.2",
   "description": "Table with pagination, sorting and filtering",
   "keywords": [
     "ember-addon"
@@ -8,14 +8,15 @@
   "license": "MIT",
   "author": "Oleg Nechiporenko",
   "directories": {
-    "doc": "doc",
+    "doc": "docs",
     "test": "tests"
   },
   "repository": "https://github.com/onechiporenko/ember-models-table",
   "scripts": {
     "build": "ember build",
     "start": "ember server",
-    "test": "ember try:each"
+    "test": "ember try:each",
+    "docs": "ember ember-cli-yuidoc"
   },
   "dependencies": {
     "ember-cli-babel": "^6.8.1",
@@ -24,23 +25,26 @@
   "devDependencies": {
     "broccoli-asset-rev": "^2.4.5",
     "ember-ajax": "^3.0.0",
-    "ember-cli": "~2.14.2",
-    "ember-cli-dependency-checker": "^1.3.0",
-    "ember-cli-eslint": "^3.0.0",
-    "ember-cli-htmlbars-inline-precompile": "^0.4.3",
+    "ember-cli": "~2.15.1",
+    "ember-cli-dependency-checker": "^2.0.0",
+    "ember-cli-eslint": "^4.0.0",
+    "ember-cli-htmlbars-inline-precompile": "^1.0.0",
     "ember-cli-inject-live-reload": "^1.4.1",
     "ember-cli-mirage": "0.3.1",
+    "ember-cli-page-object": "^1.11.0",
     "ember-cli-qunit": "^4.0.0",
     "ember-cli-shims": "^1.1.0",
     "ember-cli-sri": "^2.1.0",
     "ember-cli-uglify": "^1.2.0",
-    "ember-data": "^2.13.0",
+    "ember-cli-yuidoc": "^0.8.8",
+    "ember-data": "~2.15.0",
     "ember-disable-prototype-extensions": "^1.1.2",
     "ember-export-application-global": "^2.0.0",
     "ember-inflector": "^2.0.0",
     "ember-load-initializers": "^1.0.0",
+    "ember-qunit-assert-helpers": "^0.2.0",
     "ember-resolver": "^4.0.0",
-    "ember-source": "~2.14.1",
+    "ember-source": "~2.15.0",
     "ember-to-string": "^1.0.2",
     "loader.js": "^4.2.3"
   },
Index: tests/dummy/app/components/filter-cell-input.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport layout from '../templates/components/filter-cell-input';\n\nexport default Ember.Component.extend({\n  layout\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/filter-cell-input.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/components/filter-cell-input.js	(revision )
@@ -1,6 +1,6 @@
-import Ember from 'ember';
+import Component from '@ember/component';
 import layout from '../templates/components/filter-cell-input';
 
-export default Ember.Component.extend({
+export default Component.extend({
   layout
 });
Index: tests/dummy/app/controllers/examples/column-sets.js
===================================================================
--- tests/dummy/app/controllers/examples/column-sets.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/column-sets.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,58 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const { A } = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Column sets',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    },
-    {
-      propertyName: 'age',
-      title: 'Age'
-    }
-  ]),
-  columnSets: [
-    {
-      label: 'Only Name',
-      showColumns: ['firstName', 'lastName']
-    },
-    {
-      label: 'Random',
-      showColumns(columns) {
-        columns.forEach((column) => {
-          column.set('isHidden', Math.random() > 0.5);
-        });
-        this._sendColumnsVisibilityChangedAction();
-      }
-    },
-    {
-      label: 'Add Name',
-      showColumns: ['firstName', 'lastName'],
-      hideOtherColumns: false
-    },
-    {
-      label: 'Toggle Name',
-      showColumns: ['firstName', 'lastName'],
-      toggleSet: true
-    }
-  ]
-
-});
Index: app/templates/components/models-table/header-row-filtering.hbs
===================================================================
--- app/templates/components/models-table/header-row-filtering.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/header-row-filtering.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,30 +0,0 @@
-<tr>
-  {{#each processedColumns as |column|}}
-    {{#if column.isVisible}}
-      <th class="{{classes.theadCell}} {{unless column.useFilter classes.theadCellNoFiltering}}">
-        {{#if column.templateForFilterCell}}
-          {{partial column.templateForFilterCell}}
-        {{else}}
-          {{#if column.componentForFilterCell}}
-            {{component column.componentForFilterCell data=data column=column row=record table=this}}
-          {{else}}
-            {{#if column.useFilter}}
-              <div class="{{if column.filterUsed "has-feedback"}}">
-                {{#if column.filterWithSelect}}
-                  {{models-select options=column.filterOptions cssPropertyName=column.cssPropertyName value=column.filterString class=(concat classes.input " changeFilterForColumn")}}
-                {{else}}
-                  {{input type="text" value=column.filterString class=classes.input enter="" placeholder=column.filterPlaceholder}}
-                {{/if}}
-                {{#if column.filterUsed}}
-                  <span onclick={{action (mut column.filterString) ""}} class="clearFilterIcon {{classes.clearFilterIcon}}"></span>
-                {{/if}}
-              </div>
-            {{else}}
-              &nbsp;
-            {{/if}}
-          {{/if}}
-        {{/if}}
-      </th>
-    {{/if}}
-  {{/each}}
-</tr>
\ No newline at end of file
Index: tests/dummy/app/templates/examples/common-table.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table data=model columns=columns}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n        <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n          data=model\n          columns=columns&rbrace;&rbrace;</code></pre>\n\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n  </div>\n</div>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/common-table.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/common-table.hbs	(revision )
@@ -1,17 +1,97 @@
+<h4>Common table
+  <small>simple table</small>
+</h4>
+
+<p>This options are applied for both tables:</p>
+<p>{{input type="checkbox" name="showComponentFooter" checked=showComponentFooter}} Show Footer (<code>showComponentFooter</code>)
+</p>
+<p>{{input type="checkbox" name="showColumnsDropdown" checked=showColumnsDropdown}} Show Columns Dropdown (<code>showColumnsDropdown</code>)
+</p>
+<p>{{input type="checkbox" name="useFilteringByColumns" checked=useFilteringByColumns}} Use filtering by columns (<code>useFilteringByColumns</code>)
+</p>
+<p>{{input type="checkbox" name="showGlobalFilter" checked=showGlobalFilter}} Show global filter
+  (<code>showGlobalFilter</code>)</p>
+<p>{{input type="checkbox" name="useNumericPagination" checked=useNumericPagination}} Use numeric pagination (<code>useNumericPagination</code>)
+</p>
+<p>{{input type="checkbox" name="showPageSize" checked=showPageSize}} Show page size select-box
+  (<code>showPageSize</code>)</p>
+<p>Used only for first table:</p>
+<p>{{input type="checkbox" name="filteringIgnoreCase" checked=filteringIgnoreCase}} Do filtering ignore case (<code>filteringIgnoreCase</code>)
+</p>
+<p>{{input type="checkbox" name="multipleColumnsSorting" checked=multipleColumnsSorting}} Do sorting by multiple columns
+  (<code>multipleColumnsSorting</code>)</p>
+<p>{{input type="checkbox" name="doFilteringByHiddenColumns" checked=doFilteringByHiddenColumns}} Do filtering by hidden
+  columns (<code>doFilteringByHiddenColumns</code>)</p>
+
+{{models-table
+  data=data
+  columns=columns
+  showComponentFooter=showComponentFooter
+  showColumnsDropdown=showColumnsDropdown
+  useFilteringByColumns=useFilteringByColumns
+  showGlobalFilter=showGlobalFilter
+  doFilteringByHiddenColumns=doFilteringByHiddenColumns
+  useNumericPagination=useNumericPagination
+  filteringIgnoreCase=filteringIgnoreCase
+  multipleColumnsSorting=multipleColumnsSorting
+  showPageSize=showPageSize
+}}
+
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
+  <div class="col-md-6">
+    <p>Component usage:</p>
+    <pre><code class="language-handlebars">\{{models-table
+  data=data
+  columns=columns
+  showComponentFooter=showComponentFooter
+  showColumnsDropdown=showColumnsDropdown
+  useFilteringByColumns=useFilteringByColumns
+  showGlobalFilter=showGlobalFilter
+  doFilteringByHiddenColumns=doFilteringByHiddenColumns
+  useNumericPagination=useNumericPagination
+  filteringIgnoreCase=filteringIgnoreCase
+  multipleColumnsSorting=multipleColumnsSorting
+  showPageSize=showPageSize
+}}</code></pre>
   </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns}}
+  <div class="col-md-6">
+    <p><code>columns</code>:</p>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
   </div>
-  <div class="col-md-4">
+</div>
+
+<h4>Common table
+  <small>server paginated table</small>
+</h4>
+{{models-table-server-paginated
+  data=model
+  columns=columns
+  filterQueryParameters=filterQueryParameters
+  showComponentFooter=showComponentFooter
+  showColumnsDropdown=showColumnsDropdown
+  useFilteringByColumns=useFilteringByColumns
+  showGlobalFilter=showGlobalFilter
+  useNumericPagination=useNumericPagination
+  showPageSize=showPageSize
+}}
+
+<div class="row">
+  <div class="col-md-6">
     <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;models-table
-          data=model
-          columns=columns&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
+    <pre><code class="language-handlebars">\{{models-table-server-paginated
+  data=model
+  columns=columns
+  filterQueryParameters=filterQueryParameters
+  showComponentFooter=showComponentFooter
+  showColumnsDropdown=showColumnsDropdown
+  useFilteringByColumns=useFilteringByColumns
+  showGlobalFilter=showGlobalFilter
+  useNumericPagination=useNumericPagination
+  showPageSize=showPageSize
+}}</code></pre>
   </div>
-</div>
+  <div class="col-md-6">
+    <p><code>columns</code>:</p>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
+  </div>
+</div>
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/filtering-select-box.js
===================================================================
--- tests/dummy/app/controllers/examples/filtering-select-box.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/filtering-select-box.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,35 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Filtering with select-box',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name',
-      filterWithSelect: true
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name',
-      filterWithSelect: true,
-      predefinedFilterOptions: [
-        'Smith',
-        'Brown'
-      ]
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
-});
\ No newline at end of file
Index: tests/dummy/app/templates/custom/fullname.hbs
===================================================================
--- tests/dummy/app/templates/custom/fullname.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/fullname.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-{{record.firstName}} {{record.lastName}}
\ No newline at end of file
Index: tests/dummy/app/components/expand-toggle.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/expand-toggle.js	(revision )
+++ tests/dummy/app/components/expand-toggle.js	(revision )
@@ -0,0 +1,15 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/expand-toggle';
+
+export default Component.extend({
+  layout,
+  actions: {
+    collapseRow(index, record) {
+      get(this, 'collapseRow')(index, record);
+    },
+    expandRow(index, record) {
+      get(this, 'expandRow')(index, record);
+    }
+  }
+});
Index: tests/dummy/app/routes/examples/sort-by-filter-by.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/sort-by-filter-by.js	(revision )
+++ tests/dummy/app/routes/examples/sort-by-filter-by.js	(revision )
@@ -0,0 +1,16 @@
+import ExampleRoute from './example';
+
+export default ExampleRoute.extend({
+
+  setupController(controller) {
+    this._super(...arguments);
+    controller.set('columns', [
+      {propertyName: 'index'},
+      {propertyName: 'firstName', sortedBy: 'lastName', filteredBy: 'lastName'},
+      {propertyName: 'lastName', sortedBy: 'firstName', filteredBy: 'firstName'},
+      {propertyName: 'age'},
+      {propertyName: 'city'}
+    ]);
+  }
+
+});
Index: addon/components/models-table/table.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/table.js	(revision )
+++ addon/components/models-table/table.js	(revision )
@@ -0,0 +1,216 @@
+import Component from '@ember/component';
+import { computed, get } from '@ember/object';
+import layout from '../../templates/components/models-table/table';
+
+/**
+ * Table with data used within [models-table](Components.ModelsTable.html).
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{mt.table}}
+ *   {{! ... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage example with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{table.header}}
+ *     {{table.body}}
+ *     {{table.footer}}
+ *   {{/mt.table}}
+ * {{/models-table}}
+ * ```
+ *
+ * ModelsTableTable yields references to the following contextual components:
+ *
+ * * [models-table/table-header](Components.ModelsTableTableHeader.html) - table header. Component contains several rows like grouped headers, row with sorting buttons (usually with column titles) and row with filters for each column
+ * * [models-table/table-body](Components.ModelsTableTableBody.html) - table body with data. Component contains current page with a subset or rows
+ * * [models-table/table-footer](Components.ModelsTableTableFooter.html) - table footer. It's empty by default
+ *
+ * Check own docs for each component to get detailed info.
+ *
+ * @namespace Components
+ * @class ModelsTableTable
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'table',
+  classNameBindings: ['themeInstance.table'],
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/noHeaderFilteringAndSorting:property"}}ModelsTable.noHeaderFilteringAndSorting{{/crossLink}}
+   *
+   * @property noHeaderFilteringAndSorting
+   * @type boolean
+   * @default null
+   */
+  noHeaderFilteringAndSorting: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/groupedHeaders:property"}}ModelsTable.groupedHeaders{{/crossLink}}
+   *
+   * @property groupedHeaders
+   * @type groupedHeader[][]
+   * @default null
+   */
+  groupedHeaders: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type object[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sort:method"}}ModelsTable.actions.sort{{/crossLink}}
+   *
+   * @event sort
+   */
+  sort: null,
+
+  /**
+   * @property columnsCount
+   * @type number
+   * @default null
+   */
+  columnsCount: computed.alias('processedColumns.length'),
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/visibleContent:property"}}ModelsTable.visibleContent{{/crossLink}}
+   *
+   * @property visibleContent
+   * @type object[]
+   * @default null
+   */
+  visibleContent: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_selectedItems:property"}}ModelsTable._selectedItems{{/crossLink}}
+   *
+   * @property selectedItems
+   * @type object[]
+   * @default null
+   */
+  selectedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_expandedItems:property"}}ModelsTable._expandedItems{{/crossLink}}
+   *
+   * @property expandedItems
+   * @type number[]
+   * @default null
+   */
+  expandedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/visibleProcessedColumns:property"}}ModelsTable.visibleProcessedColumns{{/crossLink}}
+   *
+   * @property visibleProcessedColumns
+   * @type object[]
+   * @default null
+   */
+  visibleProcessedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/allColumnsAreHidden:property"}}ModelsTable.allColumnsAreHidden{{/crossLink}}
+   *
+   * @property allColumnsAreHidden
+   * @type boolean
+   * @default null
+   */
+  allColumnsAreHidden: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @type object[]
+   * @default null
+   */
+  data: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/useFilteringByColumns:property"}}ModelsTable.useFilteringByColumns{{/crossLink}}
+   *
+   * @property useFilteringByColumns
+   * @type boolean
+   * @default null
+   */
+  useFilteringByColumns: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clickOnRow:method"}}ModelsTable.actions.clickOnRow{{/crossLink}}
+   *
+   * @event clickOnRow
+   */
+  clickOnRow: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandRow:method"}}ModelsTable.actions.expandRow{{/crossLink}}
+   *
+   * @event expandRow
+   */
+  expandRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseRow:method"}}ModelsTable.actions.collapseRow{{/crossLink}}
+   *
+   * @event collapseRow
+   */
+  collapseRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.toggleAllSelection:method"}}ModelsTable.actions.toggleAllSelection{{/crossLink}}
+   *
+   * @event toggleAllSelection
+   */
+  toggleAllSelection: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  actions: {
+    sort(column) {
+      get(this, 'sort')(column);
+    },
+    clickOnRow(index, row) {
+      get(this, 'clickOnRow')(index, row);
+    }
+  }
+});
Index: addon/components/models-table/table-header.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/table-header.js	(revision )
+++ addon/components/models-table/table-header.js	(revision )
@@ -0,0 +1,174 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../../templates/components/models-table/table-header';
+
+/**
+ * Table header used within [models-table/table](Components.ModelsTableTable.html).
+ *
+ * Component contains grouped headers (if provided) bound from [ModelsTable.groupedHeaders](Components.ModelsTable.html#property_groupedHeaders), row with sorting buttons (usually this row also contains column headers) and row with filter boxes.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.header as |header|}}
+ *       {{#each header.groupedHeaders as |groupedHeader|}}
+ *         {{header.grouped-header groupedHeader=groupedHeader}}
+ *       {{/each}}
+ *       {{header.row-sorting}}
+ *       {{header.row-filtering}}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * ModelsTableTableHeader yields references to the following contextual components:
+ *
+ * * [models-table/grouped-header](Components.ModelsTableGroupedHeader.html) - component for groupedHeaders. It should be used for each groupedHeaders item
+ * * [models-table/row-sorting](Components.ModelsTableRowSorting.html) - row with columns titles. Click on every cell will sort table data by selected column
+ * * [models-table/row-filtering](Components.ModelsTableRowFiltering.html) - row with filter items. Every cell contains input or select-box
+ *
+ * Check own docs for each component to get detailed info.
+ *
+ * @namespace Components
+ * @class ModelsTableTableHeader
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'thead',
+  classNameBindings: ['noHeaderFilteringAndSorting:table-header-no-filtering-and-sorting'],
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/noHeaderFilteringAndSorting:property"}}ModelsTable.noHeaderFilteringAndSorting{{/crossLink}}
+   *
+   * @property noHeaderFilteringAndSorting
+   * @type boolean
+   * @default null
+   */
+  noHeaderFilteringAndSorting: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/groupedHeaders:property"}}ModelsTable.groupedHeaders{{/crossLink}}
+   *
+   * @property groupedHeaders
+   * @type groupedHeader[][]
+   * @default null
+   */
+  groupedHeaders: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/useFilteringByColumns:property"}}ModelsTable.useFilteringByColumns{{/crossLink}}
+   *
+   * @property useFilteringByColumns
+   * @type boolean
+   * @default null
+   */
+  useFilteringByColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @type object
+   * @default null
+   */
+  data: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sort:method"}}ModelsTable.actions.sort{{/crossLink}}
+   *
+   * @event sort
+   */
+  sort: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandRow:method"}}ModelsTable.actions.expandRow{{/crossLink}}
+   *
+   * @event expandRow
+   */
+  expandRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseRow:method"}}ModelsTable.actions.collapseRow{{/crossLink}}
+   *
+   * @event collapseRow
+   */
+  collapseRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.toggleAllSelection:method"}}ModelsTable.actions.toggleAllSelection{{/crossLink}}
+   *
+   * @event toggleAllSelection
+   */
+  toggleAllSelection: null,
+
+  actions: {
+    sort(column) {
+      get(this, 'sort')(column);
+    }
+  }
+});
Index: tests/dummy/app/routes/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/index.js	(revision )
+++ tests/dummy/app/routes/index.js	(revision )
@@ -0,0 +1,7 @@
+import Route from '@ember/routing/route';
+
+export default Route.extend({
+  beforeModel() {
+    this.transitionTo('examples');
+  }
+});
Index: addon/components/models-table/cell.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/cell.js	(revision )
+++ addon/components/models-table/cell.js	(revision )
@@ -0,0 +1,141 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/cell';
+
+/**
+ * Table cell used within [models-table/table-row](Components.ModelsTableTableRow.html).
+ *
+ * Cell types:
+ *
+ * * Text. Shows some property value
+ * * Route link with record id
+ * * Route link with record property value
+ * * Custom component
+ *
+ * See properties [routeName](Utils.ModelsTableColumn.html#property_routeName), [propertyName](Utils.ModelsTableColumn.html#property_propertyName), [component](Utils.ModelsTableColumn.html#property_component) for ModelsTableColumn.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#each body.visibleContent as |record index|}}
+ *         {{#body.row record=record index=index as |row|}}
+ *           {{#each row.visibleProcessedColumns as |column|}}
+ *             {{#row.cell column=column as |cell|}}
+ *               {{! ... }}
+ *             {{/row.cell}}
+ *           {{/each}}
+ *         {{/body.row}}
+ *       {{/each}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @namespace Components
+ * @class ModelsTableCell
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'td',
+  classNameBindings: ['column.className'],
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @default null
+   * @type object[]
+   */
+  data: null,
+
+  /**
+   * One of the {{#crossLink "Components.ModelsTableCell/data:property"}}data{{/crossLink}}
+   * @property record
+   * @default null
+   */
+  record: null,
+
+  /**
+   * Row's index where current cell is
+   *
+   * @property index
+   * @default null
+   * @type number
+   */
+  index: null,
+
+  /**
+   * @property column
+   * @default null
+   * @type ModelsTableColumn
+   */
+  column: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandRow:method"}}ModelsTable.actions.expandRow{{/crossLink}}
+   *
+   * @event expandRow
+   */
+  expandRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseRow:method"}}ModelsTable.actions.collapseRow{{/crossLink}}
+   *
+   * @event collapseRow
+   */
+  collapseRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_expandedItems:property"}}ModelsTable._expandedItems{{/crossLink}}
+   *
+   * @property expandedItems
+   * @default null
+   * @type number[]
+   */
+  expandedItems: null,
+
+  /**
+   * Is current row expanded or not
+   *
+   * @type boolean
+   * @default null
+   * @property isExpanded
+   */
+  isExpanded: null
+});
Index: addon/themes/default.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/themes/default.js	(revision )
+++ addon/themes/default.js	(revision )
@@ -0,0 +1,404 @@
+import EmberObject from '@ember/object';
+
+/**
+ * Almost empty skeleton for themes. Extend it to provide custom css-classes for table items and icons.
+ *
+ * Check [BootstrapTheme](Themes.Bootstrap.html) for implementation example.
+ *
+ * Check [ModelsTable.themeInstance](Components.ModelsTable.html#property_themeInstance) for usage example.
+ *
+ * @class Default
+ * @namespace Themes
+ */
+export default EmberObject.extend({
+
+  /**
+   * @property table
+   * @type string
+   * @default ''
+   */
+  table: '',
+
+  /**
+   * @property buttonsGroup
+   * @type string
+   * @default ''
+   */
+  buttonsGroup: '',
+
+  /**
+   * @type string
+   * @property globalFilterWrapper
+   * @default ''
+   */
+  globalFilterWrapper: '',
+
+  /**
+   * @type string
+   * @property columnsDropdownWrapper
+   * @default ''
+   */
+  columnsDropdownWrapper: '',
+
+  /**
+   * @type string
+   * @property columnsDropdownButtonWrapper
+   * @default ''
+   */
+  columnsDropdownButtonWrapper: '',
+
+  /**
+   * @type string
+   * @property columnsDropdown
+   * @default ''
+   */
+  columnsDropdown: '',
+
+  /**
+   * @type string
+   * @property columnsDropdownDivider
+   * @default ''
+   */
+  columnsDropdownDivider: '',
+
+  /**
+   * CSS-class for table-header
+   *
+   * @type string
+   * @property theadCell
+   * @default 'table-header'
+   */
+  theadCell: 'table-header',
+
+  /**
+   * CSS-class used for thead-cells with columns titles. This class is used only if columns is not sortable
+   *
+   * @type string
+   * @property theadCellNoSorting
+   * @default 'table-header-no-sorting'
+   */
+  theadCellNoSorting: 'table-header-no-sorting',
+
+  /**
+   * CSS-class used for thead-cells with columns filters. This class is used only if columns is not filterable
+   *
+   * @type string
+   * @property theadCellNoFiltering
+   * @default 'table-header-no-filtering'
+   */
+  theadCellNoFiltering: 'table-header-no-filtering',
+
+  /**
+   * CSS-class for table footer
+   *
+   * @type string
+   * @property tfooterWrapper
+   * @default 'table-footer'
+   */
+  tfooterWrapper: 'table-footer',
+
+  /**
+   * @type string
+   * @property tfooterInternalWrapper
+   * @default ''
+   */
+  tfooterInternalWrapper: '',
+
+  /**
+   * CSS-class for table summary block
+   *
+   * @type string
+   * @property footerSummary
+   * @default 'table-summary'
+   */
+  footerSummary: 'table-summary',
+
+  /**
+   * @type string
+   * @property footerSummaryNumericPagination
+   * @default ''
+   */
+  footerSummaryNumericPagination: '',
+
+  /**
+   * @type string
+   * @property footerSummaryDefaultPagination
+   * @default ''
+   */
+  footerSummaryDefaultPagination: '',
+
+  /**
+   * @type string
+   * @property pageSizeWrapper
+   * @default ''
+   */
+  pageSizeWrapper: '',
+
+  /**
+   * @type string
+   * @property pageSizeSelectWrapper
+   * @default ''
+   */
+  pageSizeSelectWrapper: '',
+
+  /**
+   * Wrapper for pagination blocks
+   *
+   * @type string
+   * @property paginationWrapper
+   * @default 'table-nav'
+   */
+  paginationWrapper: 'table-nav',
+
+  /**
+   * @type string
+   * @property paginationInternalWrapper
+   * @default ''
+   */
+  paginationInternalWrapper: '',
+
+  /**
+   * @type string
+   * @property paginationWrapperNumeric
+   * @default ''
+   */
+  paginationWrapperNumeric: '',
+
+  /**
+   * @type string
+   * @property paginationWrapperDefault
+   * @default ''
+   */
+  paginationWrapperDefault: '',
+
+  /**
+   * @type string
+   * @property paginationBlock
+   * @default ''
+   */
+  paginationBlock: '',
+
+  /**
+   * @type string
+   * @property paginationNumericItem
+   * @default ''
+   */
+  paginationNumericItem: '',
+
+  /**
+   * @type string
+   * @property paginationNumericItemActive
+   * @default ''
+   */
+  paginationNumericItemActive: '',
+
+  /**
+   * @type string
+   * @property buttonDefault
+   * @default ''
+   */
+  buttonDefault: '',
+
+  /**
+   * @type string
+   * @property buttonLink
+   * @default ''
+   */
+  buttonLink: '',
+
+  /**
+   * @type string
+   * @property noDataCell
+   * @default ''
+   */
+  noDataCell: '',
+
+  /**
+   * @type string
+   * @property collapseRow
+   * @default 'collapse-row'
+   */
+  collapseRow: 'collapse-row',
+
+  /**
+   * @type string
+   * @property collapseAllRows
+   * @default 'collapse-all-rows'
+   */
+  collapseAllRows: 'collapse-all-rows',
+
+  /**
+   * @type string
+   * @property expandRow
+   * @default 'expand-row'
+   */
+  expandRow: 'expand-row',
+
+  /**
+   * @type string
+   * @property expandAllRows
+   * @default 'expand-all-rows'
+   */
+  expandAllRows: 'expand-all-rows',
+
+  /**
+   * @type string
+   * @property thead
+   * @default ''
+   */
+  thead: '',
+
+  /**
+   * @type string
+   * @property input
+   * @default ''
+   */
+  input: '',
+
+  /**
+   * @type string
+   * @property select
+   * @default ''
+   */
+  select: '',
+
+  /**
+   * @type string
+   * @property clearFilterIcon
+   * @default ''
+   */
+  clearFilterIcon: '',
+
+  /**
+   * @type string
+   * @property clearAllFiltersIcon
+   * @default ''
+   */
+  clearAllFiltersIcon: '',
+
+  /**
+   * @type string
+   * @property globalFilterDropdownWrapper
+   * @default ''
+   */
+  globalFilterDropdownWrapper: '',
+
+  /**
+   * @type string
+   * @property sort-asc
+   * @default ''
+   */
+  'sort-asc': '',
+
+  /**
+   * @type string
+   * @property sort-desc
+   * @default ''
+   */
+  'sort-desc': '',
+
+  /**
+   * @type string
+   * @property column-visible
+   * @default ''
+   */
+  'column-visible': '',
+
+  /**
+   * @type string
+   * @property column-hidden
+   * @default ''
+   */
+  'column-hidden': '',
+
+  /**
+   * @type string
+   * @property nav-first
+   * @default ''
+   */
+  'nav-first': '',
+
+  /**
+   * @type string
+   * @property nav-prev
+   * @default ''
+   */
+  'nav-prev': '',
+
+  /**
+   * @type string
+   * @property nav-next
+   * @default ''
+   */
+  'nav-next': '',
+
+  /**
+   * @type string
+   * @property nav-last
+   * @default ''
+   */
+  'nav-last': '',
+
+  /**
+   * @type string
+   * @property caret
+   * @default ''
+   */
+  'caret': '',
+
+  /**
+   * @type string
+   * @property expand-row
+   * @default ''
+   */
+  'expand-row': '',
+
+  /**
+   * @type string
+   * @property expand-all-rows
+   * @default ''
+   */
+  'expand-all-rows': '',
+
+  /**
+   * @type string
+   * @property collapse-row
+   * @default ''
+   */
+  'collapse-row': '',
+
+  /**
+   * @type string
+   * @property collapse-all-rows
+   * @default ''
+   */
+  'collapse-all-rows': '',
+
+  /**
+   * @type string
+   * @property select-all-rows
+   * @default ''
+   */
+  'select-all-rows': '',
+
+  /**
+   * @type string
+   * @property deselect-all-rows
+   * @default ''
+   */
+  'deselect-all-rows': '',
+
+  /**
+   * @type string
+   * @property select-row
+   * @default ''
+   */
+  'select-row': '',
+
+  /**
+   * @type string
+   * @property deselect-row
+   * @default ''
+   */
+  'deselect-row': ''
+});
\ No newline at end of file
Index: tests/dummy/app/templates/examples/numeric-pagination.hbs
===================================================================
--- tests/dummy/app/templates/examples/numeric-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/numeric-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,16 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns useNumericPagination=true currentPageNumber=8}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        useNumericPagination=true
-        currentPageNumber=8&rbrace;&rbrace;</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/dummy/app/components/select-row-checkbox.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/select-row-checkbox.js	(revision )
+++ tests/dummy/app/components/select-row-checkbox.js	(revision )
@@ -0,0 +1,13 @@
+import Component from '@ember/component';
+import {get} from '@ember/object';
+import layout from '../templates/components/select-row-checkbox';
+
+export default Component.extend({
+  layout,
+  actions: {
+    clickOnRow(index, record, event) {
+      get(this, 'clickOnRow')(index, record);
+      event.stopPropagation();
+    }
+  }
+});
Index: tests/dummy/app/routes/examples/column-sets.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/column-sets.js	(revision )
+++ tests/dummy/app/routes/examples/column-sets.js	(revision )
@@ -0,0 +1,31 @@
+import ExampleRoute from './example';
+import {set} from '@ember/object';
+
+export default ExampleRoute.extend({
+  setupController(controller) {
+    this._super(...arguments);
+    set(controller, 'columnSets', [
+      {
+        label: 'Only Name',
+        showColumns: ['firstName', 'lastName']
+      },
+      {
+        label: 'Random',
+        showColumns(columns) {
+          columns.forEach((column) => column.set('isHidden', Math.random() > 0.5));
+          this._sendColumnsVisibilityChangedAction();
+        }
+      },
+      {
+        label: 'Add Name',
+        showColumns: ['firstName', 'lastName'],
+        hideOtherColumns: false
+      },
+      {
+        label: 'Toggle Name',
+        showColumns: ['firstName', 'lastName'],
+        toggleSet: true
+      }
+    ]);
+  }
+});
Index: app/components/models-table/select.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/select.js	(revision )
+++ app/components/models-table/select.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/select';
Index: app/templates/components/models-table/header-row-sorting.hbs
===================================================================
--- app/templates/components/models-table/header-row-sorting.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/header-row-sorting.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,32 +0,0 @@
-<tr>
-  {{#each processedColumns as |column|}}
-    {{#if column.isVisible}}
-      {{#if column.useSorting}}
-        <th class="{{classes.theadCell}}" {{action "sort" column}}>
-          {{#if column.templateForSortCell}}
-            {{partial column.templateForSortCell}}
-          {{else}}
-            {{#if column.componentForSortCell}}
-              {{component column.componentForSortCell data=data column=column row=record table=this}}
-            {{else}}
-              {{column.title}}
-              {{partial headerSortingIconsTemplate}}
-            {{/if}}
-          {{/if}}
-        </th>
-      {{else}}
-        <th class="{{classes.theadCell}} {{classes.theadCellNoSorting}}">
-          {{#if column.templateForSortCell}}
-            {{partial column.templateForSortCell}}
-          {{else}}
-            {{#if column.componentForSortCell}}
-              {{component column.componentForSortCell data=data column=column row=record table=this}}
-            {{else}}
-              {{column.title}}
-            {{/if}}
-          {{/if}}
-        </th>
-      {{/if}}
-    {{/if}}
-  {{/each}}
-</tr>
\ No newline at end of file
Index: tests/dummy/app/templates/examples/route-cells.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n    <p>{{description}}</p>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table data=model columns=columns}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n      <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n  data=model\n  columns=columns&rbrace;&rbrace;</code></pre>\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n  </div>\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/route-cells.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/route-cells.hbs	(revision )
@@ -1,17 +1,30 @@
+<h4>Route cells <small>simple table</small></h4>
+<p class="alert alert-info">firstName cell is a link to the route for model in the row.</p>
+{{models-table data=data columns=columns}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-    <p>{{description}}</p>
+  <div class="col-md-6">
+    <p>Component usage:</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
+  columns=columns&rbrace;&rbrace;</code></pre>
   </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns}}
+  <div class="col-md-6">
+    <p><code>columns</code>:</p>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
   </div>
-  <div class="col-md-4">
+</div>
+
+<h4>Route cells <small>server paginated table</small></h4>
+{{models-table-server-paginated data=model columns=columns}}
+<div class="row">
+  <div class="col-md-6">
     <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table-server-paginated
   data=model
   columns=columns&rbrace;&rbrace;</code></pre>
+  </div>
+  <div class="col-md-6">
     <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
+    <pre><code class="language-javascript">{{to-string this "columns"}}</code></pre>
   </div>
 </div>
\ No newline at end of file
Index: tests/dummy/app/templates/examples/filtering.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/filtering.hbs	(revision )
+++ tests/dummy/app/templates/examples/filtering.hbs	(revision )
@@ -0,0 +1,21 @@
+<h4>Filtering
+  <small>simple table</small>
+</h4>
+<p class="alert alert-info">
+  <code>First name</code> uses column values for filter options.<br>
+  <code>Last name</code> has a predefined list of options.<br>
+  <code>Age</code> uses a custom filter-function combined with a predefined list of options.
+</p>
+{{models-table
+  data=data
+  columns=columns
+}}
+
+<h4>Filtering
+  <small>server paginated table</small>
+</h4>
+<p class="alert alert-info"><code>First name</code> and <code>Last name</code> have a predefined lists of options.</p>
+{{models-table-server-paginated
+  data=model
+  columns=columnsForServerTable
+}}
\ No newline at end of file
Index: tests/dummy/app/templates/components/expand-toggle.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/expand-toggle.hbs	(revision )
+++ tests/dummy/app/templates/components/expand-toggle.hbs	(revision )
@@ -0,0 +1,6 @@
+{{#if isExpanded}}
+  <a href="#" {{action "collapseRow" index record bubbles=false}} class={{themeInstance.collapseRow}}><i class="{{themeInstance.collapse-row}}"></i></a>
+{{else}}
+  <a href="#" {{action "expandRow" index record bubbles=false}} class={{themeInstance.expandRow}}><i class="{{themeInstance.expand-row}}"></i></a>
+{{/if}}
+{{yield}}
\ No newline at end of file
Index: .travis.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>---\nlanguage: node_js\nnode_js:\n  # we recommend testing addons with the same minimum supported node version as Ember CLI\n  # so that your addon works for all apps\n  - \"4\"\n\nsudo: false\n\ncache:\n  directories:\n    - $HOME/.npm\n\nenv:\n  # we recommend new addons test the current and previous LTS\n  # as well as latest stable release (bonus points to beta/canary)\n  - EMBER_TRY_SCENARIO=ember-lts-2.4\n  - EMBER_TRY_SCENARIO=ember-lts-2.8\n  - EMBER_TRY_SCENARIO=ember-lts-2.12\n  - EMBER_TRY_SCENARIO=ember-release\n  - EMBER_TRY_SCENARIO=ember-beta\n  - EMBER_TRY_SCENARIO=ember-canary\n  - EMBER_TRY_SCENARIO=ember-default\n\nmatrix:\n  fast_finish: true\n  allow_failures:\n    - env: EMBER_TRY_SCENARIO=ember-canary\n\nbefore_install:\n  - npm config set spin false\n  - npm install -g npm@4\n  - npm --version\n  - npm install -g phantomjs-prebuilt\n  - phantomjs --version\n\ninstall:\n  - npm install\n\nscript:\n  # Usually, it's ok to finish the test scenario without reverting\n  #  to the addon's original dependency state, skipping \"cleanup\".\n  - node_modules/.bin/ember try:one $EMBER_TRY_SCENARIO --skip-cleanup\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .travis.yml	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ .travis.yml	(revision )
@@ -6,6 +6,10 @@
   - "4"
 
 sudo: false
+dist: trusty
+
+addons:
+  chrome: stable
 
 cache:
   directories:
@@ -14,7 +18,6 @@
 env:
   # we recommend new addons test the current and previous LTS
   # as well as latest stable release (bonus points to beta/canary)
-  - EMBER_TRY_SCENARIO=ember-lts-2.4
   - EMBER_TRY_SCENARIO=ember-lts-2.8
   - EMBER_TRY_SCENARIO=ember-lts-2.12
   - EMBER_TRY_SCENARIO=ember-release
@@ -31,11 +34,6 @@
   - npm config set spin false
   - npm install -g npm@4
   - npm --version
-  - npm install -g phantomjs-prebuilt
-  - phantomjs --version
-
-install:
-  - npm install
 
 script:
   # Usually, it's ok to finish the test scenario without reverting
Index: tests/integration/components/models-table/columns-dropdown-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table/columns-dropdown-test.js	(revision )
+++ tests/integration/components/models-table/columns-dropdown-test.js	(revision )
@@ -0,0 +1,63 @@
+import { moduleForComponent, test } from 'ember-qunit';
+import hbs from 'htmlbars-inline-precompile';
+import ModelsTableBs from '../../../pages/models-table-bs';
+import {startMirage} from 'dummy/initializers/ember-cli-mirage';
+
+import {generateColumns} from '../../../helpers/f';
+
+const {sorting, columnsDropDown} = ModelsTableBs;
+
+moduleForComponent('models-table/columns-dropdown', 'Integration | Component | models table/columns dropdown', {
+  integration: true,
+
+  beforeEach() {
+    ModelsTableBs.setContext(this);
+    this.server = startMirage();
+    this.server.createList('user', 100);
+    this.setProperties({
+      data: this.server.db.users,
+      columns: generateColumns(['index', 'firstName', 'lastName']),
+      columnSets: [
+        {
+          label: 'Name',
+          showColumns: ['firstName', 'lastName']
+        }
+      ]
+    });
+  },
+  afterEach() {
+    this.server.shutdown();
+    ModelsTableBs.removeContext();
+  }
+});
+
+test('dropdown is shown', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns columnSets=columnSets as |mt|}}
+    {{#mt.columns-dropdown as |cd|}}
+      <ul class="columns-dropdown">
+        <li><a {{action cd.showAllColumns}} href="#"></a></li>
+        <li><a {{action cd.hideAllColumns}} href="#"></a></li>
+        <li><a {{action cd.restoreDefaultVisibility}} href="#"></a></li>
+        {{#each cd.columnDropdownOptions.columnSets as |columnSet|}}
+          <li><a {{action cd.toggleColumnSet columnSet}} href="#">{{columnSet.label}}</a></li>
+        {{/each}}
+        {{#each cd.processedColumns as |column|}}
+          {{#if column.mayBeHidden}}
+            <li><a {{action cd.toggleHidden column}} href="#"><span class="{{if column.isVisible cd.themeInstance.column-visible cd.themeInstance.column-hidden}}"></span> {{column.title}}</a></li>
+          {{/if}}
+        {{/each}}
+      </ul>
+    {{/mt.columns-dropdown}}
+    {{mt.table}}
+  {{/models-table}}`);
+  assert.deepEqual(sorting().mapBy('text'), ['index', 'firstName', 'lastName'], 'all columns are shown');
+  columnsDropDown(1).click(); // hide all
+  assert.equal(sorting().count, 0, 'all columns are hidden');
+  columnsDropDown(3).click(); // columns set
+  assert.deepEqual(sorting().mapBy('text'), ['firstName', 'lastName'], 'firstName, lastName are shown');
+  columnsDropDown(5).click(); // firstName
+  assert.deepEqual(sorting().mapBy('text'), ['lastName'], 'lastName is shown');
+  columnsDropDown(2).click(); // restore
+  assert.deepEqual(sorting().mapBy('text'), ['index', 'firstName', 'lastName'], 'all columns are shown');
+});
\ No newline at end of file
Index: app/components/models-table/table.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/table.js	(revision )
+++ app/components/models-table/table.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/table';
Index: tests/dummy/app/components/delete-row.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/delete-row.js	(revision )
+++ tests/dummy/app/components/delete-row.js	(revision )
@@ -0,0 +1,15 @@
+import Component from '@ember/component';
+import {get} from '@ember/object';
+import layout from '../templates/components/delete-row';
+
+export default Component.extend({
+  layout,
+  sendAction: null,
+  record: null,
+  actions: {
+    sendAction(actionName, record, event) {
+      get(this, 'sendAction')(actionName, record);
+      event.stopPropagation();
+    }
+  }
+});
Index: tests/unit/utils/better-compare-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import betterCompare from 'ember-models-table/utils/better-compare';\nimport { module, test } from 'qunit';\nimport Ember from 'ember';\n\nconst {\n  Object: EmberObject\n} = Ember;\n\nmodule('Unit | Utility | better compare');\n\ntest('it works', function(assert) {\n  let result = betterCompare(1, 2);\n  assert.equal(result, -1, 'it works with numbers');\n\n  result = betterCompare(2, 1);\n  assert.equal(result, 1, 'it works with equal numbers');\n\n  result = betterCompare(0, 0);\n  assert.equal(result, 0, 'it works with equal numbers');\n\n  result = betterCompare('aa', 'bb');\n  assert.equal(result, -1, 'it works with strings');\n\n  result = betterCompare('aa', 'aa');\n  assert.equal(result, 0, 'it works with equal strings');\n\n  result = betterCompare(true, false);\n  assert.equal(result, 1, 'it works with booleans');\n\n  result = betterCompare(true, true);\n  assert.equal(result, 0, 'it works with equal booleans');\n\n  result = betterCompare({}, {});\n  assert.equal(result, 0, 'it works with empty objects');\n\n  let a = EmberObject.create({});\n  let b = EmberObject.create({});\n  result = betterCompare(a, b);\n  assert.equal(result, 0, 'it works with objects without valueOf method');\n\n  a = EmberObject.create({\n    valueOf() {\n      return 2;\n    }\n  });\n  b = EmberObject.create({\n    valueOf() {\n      return 1;\n    }\n  });\n  result = betterCompare(a, b);\n  assert.equal(result, 1, 'it works with objects with valueOf method');\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/unit/utils/better-compare-test.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/unit/utils/better-compare-test.js	(revision )
@@ -1,10 +1,6 @@
+import EmberObject from '@ember/object';
 import betterCompare from 'ember-models-table/utils/better-compare';
 import { module, test } from 'qunit';
-import Ember from 'ember';
-
-const {
-  Object: EmberObject
-} = Ember;
 
 module('Unit | Utility | better compare');
 
Index: tests/dummy/app/templates/custom/test.hbs
===================================================================
--- tests/dummy/app/templates/custom/test.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/test.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-{{record.index}}+{{record.reversedIndex}}
\ No newline at end of file
Index: addon/templates/components/models-table/select.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/select.hbs	(revision )
+++ addon/templates/components/models-table/select.hbs	(revision )
@@ -0,0 +1,4 @@
+{{#each options as |option|}}
+  <option value="{{option.value}}" selected={{is-equal value option.value}}>{{option.label}}</option>
+{{/each}}
+{{yield}}
Index: tests/dummy/app/routes/examples/filtering.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/filtering.js	(revision )
+++ tests/dummy/app/routes/examples/filtering.js	(revision )
@@ -0,0 +1,53 @@
+import ExampleRoute from './example';
+import {get} from '@ember/object';
+
+export default ExampleRoute.extend({
+
+  setupController(controller) {
+    this._super(...arguments);
+    controller.set('columns', [
+      {propertyName: 'index'},
+      {propertyName: 'firstName', filterWithSelect: true},
+      {
+        propertyName: 'lastName',
+        filterWithSelect: true,
+        predefinedFilterOptions: controller.get('data').mapBy('lastName').slice(0, 10)
+      },
+      {
+        propertyName: 'age',
+        filterFunction (val, filterVal, row) {
+          const _val = get(row, 'age');
+          if (filterVal === '< 34') {
+            return _val < 34;
+          }
+          if (filterVal === '= 34') {
+            return _val === 34;
+          }
+          if (filterVal === '> 34') {
+            return _val > 34;
+          }
+        },
+        filterWithSelect: true,
+        predefinedFilterOptions: ['< 34', '= 34', '> 34']
+      },
+      {propertyName: 'city'},
+      {propertyName: 'canBuyBeer', filterWithSelect: true},
+    ]);
+    controller.set('columnsForServerTable', [
+      {propertyName: 'index'},
+      {
+        propertyName: 'firstName',
+        filterWithSelect: true,
+        predefinedFilterOptions: controller.get('data').mapBy('firstName')
+      },
+      {
+        propertyName: 'lastName',
+        filterWithSelect: true,
+        predefinedFilterOptions: controller.get('data').mapBy('lastName').slice(0, 10)
+      },
+      {propertyName: 'age'},
+      {propertyName: 'city'},
+    ]);
+  }
+
+});
Index: addon/components/models-table/grouped-header.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/grouped-header.js	(revision )
+++ addon/components/models-table/grouped-header.js	(revision )
@@ -0,0 +1,48 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/grouped-header';
+
+/**
+ * Table header item used within [models-table/table-header](Components.ModelsTableTableHeader.html).
+ *
+ * Each `grouped-header` should represents one item from [ModelsTable.groupedHeaders](Components.ModelsTable.html#property_groupedHeaders).
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.header as |header|}}
+ *       {{#each header.groupedHeaders as |groupedHeader|}}
+ *         {{header.grouped-header groupedHeader=groupedHeader}}
+ *       {{/each}}
+ *       {{! ... }}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ *
+ * @class ModelsTableGroupedHeader
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tr',
+
+  /**
+   * @type {groupedHeader}
+   * @default null
+   * @property groupedHeader
+   */
+  groupedHeader: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @default null
+   * @type object
+   */
+  themeInstance: null
+});
Index: tests/dummy/app/routes/examples/route-cells.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nexport default Ember.Route.extend({\n\n  model() {\n    return this.get('store').findAll('user');\n  }\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/route-cells.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/routes/examples/route-cells.js	(revision )
@@ -1,9 +1,23 @@
-import Ember from 'ember';
+import ExampleRoute from './example';
+import {set} from '@ember/object';
 
-export default Ember.Route.extend({
+export default ExampleRoute.extend({
 
-  model() {
-    return this.get('store').findAll('user');
+  setupController(controller) {
+    this._super(...arguments);
+    set(controller, 'columns', [
+      {
+        propertyName: 'id',
+        routeName: 'users.user'
+      },
+      {
+        propertyName: 'firstName',
+        routeName: 'users.user',
+      },
+      {propertyName: 'lastName'},
+      {propertyName: 'age'},
+      {propertyName: 'city'}
+    ]);
   }
 
 });
Index: app/themes/default.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/themes/default.js	(revision )
+++ app/themes/default.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/themes/default';
Index: tests/dummy/app/controllers/examples/custom-column-classes.js
===================================================================
--- tests/dummy/app/controllers/examples/custom-column-classes.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/custom-column-classes.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,33 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Custom Column Classes',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID',
-      className: 'text-right'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name',
-      className: 'text-success'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name',
-      className: 'text-uppercase'
-    },
-    {
-      propertyName: 'city',
-      title: 'City',
-      className: 'text-center'
-    }
-  ])
-
-});
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/grouped-headers.js
===================================================================
--- tests/dummy/app/controllers/examples/grouped-headers.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/grouped-headers.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,39 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Grouped Headers',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ]),
-
-  groupedHeaders: [
-    [
-      {title: 'Big Title', colspan: 4}
-    ],
-    [
-      {title: 'Subtitle 1', colspan: 2},
-      {title: 'Subtitle 2', colspan: 2}
-    ]
-  ]
-
-});
\ No newline at end of file
Index: testem.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-env node */\nmodule.exports = {\n  test_page: 'tests/index.html?hidepassed',\n  disable_watching: true,\n  launch_in_ci: [\n    'PhantomJS'\n  ],\n  launch_in_dev: [\n    'PhantomJS',\n    'Chrome'\n  ]\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- testem.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ testem.js	(revision )
@@ -3,10 +3,17 @@
   test_page: 'tests/index.html?hidepassed',
   disable_watching: true,
   launch_in_ci: [
-    'PhantomJS'
+    'Chrome'
   ],
   launch_in_dev: [
-    'PhantomJS',
     'Chrome'
-  ]
+  ],
+  browser_args: {
+    Chrome: [
+      '--disable-gpu',
+      '--headless',
+      '--remote-debugging-port=9222',
+      '--window-size=1440,900'
+    ]
+  }
 };
Index: addon/-private/column.js
===================================================================
--- addon/-private/column.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/-private/column.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,76 +0,0 @@
-import Ember from 'ember';
-
-const {
-  observer,
-  computed,
-  isEmpty,
-  Object: O,
-  set,
-  get,
-  A
-} = Ember;
-
-
-/**
- * @typedef {object} ModelsTable~ModelsTableColumn
- * @property {string} propertyName data's property shown in the current column
- * @property {string} title column's title
- * @property {string} template custom template used in the column's cells
- * @property {string} component custom component used in the column's cells. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
- * @property {string} templateForFilterCell custom template used in the header cell with filter
- * @property {string} componentForFilterCell custom component used in the header cell with filter. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
- * @property {string} templateForSortCell custom template used in the header cell with sorting and column title
- * @property {string} componentForSortCell custom component used in the header cell with sorting and column title. It receives 4 attributes - table (this component), record, column (one of the processedColumns) and all data
- * @property {string} sortedBy custom data's property that is used to sort column
- * @property {string} sortDirection the default sorting direction of the column, asc or desc - only in effect if sortPrecedence is set!
- * @property {number} sortPrecedence the sort precedence for this column - needs to be larger than -1 for sortDirection to take effect
- * @property {boolean} disableSorting if sorting should be disabled for this column
- * @property {boolean} disableFiltering if filtering should be disabled for this column
- * @property {string} filterString a default filtering for this column
- * @property {string} filteredBy custom data's property that is used to filter column
- * @property {string} sorting is column sorted now
- * @property {boolean} isHidden is column hidden now
- * @property {boolean} mayBeHidden may this column be hidden
- * @property {boolean} filterWithSelect should select-box be used as filter for this column
- * @property {boolean} sortFilterOptions should options in the select-box be sorted (<code>false</code> by default)
- * @property {string[]|number[]} predefinedFilterOptions list of option to the filter-box (used if <code>filterWithSelect</code> is true)
- * @property {string} className custom classNames for column
- * @property {function} filterFunction custom function used to filter rows (used if <code>filterWithSelect</code> is false)
- * @property {string} filterPlaceholder placeholder for filter-input
- * @property {object} originalDefinition object containing the definition of the column passed into the component.
- */
-export default O.extend({
-
-  cssPropertyName: computed('propertyName', function () {
-    return get(this, 'propertyName').replace(/\./g, '-');
-  }),
-
-  isVisible: computed.not('isHidden'),
-
-  sortAsc: computed.equal('sorting', 'asc'),
-
-  sortDesc: computed.equal('sorting', 'desc'),
-
-  filterUsed: computed.notEmpty('filterString'),
-
-  /**
-   * If preselected option doesn't exist after <code>filterOptions</code> update,
-   * <code>filterString</code> is reverted to empty string (basically, filtering for this column is dropped)
-   */
-  cleanFilterString: observer('filterWithSelect', 'filterOptions.[]', 'filterString', function () {
-    let filterOptions = get(this, 'filterOptions');
-    let filterWithSelect = get(this, 'filterWithSelect');
-    let filterString = get(this, 'filterString');
-    if (!filterWithSelect || isEmpty(filterOptions)) {
-      return;
-    }
-    const filterOptionExists = A(filterOptions).find(option => {
-      const value = get(option, 'value');
-      return [value, '' + value].indexOf(filterString) !== -1;
-    });
-    if (!filterOptionExists) {
-      set(this, 'filterString', '');
-    }
-  })
-
-});
Index: tests/dummy/mirage/config.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nconst {String: S, A } = Ember;\n\nconst {keys} = Object;\n\nMath.trunc = Math.trunc || function(x) {\n  return x - x % 1;\n};\n\nexport default function() {\n\n  this.timing = 0;\n\n  function _doFilter(collection, filterBy) {\n    return collection.filter(item => {\n      let result = true;\n      Object.keys(filterBy).forEach(field => {\n        if(('' + item[field]).indexOf('' + filterBy[field]) === -1) {\n          result = false;\n        }\n      });\n      return result;\n    });\n  }\n\n  function _getFilters(queryParams) {\n    let columns = ['age', 'index', 'first-name', 'last-name', 'city'];\n    let filterBy = {};\n    keys(queryParams).forEach(function(n) {\n      let dasherized = S.dasherize(n);\n      if (columns.indexOf(dasherized) !== -1) {\n        filterBy[dasherized] = queryParams[n];\n      }\n    });\n    return filterBy;\n  }\n\n  function _doGlobalFilter(collection, value) {\n    if (!value) {\n      return collection.where(() => true);\n    }\n    let _value = '' + value;\n    return collection.where(item => {\n      let result = false;\n      Object.keys(item).forEach(field => {\n        if(('' + item[field]).indexOf(_value) !== -1) {\n          result = true;\n        }\n      });\n      return result;\n    });\n  }\n\n  this.get('/users', function ({users}, {queryParams}) {\n    let data = _doGlobalFilter(users, queryParams.globalSearch);\n    let filterBy = _getFilters(queryParams);\n    let useFilters = !!keys(filterBy).length;\n    data = useFilters ? _doFilter(data, filterBy) : data;\n    let json = this.serialize(data);\n    let pageSize = parseInt(queryParams.pageSize || 10, 10);\n    let page = parseInt(queryParams.page || 1, 10);\n    let startIndex = pageSize * (page - 1);\n    let itemsCount = json.data.length;\n    let pagesCount = Math.trunc(itemsCount / pageSize);\n    if (itemsCount % pageSize) {\n      pagesCount++;\n    }\n    let {sort} = queryParams;\n    if (sort) {\n      json.data = A(json.data).sortBy(`attributes.${S.dasherize(sort)}`);\n    }\n    if (queryParams.sortDirection === 'DESC') {\n      json.data = json.data.reverse();\n    }\n    json.data = json.data.slice(startIndex, startIndex + pageSize);\n    json.meta = {\n      itemsCount,\n      pagesCount\n    };\n    return json;\n  });\n\n  this.get('/users/:id');\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/mirage/config.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/mirage/config.js	(revision )
@@ -1,6 +1,5 @@
-import Ember from 'ember';
-
-const {String: S, A } = Ember;
+import { A } from '@ember/array';
+import { dasherize } from '@ember/string';
 
 const {keys} = Object;
 
@@ -28,7 +27,7 @@
     let columns = ['age', 'index', 'first-name', 'last-name', 'city'];
     let filterBy = {};
     keys(queryParams).forEach(function(n) {
-      let dasherized = S.dasherize(n);
+      let dasherized = dasherize(n);
       if (columns.indexOf(dasherized) !== -1) {
         filterBy[dasherized] = queryParams[n];
       }
@@ -68,7 +67,7 @@
     }
     let {sort} = queryParams;
     if (sort) {
-      json.data = A(json.data).sortBy(`attributes.${S.dasherize(sort)}`);
+      json.data = A(json.data).sortBy(`attributes.${dasherize(sort)}`);
     }
     if (queryParams.sortDirection === 'DESC') {
       json.data = json.data.reverse();
@@ -82,5 +81,6 @@
   });
 
   this.get('/users/:id');
+  this.delete('/users/:id');
 
 }
Index: tests/dummy/app/templates/custom/sort-cell.hbs
===================================================================
--- tests/dummy/app/templates/custom/sort-cell.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/sort-cell.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,2 +0,0 @@
-{{column.title}}
-{{partial headerSortingIconsTemplate}}
\ No newline at end of file
Index: tests/dummy/app/components/custom-action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/custom-action.js	(revision )
+++ tests/dummy/app/components/custom-action.js	(revision )
@@ -0,0 +1,12 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../templates/components/custom-action';
+
+export default Component.extend({
+  layout,
+  actions: {
+    sendAction() {
+      get(this, 'sendAction')('action', get(this, 'record'));
+    }
+  }
+});
Index: tests/helpers/destroy-app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nexport default function destroyApp(application) {\n  Ember.run(application, 'destroy');\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/helpers/destroy-app.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/helpers/destroy-app.js	(revision )
@@ -1,5 +1,5 @@
-import Ember from 'ember';
+import { run } from '@ember/runloop';
 
 export default function destroyApp(application) {
-  Ember.run(application, 'destroy');
+  run(application, 'destroy');
 }
Index: tests/dummy/app/routes/examples/add-remove-column.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/add-remove-column.js	(revision )
+++ tests/dummy/app/routes/examples/add-remove-column.js	(revision )
@@ -0,0 +1,3 @@
+import ExampleRoute from './example';
+
+export default ExampleRoute.extend({});
Index: tests/dummy/public/assets/prism.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/public/assets/prism.css	(revision )
+++ tests/dummy/public/assets/prism.css	(revision )
@@ -0,0 +1,138 @@
+/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript+handlebars */
+/**
+ * prism.js default theme for JavaScript, CSS and HTML
+ * Based on dabblet (http://dabblet.com)
+ * @author Lea Verou
+ */
+
+code[class*="language-"],
+pre[class*="language-"] {
+  color: black;
+  background: none;
+  text-shadow: 0 1px white;
+  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
+  text-align: left;
+  white-space: pre;
+  word-spacing: normal;
+  word-break: normal;
+  word-wrap: normal;
+  line-height: 1.5;
+
+  -moz-tab-size: 4;
+  -o-tab-size: 4;
+  tab-size: 4;
+
+  -webkit-hyphens: none;
+  -moz-hyphens: none;
+  -ms-hyphens: none;
+  hyphens: none;
+}
+
+pre[class*="language-"]::-moz-selection, pre[class*="language-"] ::-moz-selection,
+code[class*="language-"]::-moz-selection, code[class*="language-"] ::-moz-selection {
+  text-shadow: none;
+  background: #b3d4fc;
+}
+
+pre[class*="language-"]::selection, pre[class*="language-"] ::selection,
+code[class*="language-"]::selection, code[class*="language-"] ::selection {
+  text-shadow: none;
+  background: #b3d4fc;
+}
+
+@media print {
+  code[class*="language-"],
+  pre[class*="language-"] {
+    text-shadow: none;
+  }
+}
+
+/* Code blocks */
+pre[class*="language-"] {
+  padding: 1em;
+  margin: .5em 0;
+  overflow: auto;
+}
+
+:not(pre) > code[class*="language-"],
+pre[class*="language-"] {
+  background: #f5f2f0;
+}
+
+/* Inline code */
+:not(pre) > code[class*="language-"] {
+  padding: .1em;
+  border-radius: .3em;
+  white-space: normal;
+}
+
+.token.comment,
+.token.prolog,
+.token.doctype,
+.token.cdata {
+  color: slategray;
+}
+
+.token.punctuation {
+  color: #999;
+}
+
+.namespace {
+  opacity: .7;
+}
+
+.token.property,
+.token.tag,
+.token.boolean,
+.token.number,
+.token.constant,
+.token.symbol,
+.token.deleted {
+  color: #905;
+}
+
+.token.selector,
+.token.attr-name,
+.token.string,
+.token.char,
+.token.builtin,
+.token.inserted {
+  color: #690;
+}
+
+.token.operator,
+.token.entity,
+.token.url,
+.language-css .token.string,
+.style .token.string {
+  color: #a67f59;
+  background: hsla(0, 0%, 100%, .5);
+}
+
+.token.atrule,
+.token.attr-value,
+.token.keyword {
+  color: #07a;
+}
+
+.token.function {
+  color: #DD4A68;
+}
+
+.token.regex,
+.token.important,
+.token.variable {
+  color: #e90;
+}
+
+.token.important,
+.token.bold {
+  font-weight: bold;
+}
+.token.italic {
+  font-style: italic;
+}
+
+.token.entity {
+  cursor: help;
+}
\ No newline at end of file
Index: tests/integration/components/models-table/summary-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/components/models-table/summary-test.js	(revision )
+++ tests/integration/components/models-table/summary-test.js	(revision )
@@ -0,0 +1,114 @@
+import { moduleForComponent, test } from 'ember-qunit';
+import hbs from 'htmlbars-inline-precompile';
+import ModelsTableBs from '../../../pages/models-table-bs';
+import { startMirage } from 'dummy/initializers/ember-cli-mirage';
+
+import { generateColumns } from '../../../helpers/f';
+
+const {navigation, filters} = ModelsTableBs;
+
+moduleForComponent('models-table/summary', 'Integration | Component | models table/summary', {
+  integration: true,
+  beforeEach() {
+    ModelsTableBs.setContext(this);
+    this.server = startMirage();
+    this.server.createList('user', 100);
+    this.setProperties({
+      data: this.server.db.users,
+      columns: generateColumns(['index'])
+    });
+  },
+  afterEach() {
+    this.server.shutdown();
+    ModelsTableBs.removeContext();
+  }
+});
+
+test('summary-message is shown', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{footer.summary}}
+      {{footer.pagination-simple}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 100');
+  this.set('data', this.server.db.users.slice(0, 50));
+  navigation.goToNextPage();
+  assert.equal(ModelsTableBs.summary, 'Show 11 - 20 of 50');
+});
+
+test('summary-message is shown (2)', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{#footer.summary as |s|}}
+        {{s.summary}}
+      {{/footer.summary}}
+      {{footer.pagination-simple}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.equal(ModelsTableBs.summary, 'Show 1 - 10 of 100');
+  this.set('data', this.server.db.users.slice(0, 50));
+  navigation.goToNextPage();
+  assert.equal(ModelsTableBs.summary, 'Show 11 - 20 of 50');
+});
+
+test('summary-message is shown (3)', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{#footer.summary as |s|}}
+        {{s.firstIndex}}:{{s.lastIndex}}/{{s.recordsCount}}
+      {{/footer.summary}}
+      {{footer.pagination-simple}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.equal(ModelsTableBs.summary, '1:10/100');
+  this.set('data', this.server.db.users.slice(0, 50));
+  navigation.goToNextPage();
+  assert.equal(ModelsTableBs.summary, '11:20/50');
+});
+
+test('clear-filters button is accessible', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{footer.summary}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.notOk(ModelsTableBs.clearAllFiltersExists);
+  filters(0).inputFilter('1');
+  assert.ok(ModelsTableBs.clearAllFiltersExists);
+  ModelsTableBs.clearAllFilters();
+  assert.notOk(ModelsTableBs.clearAllFiltersExists);
+});
+
+test('clear-filters button is accessible (2)', function (assert) {
+  this.render(hbs`
+  {{#models-table data=data columns=columns as |mt|}}
+    {{mt.table}}
+    {{#mt.footer as |footer|}}
+      {{#footer.summary as |s|}}
+        {{#if s.anyFilterUsed}}
+          <a href="#" {{action s.clearFilters}} class="clearFilters"></a>
+        {{/if}}
+      {{/footer.summary}}
+      {{footer.pagination-simple}}
+    {{/mt.footer}}
+  {{/models-table}}`);
+
+  assert.notOk(ModelsTableBs.clearAllFiltersExists);
+  filters(0).inputFilter('1');
+  assert.ok(ModelsTableBs.clearAllFiltersExists);
+  ModelsTableBs.clearAllFilters();
+  assert.notOk(ModelsTableBs.clearAllFiltersExists);
+});
\ No newline at end of file
Index: addon/components/models-table/table-footer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/table-footer.js	(revision )
+++ addon/components/models-table/table-footer.js	(revision )
@@ -0,0 +1,113 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/table-footer';
+
+/**
+ * Table footer used within [models-table/table](Components.ModelsTableTable.html).
+ *
+ * By default it's an empty component. It should be used with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.footer as |footer|}}
+ *       {{! ... }}
+ *     {{/table.footer}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTableTableFooter
+ * @extends Ember.Component
+ * @namespace Components
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tfoot',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @type object[]
+   * @default null
+   */
+  data: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object[]
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.goToPage:method"}}ModelsTable.actions.goToPage{{/crossLink}}
+   *
+   * @event goToPage
+   */
+  goToPage: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clearFilters:method"}}ModelsTable.actions.clearFilters{{/crossLink}}
+   *
+   * @event clearFilters
+   */
+  clearFilters: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandRow:method"}}ModelsTable.actions.expandRow{{/crossLink}}
+   *
+   * @event expandRow
+   */
+  expandRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseRow:method"}}ModelsTable.actions.collapseRow{{/crossLink}}
+   *
+   * @event collapseRow
+   */
+  collapseRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+});
Index: tests/dummy/app/controllers/examples/cell-template.js
===================================================================
--- tests/dummy/app/controllers/examples/cell-template.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/cell-template.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,33 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Table with custom template in the cell',
-  model: generateContent(30),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    },
-    {
-      template: 'custom/fullname',
-      title: 'Full name'
-    }
-  ])
-
-});
\ No newline at end of file
Index: app/helpers/html-safe.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/helpers/html-safe.js	(revision )
+++ app/helpers/html-safe.js	(revision )
@@ -0,0 +1,1 @@
+export { default, htmlSafe } from 'ember-models-table/helpers/html-safe';
Index: tests/pages/models-table-bs.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/pages/models-table-bs.js	(revision )
+++ tests/pages/models-table-bs.js	(revision )
@@ -0,0 +1,143 @@
+import {
+  create,
+  text,
+  fillable,
+  clickable,
+  count,
+  hasClass,
+  findElement,
+  value,
+  attribute,
+  collection
+} from 'ember-cli-page-object';
+
+// https://github.com/san650/ember-cli-page-object/pull/323 is not in the any release yet
+function exists(selector, options) {
+  return {
+    isDescriptor: true,
+    get() {
+      return !!findElement(this, selector, options).length;
+    }
+  };
+}
+function notExists(selector, options) {
+  return {
+    isDescriptor: true,
+    get() {
+      return !findElement(this, selector, options).length;
+    }
+  };
+}
+
+export default create({
+  scope: '.models-table-wrapper',
+  tablesCount: count('table'),
+  summary: text('.table-summary'),
+  globalFilterLabel: text('.globalSearch label'),
+  doGlobalFilter: fillable('.filterString'),
+  clearGlobalFilter: clickable('.filterString~.clearFilterIcon'),
+  clearGlobalFilterExists: exists('.filterString~.clearFilterIcon'),
+  tableFooterCount: count('.table-footer'),
+  clearAllFilters: clickable('a.clearFilters'),
+  clearAllFiltersExists: exists('a.clearFilters'),
+  changePageSize: fillable('select.changePageSize'),
+  pageSize: value('select.changePageSize'),
+  expandAllRows: clickable('thead .expand-all-rows'),
+  collapseAllRows: clickable('thead .collapse-all-rows'),
+  expandRowButtons: count('a.expand-row'),
+  collapseRowButtons: count('a.collapse-row'),
+  filters: collection({
+    itemScope: 'table thead tr:eq(1) th',
+    item: {
+      inputFilter: fillable('input'),
+      inputValue: value('input'),
+      inputPlaceholder: attribute('placeholder', 'input'),
+      inputFilterExists: exists('input'),
+      clearFilter: clickable('.clearFilterIcon'),
+      clearFilterExists: exists('.clearFilterIcon'),
+      selectFilter: fillable('select'),
+      selectFilterExists: exists('select'),
+      selectValue: value('select'),
+      selectOptions: text('select option', {multiple: true})
+    }
+  }),
+  sorting: collection({
+    itemScope: 'table thead tr:eq(0) th',
+    item: {
+      title: text(),
+      isSorted: hasClass('glyphicon', 'span'),
+    }
+  }),
+  headers: collection({
+    scope: 'thead',
+    itemScope: 'tr',
+    item: {
+      cells: text('th', {multiple: true}),
+      colspans: attribute('colspan', 'th', {multiple: true}),
+    }
+  }),
+  navigation: {
+    scope: '.table-nav',
+    text: text(''),
+    goToLastPage: clickable('a:eq(3)'),
+    goToLastPageDisabled: hasClass('disabled', 'a:eq(3)'),
+    goToNextPage: clickable('a:eq(2)'),
+    goToNextPageDisabled: hasClass('disabled', 'a:eq(2)'),
+    goToPrevPage: clickable('a:eq(1)'),
+    goToPrevPageDisabled: hasClass('disabled', 'a:eq(1)'),
+    goToFirstPage: clickable('a:eq(0)'),
+    goToFirstPageDisabled: hasClass('disabled', 'a:eq(0)'),
+    navigationButtons: text('button', {multiple: true}),
+    disabledNavigationLinksCount: count('a.disabled')
+  },
+  numericNavigation: collection({
+    scope: '.table-nav',
+    itemScope: 'button',
+    item: {
+      label: text()
+    }
+  }),
+  rows: collection({
+    scope: 'tbody',
+    itemScope: 'tr:not(.expand-row)',
+    item: {
+      expand: clickable('a.expand-row'),
+      collapse: clickable('a.collapse-row'),
+      expanded: notExists('a.expand-row'),
+      collapsed: notExists('a.collapse-row'),
+      selected: hasClass('selected-row'),
+      getCellColspans() {
+        return this.cells().mapBy('colspan');
+      },
+      cells: collection({
+        itemScope: 'td',
+        item: {
+          content: text(),
+          colspan: attribute('colspan')
+        }
+      })
+    }
+  }),
+  rowExpands: collection({
+    scope: 'tbody',
+    itemScope: 'tr.expand-row',
+    item: {
+      selected: hasClass('selected-expand'),
+      id: text('.id')
+    }
+  }),
+  getCellsCount() {
+    return this.rows().map(row => row.cells().count).reduce((a, b) => a + b, 0);
+  },
+  getColumnCells(index) {
+    return this.rows().map(row => row.cells(index).content);
+  },
+  columnsDropDown: collection({
+    scope: '.columns-dropdown',
+    toggleLabel: text('button'),
+    itemScope: 'li a',
+    item: {
+      label: text()
+    }
+  })
+});
Index: app/components/models-table/columns-dropdown.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/columns-dropdown.js	(revision )
+++ app/components/models-table/columns-dropdown.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/columns-dropdown';
Index: app/components/models-table/global-filter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/global-filter.js	(revision )
+++ app/components/models-table/global-filter.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/global-filter';
Index: app/components/models-table/pagination-simple.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/pagination-simple.js	(revision )
+++ app/components/models-table/pagination-simple.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/pagination-simple';
Index: app/templates/components/models-table/row.hbs
===================================================================
--- app/templates/components/models-table/row.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/row.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,34 +0,0 @@
-<tr class="{{if (exists-in _selectedItems record) "selected-row"}}" {{action "clickOnRow" index record on="click" preventDefault=false}}>
-  {{#each processedColumns as |column|}}
-    {{#if column.isVisible}}
-      <td class={{column.className}}>
-        {{#if column.routeName}}
-          {{#link-to column.routeName record.id}}
-            {{#if column.propertyName}}
-              {{get record column.propertyName}}
-            {{else}}
-              {{record.id}}
-            {{/if}}
-          {{/link-to}}
-        {{else}}
-          {{#if column.template}}
-            {{partial column.template}}
-          {{else}}
-            {{#if column.component}}
-              {{component column.component data=data record=record column=column table=this}}
-            {{else}}
-              {{get record column.propertyName}}
-            {{/if}}
-          {{/if}}
-        {{/if}}
-      </td>
-    {{/if}}
-  {{/each}}
-</tr>
-{{#if (exists-in _expandedRowIndexes index)}}
-  <tr class="expand-row {{concat "expand-" index}} {{if (exists-in _selectedItems record) "selected-expand"}}" {{action "clickOnRow" index record on="click"}}>
-    <td colspan="{{visibleProcessedColumns.length}}">
-      {{partial expandedRowTemplate}}
-    </td>
-  </tr>
-{{/if}}
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/add-remove-column.js
===================================================================
--- tests/dummy/app/controllers/examples/add-remove-column.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/add-remove-column.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,51 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A, set, get} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Add/Remove column',
-  description: 'Column "Last Name" is not just shown/hidden. It is removed or added to the columns-array and table detects this changes.',
-  model: generateContent(30),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ]),
-  column: {
-    propertyName: 'lastName',
-    title: 'Last Name'
-  },
-
-  columnAdded: false,
-
-  actions: {
-
-    toggleColumn () {
-      var columnAdded = get(this, 'columnAdded');
-      var columns = get(this, 'columns');
-      var column = get(this, 'column');
-      if(columnAdded) {
-        // remove column
-        columns = A(columns).filter(c=>c.propertyName !== column.propertyName);
-      }
-      else {
-        // add column
-        columns.pushObject(column);
-      }
-      set(this, 'columns', A(columns));
-      set(this, 'columnAdded', !columnAdded);
-    }
-  }
-
-});
\ No newline at end of file
Index: tests/dummy/app/templates/examples/grouped-headers.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table\n      data=model\n      columns=columns\n      groupedHeaders=groupedHeaders\n      showColumnsDropdown=false\n      showGlobalFilter=false\n      useFilteringByColumns=false\n    }}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n      <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n        data=model\n        columns=columns\n        groupedHeaders=groupedHeaders\n        showColumnsDropdown=false&rbrace;&rbrace;\n      </code></pre>\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n    <p><code>groupedHeaders</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'groupedHeaders'}}</code></pre>\n  </div>\n</div>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/grouped-headers.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/grouped-headers.hbs	(revision )
@@ -1,28 +1,53 @@
+<h4>Grouped headers
+  <small>simple table</small>
+</h4>
+{{models-table
+  data=data
+  columns=columns
+  groupedHeaders=groupedHeaders
+  showColumnsDropdown=false
+  showGlobalFilter=false
+  useFilteringByColumns=false
+}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
+  <div class="col-md-6">
+    <p>Component usage:</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=data
+  columns=columns
+  groupedHeaders=groupedHeaders
+  showColumnsDropdown=false&rbrace;&rbrace;
+</code></pre>
   </div>
-  <div class="col-md-8">
-    {{models-table
-      data=model
-      columns=columns
-      groupedHeaders=groupedHeaders
-      showColumnsDropdown=false
-      showGlobalFilter=false
-      useFilteringByColumns=false
-    }}
-  </div>
-  <div class="col-md-4">
+  <div class="col-md-6">
+    <p><code>groupedHeaders</code>:</p>
+    <pre><code class="language-javascript">{{to-string this 'groupedHeaders'}}</code></pre>
+  </div>
+</div>
+
+<h4>Grouped headers
+  <small>server paginated table</small>
+</h4>
+{{models-table-server-paginated
+  data=model
+  columns=columns
+  groupedHeaders=groupedHeaders
+  showColumnsDropdown=false
+  showGlobalFilter=false
+  useFilteringByColumns=false
+}}
+<div class="row">
+  <div class="col-md-6">
     <p>Component usage:</p>
-      <pre><code class="handlebars">&lbrace;&lbrace;models-table
-        data=model
-        columns=columns
-        groupedHeaders=groupedHeaders
-        showColumnsDropdown=false&rbrace;&rbrace;
-      </code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+  data=model
+  columns=columns
+  groupedHeaders=groupedHeaders
+  showColumnsDropdown=false&rbrace;&rbrace;
+</code></pre>
+  </div>
+  <div class="col-md-6">
     <p><code>groupedHeaders</code>:</p>
-    <pre><code class="javascript">{{to-string this 'groupedHeaders'}}</code></pre>
+    <pre><code class="language-javascript">{{to-string this 'groupedHeaders'}}</code></pre>
   </div>
 </div>
\ No newline at end of file
Index: app/components/models-table/table-body.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/table-body.js	(revision )
+++ app/components/models-table/table-body.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/table-body';
Index: tests/dummy/app/templates/custom/expanded-row.hbs
===================================================================
--- tests/dummy/app/templates/custom/expanded-row.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/expanded-row.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<p>Expanded row for record with id = <span class="id">{{record.id}}</span>.</p>
\ No newline at end of file
Index: addon/components/models-table/table-body.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/table-body.js	(revision )
+++ addon/components/models-table/table-body.js	(revision )
@@ -0,0 +1,204 @@
+import Component from '@ember/component';
+import { get } from '@ember/object';
+import layout from '../../templates/components/models-table/table-body';
+
+/**
+ * Table body used within [models-table/table](Components.ModelsTableTable.html).
+ *
+ * Component contains rows for each record, row expands (if provided) and components for situations with missing data or when all columns are hidden.
+ *
+ Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{table.body}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#if body.allColumnsAreHidden}}
+ *         {{body.columns-hidden}}
+ *       {{else}}
+ *         {{#if body.visibleContent.length}}
+ *           {{#each body.visibleContent as |record index|}}
+ *             {{body.row record=record index=index}}
+ *             {{#if (exists-in body.expandedItems record)}}
+ *               {{body.row-expand record=record index=index}}
+ *             {{/if}}
+ *           {{/each}}
+ *         {{else}}
+ *           {{body.no-data}}
+ *         {{/if}}
+ *       {{/if}}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * ModelsTableTableHeader yields references to the following contextual components:
+ *
+ * * [models-table/columns-hidden](Components.ModelsTableColumnsHidden.html) - component used when all columns are hidden and no data items are shown. Usually it contains a simple message
+ * * [models-table/row](Components.ModelsTableRow.html) - component represents each table-body row with a single record.
+ * * [models-table/row-expand](Components.ModelsTableRowExpand.html) - component with extra data shown when selected row is expanded
+ * * [models-table/no-data](Components.ModelsTableNoData.html) - component used when no data provided to the table. Usually it contains a simple message
+ *
+ * Check own docs for each component to get detailed info.
+
+ *
+ * @namespace Components
+ * @class ModelsTableTableBody
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tbody',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTableTable/columnsCount:property"}}ModelsTable.columnsCount{{/crossLink}}
+   *
+   * @property columnsCount
+   * @type number
+   * @default null
+   */
+  columnsCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/visibleContent:property"}}ModelsTable.visibleContent{{/crossLink}}
+   *
+   * @property visibleContent
+   * @type object[]
+   * @default null
+   */
+  visibleContent: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_selectedItems:property"}}ModelsTable._selectedItems{{/crossLink}}
+   *
+   * @property selectedItems
+   * @type object[]
+   * @default null
+   */
+  selectedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/_expandedItems:property"}}ModelsTable.expandedItems{{/crossLink}}
+   *
+   * @property expandedItems
+   * @type number[]
+   * @default null
+   */
+  expandedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/expandedRowComponent:property"}}ModelsTable.expandedRowComponent{{/crossLink}}
+   *
+   * @property expandedRowComponent
+   * @type string
+   * @default null
+   */
+  expandedRowComponent: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/visibleProcessedColumns:property"}}ModelsTable.visibleProcessedColumns{{/crossLink}}
+   *
+   * @property visibleProcessedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  visibleProcessedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/allColumnsAreHidden:property"}}ModelsTable.allColumnsAreHidden{{/crossLink}}
+   *
+   * @property allColumnsAreHidden
+   * @type boolean
+   * @default null
+   */
+  allColumnsAreHidden: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/data:property"}}ModelsTable.data{{/crossLink}}
+   *
+   * @property data
+   * @type object[]
+   * @default null
+   */
+  data: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clickOnRow:method"}}ModelsTable.actions.clickOnRow{{/crossLink}}
+   *
+   * @event clickOnRow
+   */
+  clickOnRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandRow:method"}}ModelsTable.actions.expandRow{{/crossLink}}
+   *
+   * @event expandRow
+   */
+  expandRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseRow:method"}}ModelsTable.actions.collapseRow{{/crossLink}}
+   *
+   * @event collapseRow
+   */
+  collapseRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.expandAllRows:method"}}ModelsTable.actions.expandAllRows{{/crossLink}}
+   *
+   * @event expandAllRows
+   */
+  expandAllRows: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.collapseAllRows:method"}}ModelsTable.actions.collapseAllRows{{/crossLink}}
+   *
+   * @event collapseAllRows
+   */
+  collapseAllRows: null,
+
+  actions: {
+    clickOnRow(index, row) {
+      get(this, 'clickOnRow')(index, row);
+    }
+  }
+});
Index: app/components/models-table/page-size-select.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/page-size-select.js	(revision )
+++ app/components/models-table/page-size-select.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/page-size-select';
Index: addon/templates/components/models-table/table-header.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/table-header.hbs	(revision )
+++ addon/templates/components/models-table/table-header.hbs	(revision )
@@ -0,0 +1,76 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      row-sorting=(
+        component "models-table/row-sorting"
+        processedColumns=processedColumns
+        themeInstance=themeInstance
+        data=data
+        messages=messages
+        selectedItems=selectedItems
+        expandedItems=expandedItems
+        sort=sort
+        sendAction=sendAction
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+        toggleAllSelection=toggleAllSelection
+      )
+      row-filtering=(
+        component "models-table/row-filtering"
+        processedColumns=processedColumns
+        themeInstance=themeInstance
+        data=data
+        messages=messages
+        selectedItems=selectedItems
+        expandedItems=expandedItems
+        sendAction=sendAction
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+        toggleAllSelection=toggleAllSelection
+      )
+      grouped-header=(
+        component "models-table/grouped-header"
+        themeInstance=themeInstance
+      )
+      groupedHeaders=groupedHeaders
+      useFilteringByColumns=useFilteringByColumns
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  {{#if groupedHeaders.length}}
+    {{#each groupedHeaders as |groupedHeader|}}
+      {{models-table/grouped-header
+        groupedHeader=groupedHeader
+        themeInstance=themeInstance
+      }}
+    {{/each}}
+  {{/if}}
+  {{models-table/row-sorting
+    processedColumns=processedColumns
+    themeInstance=themeInstance
+    data=data
+    messages=messages
+    selectedItems=selectedItems
+    expandedItems=expandedItems
+    sort=sort
+    sendAction=sendAction
+    expandAllRows=expandAllRows
+    collapseAllRows=collapseAllRows
+    toggleAllSelection=toggleAllSelection
+  }}
+  {{#if useFilteringByColumns}}
+    {{models-table/row-filtering
+      processedColumns=processedColumns
+      themeInstance=themeInstance
+      messages=messages
+      data=data
+      selectedItems=selectedItems
+      expandedItems=expandedItems
+      sendAction=sendAction
+      expandAllRows=expandAllRows
+      collapseAllRows=collapseAllRows
+      toggleAllSelection=toggleAllSelection
+    }}
+  {{/if}}
+{{/if}}
\ No newline at end of file
Index: vendor/ember-models-table/register-version.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Ember.libraries.register('Ember Models Table', '1.13.0');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/ember-models-table/register-version.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ vendor/ember-models-table/register-version.js	(revision )
@@ -1,1 +1,1 @@
-Ember.libraries.register('Ember Models Table', '1.13.0');
\ No newline at end of file
+Ember.libraries.register('Ember Models Table', '2.0.0-beta.2');
\ No newline at end of file
Index: addon/components/models-table/summary.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/summary.js	(revision )
+++ addon/components/models-table/summary.js	(revision )
@@ -0,0 +1,131 @@
+import Component from '@ember/component';
+import { get, getProperties, computed } from '@ember/object';
+import layout from '../../templates/components/models-table/summary';
+import fmt from "../../utils/fmt";
+
+/**
+ * Summary block used within [models-table/footer](Components.ModelsTableFooter.html).
+ *
+ * Value from [ModelsTable.messages.summary](Components.ModelsTable.html#property_messages) is used as a template for shown message. It's filled with `firstIndex`, `lastIndex` and `recordsCount`.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.footer as |footer|}}
+ *     {{footer.summary}}
+ *     {{! ... }}
+ *   {{/mt.footer}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTableSummary
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  classNameBindings: ['themeInstance.footerSummary', 'paginationTypeClass'],
+
+  paginationTypeClass: computed('useNumericPagination', 'themeInstance.{footerSummaryNumericPagination,footerSummaryDefaultPagination}', function () {
+    return get(this, 'useNumericPagination') ? get(this, 'themeInstance.footerSummaryNumericPagination') :
+    get(this, 'themeInstance.footerSummaryDefaultPagination');
+  }),
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/firstIndex:property"}}ModelsTable.firstIndex{{/crossLink}}
+   *
+   * @property firstIndex
+   * @type number
+   * @default null
+   */
+  firstIndex: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/lastIndex:property"}}ModelsTable.lastIndex{{/crossLink}}
+   *
+   * @property lastIndex
+   * @type number
+   * @default null
+   */
+  lastIndex: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/arrangedContentLength:property"}}ModelsTable.arrangedContentLength{{/crossLink}}
+   *
+   * @property recordsCount
+   * @type number
+   * @default null
+   */
+  recordsCount: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/anyFilterUsed:property"}}ModelsTable.anyFilterUsed{{/crossLink}}
+   *
+   * @property anyFilterUsed
+   * @type boolean
+   * @default null
+   */
+  anyFilterUsed: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clearFilters:method"}}ModelsTable.actions.clearFilters{{/crossLink}}
+   *
+   * @event clearFilters
+   */
+  clearFilters: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/useNumericPagination:property"}}ModelsTable.useNumericPagination{{/crossLink}}
+   *
+   * @property useNumericPagination
+   * @type boolean
+   * @default null
+   */
+  useNumericPagination: null,
+
+  /**
+   * @property summary
+   * @type string
+   */
+  summary: computed('firstIndex', 'lastIndex', 'recordsCount', 'msg', function () {
+    const {
+      recordsCount,
+      firstIndex,
+      lastIndex
+    } = getProperties(this, 'recordsCount', 'firstIndex', 'lastIndex');
+    return fmt(get(this, 'messages.tableSummary'), firstIndex, lastIndex, recordsCount);
+  }),
+
+  actions: {
+    clearFilters() {
+      get(this, 'clearFilters')();
+    }
+  }
+});
Index: tests/dummy/app/templates/examples/filtering-select-box.hbs
===================================================================
--- tests/dummy/app/templates/examples/filtering-select-box.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/filtering-select-box.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,17 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;models-table
-          data=model
-          columns=columns&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/acceptance/models-table-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { test } from 'qunit';\nimport moduleForAcceptance from '../../tests/helpers/module-for-acceptance';\n\nlet firstUser;\nmoduleForAcceptance('Acceptance | models table', {\n  beforeEach() {\n    firstUser = server.createList('user', 10)[0];\n  }\n});\n\ntest('route cells', function(assert) {\n  visit('/examples/route-cells');\n\n  andThen(function() {\n    let $firstCellLink = $('tbody tr:eq(0) td:eq(0) a');\n    let $secondCellLink = $('tbody tr:eq(0) td:eq(1) a');\n    assert.equal($firstCellLink.attr('href'), '/users/1', 'ID. URL is valid');\n    assert.equal($firstCellLink.text().trim(), '1', 'ID. Link text is valid');\n\n    assert.equal($secondCellLink.attr('href'), '/users/1', 'firstName. URL is valid');\n    assert.equal($secondCellLink.text().trim(), firstUser['first-name'], 'firstName. Link text is valid');\n  });\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/acceptance/models-table-test.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/acceptance/models-table-test.js	(revision )
@@ -5,6 +5,9 @@
 moduleForAcceptance('Acceptance | models table', {
   beforeEach() {
     firstUser = server.createList('user', 10)[0];
+  },
+  afterEach() {
+    server.shutdown();
   }
 });
 
Index: tests/dummy/app/controllers/examples/custom-messages.js
===================================================================
--- tests/dummy/app/controllers/examples/custom-messages.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/custom-messages.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,39 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Custom Messages',
-  model: generateContent(10),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ]),
-  customMessages: {
-    searchLabel: 'Se@rch',
-    'columns-title': 'ColumnZ',
-    'columns-showAll': 'Show Me All!',
-    'columns-hideAll': 'Hide All!',
-    'columns-restoreDefaults': 'Restore My Columns',
-    tableSummary: 'Now are showing %@ - %@ of %@',
-    allColumnsAreHidden: 'No visible columns, dude!',
-    noDataToShow: 'No data. Sorry, bro...'
-  }
-
-});
\ No newline at end of file
Index: tests/dummy/app/controllers/perf.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\n\nvar names = (\"Ingeborg Jim Rigoberto Ian Wei Otilia Wendell Chasity \" +\n\"Billi Chester Omer Paulene Hiram Laurice Deneen Chuck Petrina Lamonica \" +\n\"Roy Ai Marsha Kiana Tamar Fabiola Travis Mazie Dawna Fe Tommye Jene\").split(' ');\n\nvar surnames = (\"Brown Smith Patel Jones Williams Johnson Taylor Thomas \" +\n\"Roberts Khan Lewis Jackson Clarke James Phillips Wilson Ali Mason \" +\n\"Mitchell Rose Davis Davies Rodríguez Cox Alexander \" +\n\"Stewart Quinn Robinson Murphy Graham\").split(' ');\n\nvar cities = [\"Shanghai\", \"Karachi\", \"Beijing\", \"Tianjin\", \"Istanbul\", \"Lagos\",\n  \"Guangzhou\", \"Mumbai\", \"Moscow\", \"Dhaka\", \"Cairo\", \"São Paulo\",\n  \"Lahore\", \"Shenzhen\", \"Seoul\", \"Jakarta\", \"Kinshasa\", \"Tokyo\", \"Mexico City\",\n  \"Lima\", \"New York City\", \"Bengaluru\", \"London\", \"Bangkok\", \"Dongguan\",\n  \"Nanjing\", \"Tehran\", \"Shenyang\", \"Ahmedabad\", \"Bogotá\"];\n\nvar generateContent = function (recordsCount) {\n  var ret = Ember.A([]);\n  for (let i = 0; i < recordsCount; i++) {\n    ret.push(Ember.Object.create({\n      id: i + 1,\n      firstName: names[Math.floor(Math.random() * names.length)],\n      firstName2: names[Math.floor(Math.random() * names.length)],\n      firstName3: names[Math.floor(Math.random() * names.length)],\n      firstName4: names[Math.floor(Math.random() * names.length)],\n      lastName: surnames[Math.floor(Math.random() * surnames.length)],\n      lastName2: surnames[Math.floor(Math.random() * surnames.length)],\n      lastName3: surnames[Math.floor(Math.random() * surnames.length)],\n      lastName4: surnames[Math.floor(Math.random() * surnames.length)],\n      age: Math.floor(Math.random() * (50 - 18)) + 18,\n      city: cities[Math.floor(Math.random() * cities.length)]\n    }));\n  }\n  return ret;\n};\n\nexport default Ember.Controller.extend({\n\n  example1: {\n    title: 'Big table',\n    content: generateContent(10000),\n    columns: Ember.A([\n      Ember.Object.create({\n        propertyName: 'id',\n        title: 'ID'\n      }),\n      Ember.Object.create({\n        propertyName: 'firstName',\n        title: 'First Name'\n      }),\n      Ember.Object.create({\n        propertyName: 'firstName2',\n        title: 'First Name 2'\n      }),\n      Ember.Object.create({\n        propertyName: 'firstName3',\n        title: 'First Name 3'\n      }),\n      Ember.Object.create({\n        propertyName: 'firstName4',\n        title: 'First Name 4'\n      }),\n      Ember.Object.create({\n        propertyName: 'lastName',\n        title: 'Last Name'\n      }),\n      Ember.Object.create({\n        propertyName: 'lastName2',\n        title: 'Last Name 2'\n      }),\n      Ember.Object.create({\n        propertyName: 'lastName3',\n        title: 'Last Name 3'\n      }),\n      Ember.Object.create({\n        propertyName: 'lastName4',\n        title: 'Last Name 4'\n      }),\n      Ember.Object.create({\n        propertyName: 'city',\n        title: 'City'\n      })\n    ])\n  }\n\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/controllers/perf.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/perf.js	(revision )
@@ -1,4 +1,6 @@
-import Ember from 'ember';
+import Controller from '@ember/controller';
+import EmberObject from '@ember/object';
+import { A } from '@ember/array';
 
 var names = ("Ingeborg Jim Rigoberto Ian Wei Otilia Wendell Chasity " +
 "Billi Chester Omer Paulene Hiram Laurice Deneen Chuck Petrina Lamonica " +
@@ -16,9 +18,9 @@
   "Nanjing", "Tehran", "Shenyang", "Ahmedabad", "Bogotá"];
 
 var generateContent = function (recordsCount) {
-  var ret = Ember.A([]);
+  var ret = A([]);
   for (let i = 0; i < recordsCount; i++) {
-    ret.push(Ember.Object.create({
+    ret.push(EmberObject.create({
       id: i + 1,
       firstName: names[Math.floor(Math.random() * names.length)],
       firstName2: names[Math.floor(Math.random() * names.length)],
@@ -35,49 +37,49 @@
   return ret;
 };
 
-export default Ember.Controller.extend({
+export default Controller.extend({
 
   example1: {
     title: 'Big table',
     content: generateContent(10000),
-    columns: Ember.A([
-      Ember.Object.create({
+    columns: A([
+      EmberObject.create({
         propertyName: 'id',
         title: 'ID'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'firstName',
         title: 'First Name'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'firstName2',
         title: 'First Name 2'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'firstName3',
         title: 'First Name 3'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'firstName4',
         title: 'First Name 4'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'lastName',
         title: 'Last Name'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'lastName2',
         title: 'Last Name 2'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'lastName3',
         title: 'Last Name 3'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'lastName4',
         title: 'Last Name 4'
       }),
-      Ember.Object.create({
+      EmberObject.create({
         propertyName: 'city',
         title: 'City'
       })
Index: addon/templates/components/models-table/columns-dropdown.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/columns-dropdown.hbs	(revision )
+++ addon/templates/components/models-table/columns-dropdown.hbs	(revision )
@@ -0,0 +1,59 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      themeInstance=themeInstance
+      columnDropdownOptions=columnDropdownOptions
+      processedColumns=processedColumns
+      showAllColumns=(action "showAllColumns")
+      hideAllColumns=(action "hideAllColumns")
+      restoreDefaultVisibility=(action "restoreDefaultVisibility")
+      toggleColumnSet=(action "toggleColumnSet")
+      toggleHidden=(action "toggleHidden")
+    )
+  }}
+{{else}}
+  <div class="{{themeInstance.columnsDropdownWrapper}}">
+    <div class="{{themeInstance.buttonsGroup}}">
+      <button class="{{themeInstance.buttonDefault}} dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true"
+              aria-expanded="false">
+        {{messages.columns-title}} <span class="{{themeInstance.caret}}"></span>
+      </button>
+      <ul class="{{themeInstance.columnsDropdown}}" data-role="dropdown">
+
+        {{#if columnDropdownOptions.showAll}}
+          <li>
+            <a {{action "showAllColumns" bubbles=false}} href="#">{{messages.columns-showAll}}</a>
+          </li>
+        {{/if}}
+        {{#if columnDropdownOptions.hideAll}}
+          <li>
+            <a {{action "hideAllColumns" bubbles=false}} href="#">{{messages.columns-hideAll}}</a>
+          </li>
+        {{/if}}
+        {{#if columnDropdownOptions.restoreDefaults}}
+          <li>
+            <a {{action "restoreDefaultVisibility" bubbles=false}} href="#">{{messages.columns-restoreDefaults}}</a>
+          </li>
+        {{/if}}
+
+        {{#each columnDropdownOptions.columnSets as |columnSet|}}
+          <li>
+            <a {{action "toggleColumnSet" columnSet bubbles=false}} href="#">{{columnSet.label}}</a>
+          </li>
+        {{/each}}
+
+        <li class={{themeInstance.columnsDropdownDivider}}></li>
+
+        {{#each processedColumns as |column|}}
+          {{#if column.mayBeHidden}}
+            <li>
+              <a {{action "toggleHidden" column bubbles=false}} href="#">
+                <span class="{{if column.isVisible themeInstance.column-visible themeInstance.column-hidden}}"></span> {{column.title}}
+              </a>
+            </li>
+          {{/if}}
+        {{/each}}
+      </ul>
+    </div>
+  </div>
+{{/if}}
Index: tests/dummy/app/components/my-server-table.js
===================================================================
--- tests/dummy/app/components/my-server-table.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/components/my-server-table.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,13 +0,0 @@
-import ServerModelsTable from 'ember-models-table/components/models-table-server-paginated';
-
-export default ServerModelsTable.extend({
-
-  filterQueryParameters: {
-    globalFilter: 'globalSearch',
-    sort: 'sort',
-    sortDirection: 'sortDirection',
-    page: 'page',
-    pageSize: 'pageSize'
-  }
-
-});
Index: tests/dummy/app/components/my-table-with-custom-header.js
===================================================================
--- tests/dummy/app/components/my-table-with-custom-header.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/components/my-table-with-custom-header.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,22 +0,0 @@
-import Ember from 'ember';
-import ModelsTable from 'ember-models-table/components/models-table';
-
-const {get, set, A} = Ember;
-
-export default ModelsTable.extend({
-
-  actions: {
-    toggleAllSelection() {
-      let selectedItems = get(this, '_selectedItems');
-      let data = get(this, 'data');
-      if(selectedItems.length === data.length) {
-        get(this, '_selectedItems').clear();
-      }
-      else {
-        set(this, '_selectedItems', A(data.slice()));
-      }
-      this.userInteractionObserver();
-    }
-  }
-
-});
Index: app/components/models-table/table-footer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/table-footer.js	(revision )
+++ app/components/models-table/table-footer.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/table-footer';
Index: tests/dummy/app/routes/examples/custom-actions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/custom-actions.js	(revision )
+++ tests/dummy/app/routes/examples/custom-actions.js	(revision )
@@ -0,0 +1,16 @@
+import ExampleRoute from './example';
+import {set, get} from '@ember/object';
+import {A} from '@ember/array';
+
+export default ExampleRoute.extend({
+
+  setupController(controller) {
+    this._super(...arguments);
+    set(controller, 'data', A(get(this, 'store').peekAll('user')));
+    get(controller, 'columns').pushObject({
+      title: 'Delete',
+      component: 'delete-row'
+    });
+  }
+
+});
Index: tests/dummy/app/templates/custom/filter-cell-select.hbs
===================================================================
--- tests/dummy/app/templates/custom/filter-cell-select.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/filter-cell-select.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,6 +0,0 @@
-<div class="{{if column.filterUsed "has-feedback"}}">
-  {{models-select options=column.filterOptions cssPropertyName=column.cssPropertyName value=column.filterString class=(concat classes.input " changeFilterForColumn")}}
-  {{#if column.filterUsed}}
-    <span onclick={{action (mut column.filterString) ""}} class="clearFilterIcon {{classes.clearFilterIcon}} "></span>
-  {{/if}}
-</div>
\ No newline at end of file
Index: app/components/models-table/row-expand.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/row-expand.js	(revision )
+++ app/components/models-table/row-expand.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/row-expand';
Index: addon/components/models-table/row-expand.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/row-expand.js	(revision )
+++ addon/components/models-table/row-expand.js	(revision )
@@ -0,0 +1,128 @@
+import Component from '@ember/component';
+import { computed, get } from '@ember/object';
+import layout from '../../templates/components/models-table/row-expand';
+
+/**
+ * Extra row with additional information for original row. Component used within [models-table/table-body](Components.ModelsTableTableBody.html).
+ *
+ * Row expand is a table-row with a single cell. This cell has a `colspan` equal to the shown columns count. You should provide an [ModelsTable.expandedRowComponent](Components.ModelsTable.html#property_expandedRowComponent). It will be rendered inside ModelsTableRowExpand.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#each body.visibleContent as |record index|}}
+ *         {{body.row record=record index=index}}
+ *         {{#if (exists-in body.expandedItems record)}}
+ *           {{body.row-expand record=record index=index}}
+ *         {{/if}}
+ *       {{/each}}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTableRowExpand
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tr',
+  classNames: ['expand-row'],
+  classNameBindings: ['indexedClass', 'isSelected:selected-expand'],
+
+  /**
+   * @property indexedClass
+   * @type string
+   * @default ''
+   */
+  indexedClass: computed('index', function () {
+    return `expand-${get(this, 'index')}`;
+  }),
+
+  /**
+   * @property isSelected
+   * @type boolean
+   * @default false
+   */
+  isSelected: computed('selectedItems.[]', 'record', function () {
+    return get(this, 'selectedItems').indexOf(get(this, 'record')) !== -1;
+  }),
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/expandedRowComponent:property"}}ModelsTable.expandedRowComponent{{/crossLink}}
+   *
+   * @property expandedRowComponent
+   * @type string
+   * @default null
+   */
+  expandedRowComponent: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  processedColumns: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.selectedItems{{/crossLink}}
+   *
+   * @property selectedItems
+   * @type object[]
+   * @default null
+   */
+  selectedItems: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/visibleProcessedColumns:property"}}ModelsTable.visibleProcessedColumns{{/crossLink}}
+   *
+   * @property visibleProcessedColumns
+   * @type ModelsTableColumn[]
+   * @default null
+   */
+  visibleProcessedColumns: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.clickOnRow:method"}}ModelsTable.actions.clickOnRow{{/crossLink}}
+   *
+   * @event clickOnRow
+   */
+  clickOnRow: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  click() {
+    get(this, 'clickOnRow')(get(this, 'index'), get(this, 'record'));
+  }
+});
Index: tests/dummy/app/controllers/examples/custom-pagination.js
===================================================================
--- tests/dummy/app/controllers/examples/custom-pagination.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/custom-pagination.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,29 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Custom pagination',
-  model: generateContent(30),
-  columns: A([
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    {
-      propertyName: 'firstName',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name'
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
-});
\ No newline at end of file
Index: addon/templates/components/models-table/pagination-numeric.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/pagination-numeric.hbs	(revision )
+++ addon/templates/components/models-table/pagination-numeric.hbs	(revision )
@@ -0,0 +1,23 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      gotoCustomPage=(action "gotoCustomPage")
+      sendAction=sendAction
+      visiblePageNumbers=visiblePageNumbers
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  <div class={{themeInstance.paginationInternalWrapper}} role="toolbar">
+    <div class="{{themeInstance.paginationBlock}}" role="group">
+      {{#each visiblePageNumbers as |page|}}
+        {{#if page.isLink}}
+          <button type="button" class="{{themeInstance.paginationNumericItem}} {{if page.isActive themeInstance.paginationNumericItemActive}} {{themeInstance.buttonDefault}}" {{action
+            "gotoCustomPage" page.label}}>{{page.label}}</button>
+        {{else}}
+          <button disabled="disabled" type="button" class="{{themeInstance.buttonDefault}} {{themeInstance.paginationNumericItem}}" {{action "gotoCustomPage" page.label}}>{{page.label}}</button>
+        {{/if}}
+      {{/each}}
+    </div>
+  </div>
+{{/if}}
\ No newline at end of file
Index: app/components/models-table/row-filtering.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/row-filtering.js	(revision )
+++ app/components/models-table/row-filtering.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/row-filtering';
Index: tests/helpers/test.js
===================================================================
--- tests/helpers/test.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/helpers/test.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,0 +0,0 @@
Index: yuidoc.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- yuidoc.json	(revision )
+++ yuidoc.json	(revision )
@@ -0,0 +1,17 @@
+{
+  "name": "ember-models-table",
+  "description": "Table with pagination, sorting and filtering",
+  "version": "2.0.0",
+  "options": {
+    "enabledEnvironments": ["development", "production"],
+    "paths": [
+      "addon"
+    ],
+    "exclude": "vendor",
+    "outdir": "docs",
+    "linkNatives": true,
+    "quiet": true,
+    "parseOnly": false,
+    "lint": false
+  }
+}
\ No newline at end of file
Index: tests/dummy/app/templates/components/delete-row.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/delete-row.hbs	(revision )
+++ tests/dummy/app/templates/components/delete-row.hbs	(revision )
@@ -0,0 +1,3 @@
+<button class="btn btn-default" onclick={{action 'sendAction' 'delete' record}}>
+  Delete
+</button>
Index: addon/templates/components/models-table/table.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/table.hbs	(revision )
+++ addon/templates/components/models-table/table.hbs	(revision )
@@ -0,0 +1,117 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      header=(
+        component "models-table/table-header"
+        noHeaderFilteringAndSorting=noHeaderFilteringAndSorting
+        groupedHeaders=groupedHeaders
+        processedColumns=processedColumns
+        useFilteringByColumns=useFilteringByColumns
+        themeInstance=themeInstance
+        messages=messages
+        data=data
+        sort=sort
+        selectedItems=selectedItems
+        expandedItems=expandedItems
+        sendAction=sendAction
+        expandRow=expandRow
+        collapseRow=collapseRow
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+        toggleAllSelection=toggleAllSelection
+      )
+      body=(
+        component "models-table/table-body"
+        columnsCount=columnsCount
+        visibleContent=visibleContent
+        selectedItems=selectedItems
+        expandedItems=expandedItems
+        expandedRowComponent=expandedRowComponent
+        visibleProcessedColumns=visibleProcessedColumns
+        allColumnsAreHidden=allColumnsAreHidden
+        themeInstance=themeInstance
+        data=data
+        messages=messages
+        clickOnRow=clickOnRow
+        sendAction=sendAction
+        expandRow=expandRow
+        collapseRow=collapseRow
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+      )
+      footer=(
+        component "models-table/table-footer"
+        data=data
+        processedColumns=processedColumns
+        themeInstance=themeInstance
+        goToPage=goToPage
+        messages=messages
+        selectedItems=selectedItems
+        expandedItems=expandedItems
+        clearFilters=clearFilters
+        sendAction=sendAction
+        expandRow=expandRow
+        collapseRow=collapseRow
+        expandAllRows=expandAllRows
+        collapseAllRows=collapseAllRows
+      )
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  {{models-table/table-header
+    noHeaderFilteringAndSorting=noHeaderFilteringAndSorting
+    groupedHeaders=groupedHeaders
+    processedColumns=processedColumns
+    useFilteringByColumns=useFilteringByColumns
+    themeInstance=themeInstance
+    data=data
+    messages=messages
+    selectedItems=selectedItems
+    expandedItems=expandedItems
+    sort=sort
+    sendAction=sendAction
+    expandRow=expandRow
+    collapseRow=collapseRow
+    expandAllRows=expandAllRows
+    collapseAllRows=collapseAllRows
+    toggleAllSelection=toggleAllSelection
+  }}
+  {{! table header end }}
+  {{! table body start }}
+  {{models-table/table-body
+    columnsCount=columnsCount
+    visibleContent=visibleContent
+    selectedItems=selectedItems
+    expandedItems=expandedItems
+    visibleProcessedColumns=visibleProcessedColumns
+    allColumnsAreHidden=allColumnsAreHidden
+    themeInstance=themeInstance
+    data=data
+    messages=messages
+    expandedRowComponent=expandedRowComponent
+    clickOnRow=clickOnRow
+    sendAction=sendAction
+    expandRow=expandRow
+    collapseRow=collapseRow
+    expandAllRows=expandAllRows
+    collapseAllRows=collapseAllRows
+  }}
+  {{! table body end }}
+  {{! table footer start }}
+  {{models-table/table-footer
+    data=data
+    processedColumns=processedColumns
+    themeInstance=themeInstance
+    messages=messages
+    selectedItems=selectedItems
+    expandedItems=expandedItems
+    clearFilters=clearFilters
+    goToPage=goToPage
+    sendAction=sendAction
+    expandRow=expandRow
+    collapseRow=collapseRow
+    expandAllRows=expandAllRows
+    collapseAllRows=collapseAllRows
+  }}
+{{/if}}
\ No newline at end of file
Index: tests/dummy/app/templates/examples/display-data-changed-action.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"row\">\n  <div class=\"col-md-12\">\n    <h4>{{title}}</h4>\n  </div>\n  <div class=\"col-md-8\">\n    {{models-table data=model columns=columns displayDataChangedAction=\"myAction\" sendDisplayDataChangedAction=true}}\n  </div>\n  <div class=\"col-md-4\">\n    <p>Component usage:</p>\n    <pre><code class=\"handlebars\">&lbrace;&lbrace;models-table\n  data=model\n  columns=columns&rbrace;&rbrace;</code></pre>\n\n    <p><code>columns</code>:</p>\n    <pre><code class=\"javascript\">{{to-string this 'columns'}}</code></pre>\n    <p><code>actionData</code>:</p>\n    <pre><code class=\"javascript\">{{#if trigger}}{{to-string this 'actionData'}}{{else}}{{to-string this 'actionData'}}{{/if}}</code></pre>\n  </div>\n</div>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/examples/display-data-changed-action.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/display-data-changed-action.hbs	(revision )
@@ -1,19 +1,37 @@
+<h4>Handle user interaction with a component
+  <small>simple table</small>
+</h4>
+{{models-table data=data columns=columns displayDataChangedAction="myAction" sendDisplayDataChangedAction=true}}
 <div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
+  <div class="col-md-6">
+    <p>Component usage:</p>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table
+data=data
+columns=columns
+displayDataChangedAction="myAction"
+sendDisplayDataChangedAction=true&rbrace;&rbrace;</code></pre>
   </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns displayDataChangedAction="myAction" sendDisplayDataChangedAction=true}}
+  <div class="col-md-6">
+    <p><code>actionData</code>:</p>
+    <pre><code class="language-javascript">{{#if trigger}}{{to-string this 'actionData'}}{{else}}{{to-string this 'actionData'}}{{/if}}</code></pre>
   </div>
-  <div class="col-md-4">
+</div>
+
+<h4>Handle user interaction with a component
+  <small>server paginated table</small>
+</h4>
+{{models-table-server-paginated data=model columns=columns displayDataChangedAction="myAction" sendDisplayDataChangedAction=true}}
+<div class="row">
+  <div class="col-md-6">
     <p>Component usage:</p>
-    <pre><code class="handlebars">&lbrace;&lbrace;models-table
-  data=model
-  columns=columns&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-    <p><code>actionData</code>:</p>
-    <pre><code class="javascript">{{#if trigger}}{{to-string this 'actionData'}}{{else}}{{to-string this 'actionData'}}{{/if}}</code></pre>
+    <pre><code class="language-handlebars">&lbrace;&lbrace;models-table-server-paginated
+data=model
+columns=columns
+displayDataChangedAction="myAction"
+sendDisplayDataChangedAction=true&rbrace;&rbrace;</code></pre>
   </div>
-</div>
+  <div class="col-md-6">
+    <p><code>actionData</code>:</p>
+    <pre><code class="language-javascript">{{#if trigger}}{{to-string this 'actionData'}}{{else}}{{to-string this 'actionData'}}{{/if}}</code></pre>
+  </div>
+</div>
\ No newline at end of file
Index: addon/templates/components/models-table/no-data.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/no-data.hbs	(revision )
+++ addon/templates/components/models-table/no-data.hbs	(revision )
@@ -0,0 +1,7 @@
+<td colspan="{{columnsCount}}">
+  {{#if hasBlock}}
+    {{yield}}
+  {{else}}
+    {{html-safe messages.noDataToShow}}
+  {{/if}}
+</td>
\ No newline at end of file
Index: tests/dummy/app/templates/examples/filtering-ignore-case.hbs
===================================================================
--- tests/dummy/app/templates/examples/filtering-ignore-case.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/filtering-ignore-case.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,18 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>{{title}}</h4>
-  </div>
-  <div class="col-md-8">
-    {{models-table data=model columns=columns filteringIgnoreCase=true}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-        <pre><code class="handlebars">&lbrace;&lbrace;models-table
-          data=model
-          columns=columns
-          filteringIgnoreCase=true&rbrace;&rbrace;</code></pre>
-
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/expandable-rows.js
===================================================================
--- tests/dummy/app/controllers/examples/expandable-rows.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/expandable-rows.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,26 +0,0 @@
-import Ember from 'ember';
-import generateContent from '../../utils/c';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: 'Expandable Rows',
-  model: generateContent(20),
-  expandedRowTemplate: 'custom/expanded-row',
-  columns: A([
-    {
-      template: 'components/models-table/expand-row-cell',
-      templateForFilterCell: 'components/models-table/expand-all-rows-cell',
-      mayBeHidden: false
-    },
-    {
-      propertyName: 'id',
-      title: 'ID'
-    },
-    { propertyName: 'firstName' },
-    { propertyName: 'lastName' },
-    { propertyName: 'city' }
-  ])
-
-});
\ No newline at end of file
Index: app/components/models-select.js
===================================================================
--- app/components/models-select.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/components/models-select.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-export { default } from 'ember-models-table/components/models-select';
\ No newline at end of file
Index: tests/dummy/app/routes/examples/display-data-changed-action.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/display-data-changed-action.js	(revision )
+++ tests/dummy/app/routes/examples/display-data-changed-action.js	(revision )
@@ -0,0 +1,3 @@
+import ExampleRoute from './example';
+
+export default ExampleRoute.extend({});
Index: tests/dummy/app/routes/examples/custom-column-classes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/routes/examples/custom-column-classes.js	(revision )
+++ tests/dummy/app/routes/examples/custom-column-classes.js	(revision )
@@ -0,0 +1,17 @@
+import ExampleRoute from './example';
+import {set} from '@ember/object'
+
+export default ExampleRoute.extend({
+
+  setupController(controller) {
+    this._super(...arguments);
+    set(controller, 'columns', [
+      {propertyName: 'index', className: 'text-right'},
+      {propertyName: 'firstName', className: 'text-success'},
+      {propertyName: 'lastName', className: 'text-uppercase'},
+      {propertyName: 'age', className: 'text-center'},
+      {propertyName: 'city', className: 'text-uppercase'}
+    ]);
+  }
+
+});
Index: addon/themes/bootstrap3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/themes/bootstrap3.js	(revision )
+++ addon/themes/bootstrap3.js	(revision )
@@ -0,0 +1,368 @@
+import DefaultTheme from './default';
+
+/**
+ * @class Bootstrap
+ * @namespace Themes
+ * @extends Themes.Default
+ */
+export default DefaultTheme.extend({
+
+  /**
+   * List of classes added to the table-tag
+   * @type string
+   * @property table
+   * @default 'table table-striped table-bordered table-condensed'
+   */
+  table: 'table table-striped table-bordered table-condensed',
+
+  /**
+   * Wrapper for grouped buttons
+   *
+   * @type string
+   * @property buttonsGroup
+   * @default 'btn-group'
+   */
+  buttonsGroup: 'btn-group',
+
+  /**
+   * Wrapper for global filter
+   *
+   * @property globalFilterWrapper
+   * @type string
+   * @default 'pull-left'
+   */
+  globalFilterWrapper: 'pull-left',
+
+  /**
+   * Wrapper for dropdown with list of columns
+   *
+   * @property columnsDropdownWrapper
+   * @type string
+   * @default 'pull-right columns-dropdown'
+   */
+  columnsDropdownWrapper: 'pull-right columns-dropdown',
+
+  /**
+   * Dropdown with list of columns itself
+   *
+   * @property columnsDropdown
+   * @type string
+   * @default 'dropdown-menu pull-right'
+   */
+  columnsDropdown: 'dropdown-menu pull-right',
+
+  /**
+   * Class for dropdown item used as a divider between "group" actions and "single" column actions
+   *
+   * @property columnsDropdownDivider
+   * @type string
+   * @default 'divider'
+   */
+  columnsDropdownDivider: 'divider',
+
+  /**
+   * Wrapper for numeric pagination
+   *
+   * @type string
+   * @property footerSummaryNumericPagination
+   * @default 'col-md-4 col-sm-4 col-xs-4'
+   */
+  footerSummaryNumericPagination: 'col-md-4 col-sm-4 col-xs-4',
+
+  /**
+   * Wrapper for simple pagination
+   *
+   * @type string
+   * @property footerSummaryDefaultPagination
+   * @default 'col-md-5 col-sm-5 col-xs-5'
+   */
+  footerSummaryDefaultPagination: 'col-md-5 col-sm-5 col-xs-5',
+
+  /**
+   * Wrapper for page selection block
+   *
+   * @type string
+   * @property pageSizeWrapper
+   * @default 'col-md-2 col-sm-2 col-xs-2'
+   */
+  pageSizeWrapper: 'col-md-2 col-sm-2 col-xs-2',
+
+  /**
+   * Wrapper for select-tag in the page-size-select component
+   *
+   * @type string
+   * @property pageSizeSelectWrapper
+   * @default 'col-md-2 col-sm-2 col-xs-2'
+   */
+  pageSizeSelectWrapper: 'pull-right',
+
+  /**
+   * Wrapper for pagination buttons. Used for numeric and simple pagination components
+   *
+   * @type string
+   * @property paginationInternalWrapper
+   * @default 'btn-toolbar pull-right'
+   */
+  paginationInternalWrapper: 'btn-toolbar pull-right',
+
+  /**
+   * Wrapper for numeric pagination component
+   *
+   * @type string
+   * @property paginationWrapperNumeric
+   * @default 'col-md-6 col-sm-6 col-xs-6'
+   */
+  paginationWrapperNumeric: 'col-md-6 col-sm-6 col-xs-6',
+
+  /**
+   * Wrapper for simple pagination component
+   *
+   * @type string
+   * @property paginationWrapperDefault
+   * @default 'col-md-5 col-sm-5 col-xs-5'
+   */
+  paginationWrapperDefault: 'col-md-5 col-sm-5 col-xs-5',
+
+  /**
+   * @type string
+   * @property paginationBlock
+   * @default 'btn-group'
+   */
+  paginationBlock: 'btn-group',
+
+  /**
+   * CSS-class for active item in the numeric pagination
+   *
+   * @type string
+   * @property paginationNumericItemActive
+   * @default 'active'
+   */
+  paginationNumericItemActive: 'active',
+
+  /**
+   * Css-class for any button
+   *
+   * @type string
+   * @property buttonDefault
+   * @default 'btn btn-default'
+   */
+  buttonDefault: 'btn btn-default',
+
+  /**
+   * CSS-class for link-like buttons
+   *
+   * @type string
+   * @property buttonLink
+   * @default 'btn btn-link'
+   */
+  buttonLink: 'btn btn-link',
+
+  /**
+   * CSS-class for all form-input items
+   *
+   * @type string
+   * @property input
+   * @default 'form-control'
+   */
+  input: 'form-control',
+
+  /**
+   * Extra CSS-class for select elements
+   *
+   * @type string
+   * @property select
+   * @default ''
+   */
+  select: '',
+
+  /**
+   * Wrapper for component footer (contains pagination, summary and pager)
+   *
+   * @type string
+   * @property tfooterWrapper
+   * @default 'table-footer clearfix'
+   */
+  tfooterWrapper: 'table-footer clearfix',
+
+  /**
+   * Internal wrapper for table footer content
+   *
+   * Internal wrapper contains pagination, summary and pager. It's needed to provide a grid
+   *
+   * @type string
+   * @property tfooterInternalWrapper
+   * @default 'row'
+   */
+  tfooterInternalWrapper: 'row',
+
+  /**
+   * Icon for clear column filters
+   *
+   * @type string
+   * @property clearFilterIcon
+   * @default 'glyphicon glyphicon-remove-sign form-control-feedback'
+   */
+  clearFilterIcon: 'glyphicon glyphicon-remove-sign form-control-feedback',
+
+  /**
+   * Icon for clear all filters button
+   *
+   * @type string
+   * @property clearAllFiltersIcon
+   * @default 'glyphicon glyphicon-remove-circle'
+   */
+  clearAllFiltersIcon: 'glyphicon glyphicon-remove-circle',
+
+  /**
+   * Icon for columns sorted asc
+   *
+   * @type string
+   * @property sort-asc
+   * @default 'glyphicon glyphicon-triangle-top'
+   */
+  'sort-asc': 'glyphicon glyphicon-triangle-top',
+
+  /**
+   * Icon for columns sorted desc
+   *
+   * @type string
+   * @property sort-desc
+   * @default 'glyphicon glyphicon-triangle-bottom'
+   */
+  'sort-desc': 'glyphicon glyphicon-triangle-bottom',
+
+  /**
+   * Icon for columns dropdown. It's used for currently visible columns
+   *
+   * @type string
+   * @property column-visible
+   * @default 'glyphicon glyphicon-check'
+   */
+  'column-visible': 'glyphicon glyphicon-check',
+
+  /**
+   * Icon for columns dropdown. It's used for currently hidden columns
+   *
+   * @type string
+   * @property column-hidden
+   * @default 'glyphicon glyphicon-unchecked'
+   */
+  'column-hidden': 'glyphicon glyphicon-unchecked',
+
+  /**
+   * Icon for simple pagination item "Go to first page"
+   *
+   * @type string
+   * @property nav-first
+   * @default 'glyphicon glyphicon-chevron-left'
+   */
+  'nav-first': 'glyphicon glyphicon-chevron-left',
+
+  /**
+   * Icon for simple pagination item "Go to prev page"
+   *
+   * @type string
+   * @property nav-prev
+   * @default 'glyphicon glyphicon-menu-left'
+   */
+  'nav-prev': 'glyphicon glyphicon-menu-left',
+
+  /**
+   * Icon for simple pagination item "Go to next page"
+   *
+   * @type string
+   * @property nav-next
+   * @default 'glyphicon glyphicon-menu-right'
+   */
+  'nav-next': 'glyphicon glyphicon-menu-right',
+
+  /**
+   * Icon for simple pagination item "Go to last page"
+   *
+   * @type string
+   * @property nav-last
+   * @default 'glyphicon glyphicon-chevron-right'
+   */
+  'nav-last': 'glyphicon glyphicon-chevron-right',
+
+  /**
+   * Caret for columns dropdown
+   *
+   * @type string
+   * @property caret
+   * @default 'caret'
+   */
+  'caret': 'caret',
+
+  /**
+   * Icon for expanding row (used in the tbody tr internally)
+   *
+   * @type string
+   * @property expand-row
+   * @default 'glyphicon glyphicon-plus'
+   */
+  'expand-row': 'glyphicon glyphicon-plus',
+
+  /**
+   * Icon for expanding all rows (used in the thead)
+   *
+   * @type string
+   * @property expand-all-rows
+   * @default 'glyphicon glyphicon-plus'
+   */
+  'expand-all-rows': 'glyphicon glyphicon-plus',
+
+  /**
+   * Icon for collapsing row (used in the tbody tr internally)
+   *
+   * @type string
+   * @property collapse-row
+   * @default 'glyphicon glyphicon-minus'
+   */
+  'collapse-row': 'glyphicon glyphicon-minus',
+
+  /**
+   * Icon for collapsing all rows (used in the thead)
+   *
+   * @type string
+   * @property collapse-all-rows
+   * @default 'glyphicon glyphicon-plus'
+   */
+  'collapse-all-rows': 'glyphicon glyphicon-minus',
+
+  /**
+   * Icon for selection all rows (used in the thead)
+   *
+   * @type string
+   * @property select-all-rows
+   * @default 'glyphicon glyphicon-check'
+   */
+  'select-all-rows': 'glyphicon glyphicon-check',
+
+  /**
+   * Icon for deselection all rows (used in the thead)
+   *
+   * @type string
+   * @property deselect-all-rows
+   * @default 'glyphicon glyphicon-unchecked'
+   */
+  'deselect-all-rows': 'glyphicon glyphicon-unchecked',
+
+  /**
+   * Icon for selection row (used in the tbody tr internally)
+   *
+   * @type string
+   * @property select-row
+   * @default 'glyphicon glyphicon-check'
+   */
+  'select-row': 'glyphicon glyphicon-check',
+
+  /**
+   * Icon for deselection row (used in the tbody tr internally)
+   *
+   * @type string
+   * @property deselect-row
+   * @default 'glyphicon glyphicon-unchecked'
+   */
+  'deselect-row': 'glyphicon glyphicon-unchecked'
+});
\ No newline at end of file
Index: tests/dummy/app/templates/examples/server-table.hbs
===================================================================
--- tests/dummy/app/templates/examples/server-table.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/examples/server-table.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,17 +0,0 @@
-<div class="row">
-  <div class="col-md-12">
-    <h4>`models-table-server-paginated` example</h4>
-    <p>Component is extended into the `my-server-table` (see <code>tests/dummy/app/components/my-server-table.js</code>)</p>
-  </div>
-  <div class="col-md-8">
-    {{my-server-table data=model columns=columns}}
-  </div>
-  <div class="col-md-4">
-    <p>Component usage:</p>
-    <pre><code class="handlebars">\{{my-server-table
-  data=model
-  columns=columns}}</code></pre>
-    <p><code>columns</code>:</p>
-    <pre><code class="javascript">{{to-string this 'columns'}}</code></pre>
-  </div>
-</div>
\ No newline at end of file
Index: addon/components/models-table/no-data.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/no-data.js	(revision )
+++ addon/components/models-table/no-data.js	(revision )
@@ -0,0 +1,88 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/no-data';
+
+/**
+ * Table row shown when no data provided to the ModelsTable. Component used within [models-table/table-body](Components.ModelsTableTableBody.html).
+ *
+ * This component is a table-row with a single cell. This cell has a `colspan` equal to the shown columns count.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#if body.visibleContent.length}}
+ *         {{! ... }}
+ *       {{else}}
+ *         {{body.no-data}}
+ *       {{/if}}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * Usage with a block context:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{#mt.table as |table|}}
+ *     {{#table.body as |body|}}
+ *       {{#if body.visibleContent.length}}
+ *         {{! ... }}
+ *       {{else}}
+ *         {{#body.no-data as |nd|}}
+ *            Any message here
+ *         {{/body.no-data}}
+ *       {{/if}}
+ *     {{/table.header}}
+ *     {{! ... }}
+ *   {{/mt.table}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @class ModelsTableNoData
+ * @namespace Components
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+  tagName: 'tr',
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/processedColumns:property"}}ModelsTable.processedColumns{{/crossLink}}
+   *
+   * @property processedColumns
+   * @type object[]
+   * @default null
+   */
+  columnsCount: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+});
Index: config/ember-try.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-env node */\nmodule.exports = {\n  scenarios: [\n    {\n      name: 'ember-lts-2.4',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#lts-2-4'\n        },\n        resolutions: {\n          'ember': 'lts-2-4'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-source': null\n        }\n      }\n    },\n    {\n      name: 'ember-lts-2.8',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#lts-2-8'\n        },\n        resolutions: {\n          'ember': 'lts-2-8'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-source': null\n        }\n      }\n    },\n    {\n      name: 'ember-lts-2.12',\n      npm: {\n        devDependencies: {\n          'ember-source': '~2.12.0'\n        }\n      }\n    },\n    {\n      name: 'ember-release',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#release'\n        },\n        resolutions: {\n          'ember': 'release'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-source': null\n        }\n      }\n    },\n    {\n      name: 'ember-beta',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#beta'\n        },\n        resolutions: {\n          'ember': 'beta'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-source': null\n        }\n      }\n    },\n    {\n      name: 'ember-canary',\n      bower: {\n        dependencies: {\n          'ember': 'components/ember#canary'\n        },\n        resolutions: {\n          'ember': 'canary'\n        }\n      },\n      npm: {\n        devDependencies: {\n          'ember-source': null\n        }\n      }\n    },\n    {\n      name: 'ember-default',\n      npm: {\n        devDependencies: {}\n      }\n    }\n  ]\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/ember-try.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ config/ember-try.js	(revision )
@@ -2,22 +2,6 @@
 module.exports = {
   scenarios: [
     {
-      name: 'ember-lts-2.4',
-      bower: {
-        dependencies: {
-          'ember': 'components/ember#lts-2-4'
-        },
-        resolutions: {
-          'ember': 'lts-2-4'
-        }
-      },
-      npm: {
-        devDependencies: {
-          'ember-source': null
-        }
-      }
-    },
-    {
       name: 'ember-lts-2.8',
       bower: {
         dependencies: {
Index: app/components/models-table/cell.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/components/models-table/cell.js	(revision )
+++ app/components/models-table/cell.js	(revision )
@@ -0,0 +1,1 @@
+export { default } from 'ember-models-table/components/models-table/cell';
\ No newline at end of file
Index: app/templates/components/models-table/simple-pagination.hbs
===================================================================
--- app/templates/components/models-table/simple-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/simple-pagination.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,16 +0,0 @@
-<div class="btn-toolbar pull-right" role="toolbar">
-  <div class="btn-group" role="group">
-    <a href="#" {{action "gotoFirst"}} class="{{if gotoBackEnabled "enabled" "disabled"}} btn btn-default">
-      <span class="{{icons.nav-first}}"></span>
-    </a>
-    <a href="#" {{action "gotoPrev"}} class="{{if gotoBackEnabled "enabled" "disabled"}} btn btn-default">
-      <span class="{{icons.nav-prev}}"></span>
-    </a>
-    <a href="#" {{action "gotoNext"}} class="{{if gotoForwardEnabled "enabled" "disabled"}} btn btn-default">
-      <span class="{{icons.nav-next}}"></span>
-    </a>
-    <a href="#" {{action "gotoLast"}} class="{{if gotoForwardEnabled "enabled" "disabled"}} btn btn-default">
-      <span class="{{icons.nav-last}}"></span>
-    </a>
-  </div>
-</div>
\ No newline at end of file
Index: addon/templates/components/models-table/global-filter.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/templates/components/models-table/global-filter.hbs	(revision )
+++ addon/templates/components/models-table/global-filter.hbs	(revision )
@@ -0,0 +1,18 @@
+{{#if hasBlock}}
+  {{yield
+    (hash
+      themeInstance=themeInstance
+    )
+  }}
+{{else}}
+  <div class="{{themeInstance.globalFilterWrapper}}">
+    <div class="form-inline globalSearch">
+      <div class="form-group">
+        <label>{{messages.searchLabel}}</label> {{input type="text" value=value class=(concat themeInstance.input " filterString") enter="" placeholder=messages.searchPlaceholder}}
+        {{#if globalFilterUsed}}
+          <span class="clearFilterIcon {{themeInstance.clearFilterIcon}}" onclick={{action (mut value) ""}}></span>
+        {{/if}}
+      </div>
+    </div>
+  </div>
+{{/if}}
\ No newline at end of file
Index: tests/dummy/app/controllers/examples/route-cells.js
===================================================================
--- tests/dummy/app/controllers/examples/route-cells.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/controllers/examples/route-cells.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,31 +0,0 @@
-import Ember from 'ember';
-
-const {A} = Ember;
-
-export default Ember.Controller.extend({
-
-  title: '`routeName` usage example',
-  description: 'firstName-cell is a link to the route for model in the row',
-  columns: A([
-    {
-      title: 'ID',
-      filteredBy: 'id',
-      routeName: 'users.user'
-    },
-    {
-      propertyName: 'firstName',
-      routeName: 'users.user',
-      title: 'First Name'
-    },
-    {
-      propertyName: 'lastName',
-      title: 'Last Name',
-      filterWithSelect: true
-    },
-    {
-      propertyName: 'city',
-      title: 'City'
-    }
-  ])
-
-});
\ No newline at end of file
Index: tests/helpers/start-app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport Application from '../../app';\nimport config from '../../config/environment';\n\nexport default function startApp(attrs) {\n  let attributes = Ember.merge({}, config.APP);\n  attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n  return Ember.run(() => {\n    let application = Application.create(attributes);\n    application.setupForTesting();\n    application.injectTestHelpers();\n    return application;\n  });\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/helpers/start-app.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/helpers/start-app.js	(revision )
@@ -1,12 +1,13 @@
-import Ember from 'ember';
+import { run } from '@ember/runloop';
+import { merge } from '@ember/polyfills';
 import Application from '../../app';
 import config from '../../config/environment';
 
 export default function startApp(attrs) {
-  let attributes = Ember.merge({}, config.APP);
-  attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;
+  let attributes = merge({}, config.APP);
+  attributes = merge(attributes, attrs); // use defaults, but you can override;
 
-  return Ember.run(() => {
+  return run(() => {
     let application = Application.create(attributes);
     application.setupForTesting();
     application.injectTestHelpers();
Index: addon/components/models-table/global-filter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table/global-filter.js	(revision )
+++ addon/components/models-table/global-filter.js	(revision )
@@ -0,0 +1,67 @@
+import Component from '@ember/component';
+import layout from '../../templates/components/models-table/global-filter';
+
+/**
+ * Global filter element used within [models-table](Components.ModelsTable.html).
+ *
+ * Its value is used for all data-items and for each columns `propertyName`.
+ *
+ * Usage example:
+ *
+ * ```hbs
+ * {{#models-table data=data columns=columns as |mt|}}
+ *   {{mt.global-filter}}
+ *   {{! .... }}
+ * {{/models-table}}
+ * ```
+ *
+ * @namespace Components
+ * @class ModelsTableGlobalFilter
+ * @extends Ember.Component
+ */
+export default Component.extend({
+  layout,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/filterString:property"}}ModelsTable.filterString{{/crossLink}}
+   *
+   * @property value
+   * @type string
+   * @default null
+   */
+  value: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/themeInstance:property"}}ModelsTable.themeInstance{{/crossLink}}
+   *
+   * @property themeInstance
+   * @type object
+   * @default null
+   */
+  themeInstance: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/globalFilterUsed:property"}}ModelsTable.globalFilterUsed{{/crossLink}}
+   *
+   * @property globalFilterUsed
+   * @type boolean
+   * @default null
+   */
+  globalFilterUsed: null,
+
+  /**
+   * Bound from {{#crossLink "Components.ModelsTable/messages:property"}}ModelsTable.messages{{/crossLink}}
+   *
+   * @property messages
+   * @type object
+   * @default null
+   */
+  messages: null,
+
+  /**
+   * Closure action {{#crossLink "Components.ModelsTable/actions.sendAction:method"}}ModelsTable.actions.sendAction{{/crossLink}}
+   *
+   * @event sendAction
+   */
+  sendAction: null
+});
Index: tests/dummy/app/templates/components/select-all-rows-checkbox.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/templates/components/select-all-rows-checkbox.hbs	(revision )
+++ tests/dummy/app/templates/components/select-all-rows-checkbox.hbs	(revision )
@@ -0,0 +1,2 @@
+<span {{action "toggleAllSelection"}} class="{{if (is-equal selectedItems.length data.length) themeInstance.select-all-rows themeInstance.deselect-all-rows}}"></span>
+{{yield}}
\ No newline at end of file
Index: tests/dummy/app/routes/examples/server-table.js
===================================================================
--- tests/dummy/app/routes/examples/server-table.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/routes/examples/server-table.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,20 +0,0 @@
-import Ember from 'ember';
-
-export default Ember.Route.extend({
-
-  model() {
-    return this.get('store').query('user', {});
-  },
-
-  setupController(controller) {
-    controller.set('columns', [
-      {propertyName: 'index'},
-      {propertyName: 'firstName'},
-      {propertyName: 'lastName'},
-      {propertyName: 'age'},
-      {propertyName: 'city'}
-    ]);
-    return this._super(...arguments);
-  }
-
-});
Index: gh-pages.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/bin/bash\n\ngit branch -D gh-pages\ngit push origin --delete gh-pages\ngit checkout -b gh-pages\nember build --environment production\ngit rm -rf app addon config tests\ngit rm -rf Brocfile.js bower.json package.json testem.json\ngit rm -rf .bowerrc .editorconfig .jshintrc .travis.yml\nmv dist/* .\nrm -rf dist\ngit add .\ngit commit -m \"Publishing to github pages\"\ngit push origin gh-pages\ngit checkout master
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gh-pages.sh	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ gh-pages.sh	(revision )
@@ -3,13 +3,32 @@
 git branch -D gh-pages
 git push origin --delete gh-pages
 git checkout -b gh-pages
-ember build --environment production
+
+ember build --prod
+git rm -rf app addon config tests blueprints
+git rm -rf Brocfile.js bower.json package.json package-lock.json testem.json
+git rm -rf .bowerrc .editorconfig .jshintrc .travis.yml
+mkdir ./v.2
+mv dist/* ./v.2/
+rm -rf dist
+git add .
+git commit -m "Pushing v.2 to github pages"
+git push origin gh-pages
+
+git checkout master
+rm -rf node-modules
+npm i
+git checkout package.json
+rm -rf package-lock.json
+ember build --prod
+git checkout gh-pages
 git rm -rf app addon config tests
-git rm -rf Brocfile.js bower.json package.json testem.json
+git rm -rf Brocfile.js bower.json package.json package-lock.json testem.json
 git rm -rf .bowerrc .editorconfig .jshintrc .travis.yml
-mv dist/* .
+mkdir ./v.1
+mv dist/* ./v.1/
 rm -rf dist
 git add .
-git commit -m "Publishing to github pages"
+git commit -m "Publishing v.1 to github pages"
 git push origin gh-pages
-git checkout master
\ No newline at end of file
+git checkout v2.0
\ No newline at end of file
Index: app/templates/components/models-table/expand-row-cell.hbs
===================================================================
--- app/templates/components/models-table/expand-row-cell.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ app/templates/components/models-table/expand-row-cell.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,5 +0,0 @@
-{{#if (exists-in _expandedRowIndexes index)}}
-  <a href="#" {{action "collapseRow" index bubbles=false}} class={{classes.collapseRow}}><i class="{{icons.collapse-row}}"></i></a>
-{{else}}
-  <a href="#" {{action "expandRow" index bubbles=false}} class={{classes.expandRow}}><i class="{{icons.expand-row}}"></i></a>
-{{/if}}
\ No newline at end of file
Index: addon/templates/components/models-select.hbs
===================================================================
--- addon/templates/components/models-select.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ addon/templates/components/models-select.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,4 +0,0 @@
-{{#each options as |option|}}
-  <option value="{{option.value}}" selected={{is-equal value option.value}}>{{option.label}}</option>
-{{/each}}
-{{yield}}
Index: tests/dummy/app/components/filter-cell-select.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Ember from 'ember';\nimport layout from '../templates/components/filter-cell-select';\n\nconst {computed, get} = Ember;\n\nexport default Ember.Component.extend({\n  layout,\n\n  filterOptions: computed('data.[]', 'column.propertyName', function () {\n    return [''].concat(get(this, 'data').mapBy(get(this, 'column.propertyName'))).map(option => {\n      return {value: option, label: option};\n    });\n  })\n\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/filter-cell-select.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/components/filter-cell-select.js	(revision )
@@ -1,11 +1,10 @@
-import Ember from 'ember';
+import Component from '@ember/component';
+import { get, computed } from '@ember/object';
 import layout from '../templates/components/filter-cell-select';
 
-const {computed, get} = Ember;
-
-export default Ember.Component.extend({
+export default Component.extend({
   layout,
-
+  data: null,
   filterOptions: computed('data.[]', 'column.propertyName', function () {
     return [''].concat(get(this, 'data').mapBy(get(this, 'column.propertyName'))).map(option => {
       return {value: option, label: option};
Index: tests/dummy/app/components/expanded-row.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/dummy/app/components/expanded-row.js	(revision )
+++ tests/dummy/app/components/expanded-row.js	(revision )
@@ -0,0 +1,6 @@
+import Component from '@ember/component';
+import layout from '../templates/components/expanded-row';
+
+export default Component.extend({
+  layout
+});
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package-lock.json	(revision )
+++ package-lock.json	(revision )
@@ -0,0 +1,7177 @@
+{
+  "name": "ember-models-table",
+  "version": "2.0.0-beta.2",
+  "lockfileVersion": 1,
+  "dependencies": {
+    "@glimmer/compiler": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/compiler/-/compiler-0.25.3.tgz",
+      "integrity": "sha1-JesGOU87ocH65a8lyc996ywR704=",
+      "dev": true,
+      "dependencies": {
+        "simple-html-tokenizer": {
+          "version": "0.3.0",
+          "resolved": "https://registry.npmjs.org/simple-html-tokenizer/-/simple-html-tokenizer-0.3.0.tgz",
+          "integrity": "sha1-m4tVWdgOMxpUTdE91ZOC5dDZRBE=",
+          "dev": true
+        }
+      }
+    },
+    "@glimmer/di": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/@glimmer/di/-/di-0.2.0.tgz",
+      "integrity": "sha1-c7/Upu5BSKgL8JLopdKbysnUzn4=",
+      "dev": true
+    },
+    "@glimmer/interfaces": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/interfaces/-/interfaces-0.25.3.tgz",
+      "integrity": "sha1-jEYLKK1aF+qhcS5qp7jrtJc4w48=",
+      "dev": true
+    },
+    "@glimmer/node": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/node/-/node-0.25.3.tgz",
+      "integrity": "sha1-MBgo6EVb4UHVOEsBmA7ZvgKYQFk=",
+      "dev": true
+    },
+    "@glimmer/object": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/object/-/object-0.25.3.tgz",
+      "integrity": "sha1-RR6yCNrboe3pwMA4qQ3+MmN0k/4=",
+      "dev": true
+    },
+    "@glimmer/object-reference": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/object-reference/-/object-reference-0.25.3.tgz",
+      "integrity": "sha1-4NH6h0+RLn0SMtSH/NIJbmsxtiA=",
+      "dev": true
+    },
+    "@glimmer/reference": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/reference/-/reference-0.25.3.tgz",
+      "integrity": "sha1-oJ3cOXvuAiPec+pQRKMEowk1EE8=",
+      "dev": true
+    },
+    "@glimmer/resolver": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/@glimmer/resolver/-/resolver-0.4.1.tgz",
+      "integrity": "sha512-Fdi//WYX+uwE3QCAd9cMXNwlgcOt+7tz3k8yQKLfLwt+fvuY/LKeztxMNEZREW8Xpysb8RFpVgVuY5Dw1sMuWA==",
+      "dev": true
+    },
+    "@glimmer/runtime": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/runtime/-/runtime-0.25.3.tgz",
+      "integrity": "sha1-riEBoeTeMzDQjyCAbBgyfb+obXg=",
+      "dev": true
+    },
+    "@glimmer/syntax": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/syntax/-/syntax-0.25.3.tgz",
+      "integrity": "sha1-s/ilm+5hb9YAMB13jeO2Sb93A24=",
+      "dev": true,
+      "dependencies": {
+        "simple-html-tokenizer": {
+          "version": "0.3.0",
+          "resolved": "https://registry.npmjs.org/simple-html-tokenizer/-/simple-html-tokenizer-0.3.0.tgz",
+          "integrity": "sha1-m4tVWdgOMxpUTdE91ZOC5dDZRBE=",
+          "dev": true
+        }
+      }
+    },
+    "@glimmer/util": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/util/-/util-0.25.3.tgz",
+      "integrity": "sha1-fO33KUcTe1GWWMi+NNDVllzr46E=",
+      "dev": true
+    },
+    "@glimmer/wire-format": {
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@glimmer/wire-format/-/wire-format-0.25.3.tgz",
+      "integrity": "sha1-BGaSs6JqMKSYcSJmzQvbR9dxDzc=",
+      "dev": true
+    },
+    "abbrev": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.0.tgz",
+      "integrity": "sha1-0FVMIlZjbi9W58LlrRg/hZQo2B8=",
+      "dev": true
+    },
+    "accepts": {
+      "version": "1.3.4",
+      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.4.tgz",
+      "integrity": "sha1-hiRnWMfdbSGmR0/whKR0DsBesh8=",
+      "dev": true
+    },
+    "acorn": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-5.1.2.tgz",
+      "integrity": "sha512-o96FZLJBPY1lvTuJylGA9Bk3t/GKPPJG8H0ydQQl01crzwJgspa4AEIq/pVTXigmK0PHVQhiAtn8WMBLL9D2WA==",
+      "dev": true
+    },
+    "acorn-jsx": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-3.0.1.tgz",
+      "integrity": "sha1-r9+UiPsezvyDSPb7IvRk4ypYs2s=",
+      "dev": true,
+      "dependencies": {
+        "acorn": {
+          "version": "3.3.0",
+          "resolved": "https://registry.npmjs.org/acorn/-/acorn-3.3.0.tgz",
+          "integrity": "sha1-ReN/s56No/JbruP/U2niu18iAXo=",
+          "dev": true
+        }
+      }
+    },
+    "after": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/after/-/after-0.8.1.tgz",
+      "integrity": "sha1-q11PuIP1loFtNRX495HAr0ht1ic=",
+      "dev": true
+    },
+    "ajv": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-5.2.2.tgz",
+      "integrity": "sha1-R8aNaehvXZUxA7AHSpQw3GPaXjk=",
+      "dev": true
+    },
+    "ajv-keywords": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-1.5.1.tgz",
+      "integrity": "sha1-MU3QpLM2j609/NxU7eYXG4htrzw=",
+      "dev": true
+    },
+    "align-text": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/align-text/-/align-text-0.1.4.tgz",
+      "integrity": "sha1-DNkKVhCT810KmSVsIrcGlDP60Rc=",
+      "dev": true
+    },
+    "alter": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/alter/-/alter-0.2.0.tgz",
+      "integrity": "sha1-x1iICGF1cgNKrmJICvJrHU0cs80=",
+      "dev": true
+    },
+    "amd-name-resolver": {
+      "version": "0.0.7",
+      "resolved": "https://registry.npmjs.org/amd-name-resolver/-/amd-name-resolver-0.0.7.tgz",
+      "integrity": "sha1-gUMBrf6KLxCfboTV6TUZbvtmlhU="
+    },
+    "amdefine": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/amdefine/-/amdefine-1.0.1.tgz",
+      "integrity": "sha1-SlKCrBZHKek2Gbz9OtFR+BfOkfU=",
+      "dev": true
+    },
+    "ansi-escapes": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-1.4.0.tgz",
+      "integrity": "sha1-06ioOzGapneTZisT52HHkRQiMG4=",
+      "dev": true
+    },
+    "ansi-regex": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
+      "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
+    },
+    "ansi-styles": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz",
+      "integrity": "sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="
+    },
+    "ansicolors": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/ansicolors/-/ansicolors-0.2.1.tgz",
+      "integrity": "sha1-vgiVmQl7dKXJxKhKDNvNtivYeu8=",
+      "dev": true
+    },
+    "anymatch": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-1.3.2.tgz",
+      "integrity": "sha512-0XNayC8lTHQ2OI8aljNCN3sSx6hsr/1+rlcDAotXJR7C1oZZHCNsfpbKwMjRA3Uqb5tF1Rae2oloTr4xpq+WjA==",
+      "dev": true
+    },
+    "aot-test-generators": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/aot-test-generators/-/aot-test-generators-0.1.0.tgz",
+      "integrity": "sha1-Q/D2Ffl8spjXkZwbC05rcxCwPNA=",
+      "dev": true,
+      "dependencies": {
+        "jsesc": {
+          "version": "2.5.1",
+          "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.1.tgz",
+          "integrity": "sha1-5CGiqOINawgZ3yiQj3glJrlt0f4=",
+          "dev": true
+        }
+      }
+    },
+    "aproba": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/aproba/-/aproba-1.1.2.tgz",
+      "integrity": "sha512-ZpYajIfO0j2cOFTO955KUMIKNmj6zhX8kVztMAxFsDaMwz+9Z9SV0uou2pC9HJqcfpffOsjnbrDMvkNy+9RXPw==",
+      "dev": true
+    },
+    "are-we-there-yet": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-1.1.4.tgz",
+      "integrity": "sha1-u13KOCu5TwXhUZQ3PRb9O6HKEQ0=",
+      "dev": true,
+      "dependencies": {
+        "readable-stream": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz",
+          "integrity": "sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==",
+          "dev": true
+        },
+        "string_decoder": {
+          "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz",
+          "integrity": "sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==",
+          "dev": true
+        }
+      }
+    },
+    "argparse": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.9.tgz",
+      "integrity": "sha1-c9g7wmP4bpf4zE9rrhsOkKfSLIY=",
+      "dev": true,
+      "dependencies": {
+        "sprintf-js": {
+          "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
+          "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
+          "dev": true
+        }
+      }
+    },
+    "arr-diff": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/arr-diff/-/arr-diff-2.0.0.tgz",
+      "integrity": "sha1-jzuCf5Vai9ZpaX5KQlasPOrjVs8=",
+      "dev": true
+    },
+    "arr-flatten": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/arr-flatten/-/arr-flatten-1.1.0.tgz",
+      "integrity": "sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==",
+      "dev": true
+    },
+    "array-equal": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/array-equal/-/array-equal-1.0.0.tgz",
+      "integrity": "sha1-jCpe8kcv2ep0KwTHenUJO6J1fJM="
+    },
+    "array-flatten": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
+      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=",
+      "dev": true
+    },
+    "array-to-error": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/array-to-error/-/array-to-error-1.1.1.tgz",
+      "integrity": "sha1-1ogSkm0UCXogVXmmZ+6vGFakTAc=",
+      "dev": true
+    },
+    "array-to-sentence": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/array-to-sentence/-/array-to-sentence-1.1.0.tgz",
+      "integrity": "sha1-yASVba+lMjJJWyBalFJ1OiWNOfw=",
+      "dev": true
+    },
+    "array-union": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz",
+      "integrity": "sha1-mjRBDk9OPaI96jdb5b5w8kd47Dk=",
+      "dev": true
+    },
+    "array-uniq": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz",
+      "integrity": "sha1-r2rId6Jcx/dOBYiUdThY39sk/bY=",
+      "dev": true
+    },
+    "array-unique": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/array-unique/-/array-unique-0.2.1.tgz",
+      "integrity": "sha1-odl8yvy8JiXMcPrc6zalDFiwGlM=",
+      "dev": true
+    },
+    "arraybuffer.slice": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/arraybuffer.slice/-/arraybuffer.slice-0.0.6.tgz",
+      "integrity": "sha1-8zshWfBTKj8xB6JywMz70a0peco=",
+      "dev": true
+    },
+    "arrify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
+      "integrity": "sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0=",
+      "dev": true
+    },
+    "asn1": {
+      "version": "0.1.11",
+      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.1.11.tgz",
+      "integrity": "sha1-VZvhg3bQik7E2+gId9J4GGObLfc=",
+      "dev": true,
+      "optional": true
+    },
+    "assert-plus": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-0.1.5.tgz",
+      "integrity": "sha1-7nQAlBMALYTOxyGcasgRgS5yMWA=",
+      "dev": true,
+      "optional": true
+    },
+    "ast-traverse": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/ast-traverse/-/ast-traverse-0.1.1.tgz",
+      "integrity": "sha1-ac8rg4bxnc2hux4F1o/jWdiJfeY=",
+      "dev": true
+    },
+    "ast-types": {
+      "version": "0.9.6",
+      "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.9.6.tgz",
+      "integrity": "sha1-ECyenpAF0+fjgpvwxPok7oYu6bk=",
+      "dev": true
+    },
+    "async": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/async/-/async-2.5.0.tgz",
+      "integrity": "sha512-e+lJAJeNWuPCNyxZKOBdaJGyLGHugXVQtrAwtuAe2vhxTYxFTKE73p8JuTmdH0qdQZtDvI4dhJwjZc5zsfIsYw=="
+    },
+    "async-disk-cache": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.3.2.tgz",
+      "integrity": "sha1-rFPWFShD3yAslAbijXdDYmCNdN0="
+    },
+    "async-each": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/async-each/-/async-each-1.0.1.tgz",
+      "integrity": "sha1-GdOGodntxufByF04iu28xW0zYC0=",
+      "dev": true
+    },
+    "async-promise-queue": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/async-promise-queue/-/async-promise-queue-1.0.4.tgz",
+      "integrity": "sha512-GQ5X3DT+TefYuFPHdvIPXFTlKnh39U7dwtl+aUBGeKjMea9nBpv3c91DXgeyBQmY07vQ97f3Sr9XHqkamEameQ=="
+    },
+    "aws-sign2": {
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.5.0.tgz",
+      "integrity": "sha1-xXED96F/wDfwLXwuZLYC6iI/fWM=",
+      "dev": true,
+      "optional": true
+    },
+    "babel-code-frame": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-code-frame/-/babel-code-frame-6.26.0.tgz",
+      "integrity": "sha1-Y/1D99weO7fONZR9uP42mj9Yx0s="
+    },
+    "babel-core": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-6.26.0.tgz",
+      "integrity": "sha1-rzL3izGm/O8RnIew/Y2XU/A6C7g="
+    },
+    "babel-generator": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-generator/-/babel-generator-6.26.0.tgz",
+      "integrity": "sha1-rBriAHC3n248odMmlhMFN3TyDcU=",
+      "dependencies": {
+        "jsesc": {
+          "version": "1.3.0",
+          "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-1.3.0.tgz",
+          "integrity": "sha1-RsP+yMGJKxKwgz25vHYiF226s0s="
+        }
+      }
+    },
+    "babel-helper-builder-binary-assignment-operator-visitor": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-builder-binary-assignment-operator-visitor/-/babel-helper-builder-binary-assignment-operator-visitor-6.24.1.tgz",
+      "integrity": "sha1-zORReto1b0IgvK6KAsKzRvmlZmQ="
+    },
+    "babel-helper-call-delegate": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-call-delegate/-/babel-helper-call-delegate-6.24.1.tgz",
+      "integrity": "sha1-7Oaqzdx25Bw0YfiL/Fdb0Nqi340="
+    },
+    "babel-helper-define-map": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-helper-define-map/-/babel-helper-define-map-6.26.0.tgz",
+      "integrity": "sha1-pfVtq0GiX5fstJjH66ypgZ+Vvl8="
+    },
+    "babel-helper-explode-assignable-expression": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-explode-assignable-expression/-/babel-helper-explode-assignable-expression-6.24.1.tgz",
+      "integrity": "sha1-8luCz33BBDPFX3BZLVdGQArCLKo="
+    },
+    "babel-helper-function-name": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-function-name/-/babel-helper-function-name-6.24.1.tgz",
+      "integrity": "sha1-00dbjAPtmCQqJbSDUasYOZ01gKk="
+    },
+    "babel-helper-get-function-arity": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-get-function-arity/-/babel-helper-get-function-arity-6.24.1.tgz",
+      "integrity": "sha1-j3eCqpNAfEHTqlCQj4mwMbG2hT0="
+    },
+    "babel-helper-hoist-variables": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-hoist-variables/-/babel-helper-hoist-variables-6.24.1.tgz",
+      "integrity": "sha1-HssnaJydJVE+rbyZFKc/VAi+enY="
+    },
+    "babel-helper-optimise-call-expression": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-optimise-call-expression/-/babel-helper-optimise-call-expression-6.24.1.tgz",
+      "integrity": "sha1-96E0J7qfc/j0+pk8VKl4gtEkQlc="
+    },
+    "babel-helper-regex": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-helper-regex/-/babel-helper-regex-6.26.0.tgz",
+      "integrity": "sha1-MlxZ+QL4LyS3T6zu0DY5VPZJXnI="
+    },
+    "babel-helper-remap-async-to-generator": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-remap-async-to-generator/-/babel-helper-remap-async-to-generator-6.24.1.tgz",
+      "integrity": "sha1-XsWBgnrXI/7N04HxySg5BnbkVRs="
+    },
+    "babel-helper-replace-supers": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helper-replace-supers/-/babel-helper-replace-supers-6.24.1.tgz",
+      "integrity": "sha1-v22/5Dk40XNpohPKiov3S2qQqxo="
+    },
+    "babel-helpers": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-helpers/-/babel-helpers-6.24.1.tgz",
+      "integrity": "sha1-NHHenK7DiOXIUOWX5Yom3fN2ArI="
+    },
+    "babel-messages": {
+      "version": "6.23.0",
+      "resolved": "https://registry.npmjs.org/babel-messages/-/babel-messages-6.23.0.tgz",
+      "integrity": "sha1-8830cDhYA1sqKVHG7F7fbGLyYw4="
+    },
+    "babel-plugin-check-es2015-constants": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-check-es2015-constants/-/babel-plugin-check-es2015-constants-6.22.0.tgz",
+      "integrity": "sha1-NRV7EBQm/S/9PaP3XH0ekYNbv4o="
+    },
+    "babel-plugin-constant-folding": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-constant-folding/-/babel-plugin-constant-folding-1.0.1.tgz",
+      "integrity": "sha1-g2HTZMmORJw2kr26Ue/whEKQqo4=",
+      "dev": true
+    },
+    "babel-plugin-dead-code-elimination": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/babel-plugin-dead-code-elimination/-/babel-plugin-dead-code-elimination-1.0.2.tgz",
+      "integrity": "sha1-X3xFEnTc18zNv7s+C4XdKBIfD2U=",
+      "dev": true
+    },
+    "babel-plugin-debug-macros": {
+      "version": "0.1.11",
+      "resolved": "https://registry.npmjs.org/babel-plugin-debug-macros/-/babel-plugin-debug-macros-0.1.11.tgz",
+      "integrity": "sha512-hZw5qNNGAR02Y+yBUrtsnJHh8OXavkayPRqKGAXnIm4t5rWVpj3ArwsC7TWdpZsBguQvHAeyTxZ7s23yY60HHg=="
+    },
+    "babel-plugin-ember-modules-api-polyfill": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-ember-modules-api-polyfill/-/babel-plugin-ember-modules-api-polyfill-2.0.1.tgz",
+      "integrity": "sha1-uq8m3Ovi7R3hIAIbxCvin1IEl7M="
+    },
+    "babel-plugin-eval": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-eval/-/babel-plugin-eval-1.0.1.tgz",
+      "integrity": "sha1-ovrtJc5r5preS/7CY/cBaRlZUNo=",
+      "dev": true
+    },
+    "babel-plugin-feature-flags": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-feature-flags/-/babel-plugin-feature-flags-0.3.1.tgz",
+      "integrity": "sha1-nIJ8+aTrmhn3JcyyOehcqwIDb8E=",
+      "dev": true
+    },
+    "babel-plugin-filter-imports": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-filter-imports/-/babel-plugin-filter-imports-0.3.1.tgz",
+      "integrity": "sha1-54WbVohrF13SYWQl0neyGeIJ6os=",
+      "dev": true
+    },
+    "babel-plugin-htmlbars-inline-precompile": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-htmlbars-inline-precompile/-/babel-plugin-htmlbars-inline-precompile-0.2.3.tgz",
+      "integrity": "sha1-zTZeJ4r0Cb+mvncExDVL7udCRGs=",
+      "dev": true
+    },
+    "babel-plugin-inline-environment-variables": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-inline-environment-variables/-/babel-plugin-inline-environment-variables-1.0.1.tgz",
+      "integrity": "sha1-H1jOkSB61qgmqL9kX6/mj/X+P/4=",
+      "dev": true
+    },
+    "babel-plugin-jscript": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/babel-plugin-jscript/-/babel-plugin-jscript-1.0.4.tgz",
+      "integrity": "sha1-jzQsOCduh6R9X6CovT1etsytj8w=",
+      "dev": true
+    },
+    "babel-plugin-member-expression-literals": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-member-expression-literals/-/babel-plugin-member-expression-literals-1.0.1.tgz",
+      "integrity": "sha1-zF7bD6qNyScXDnTW0cAkQAIWJNM=",
+      "dev": true
+    },
+    "babel-plugin-property-literals": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-property-literals/-/babel-plugin-property-literals-1.0.1.tgz",
+      "integrity": "sha1-AlIwGQAZKYCxwRjv6kjOk6q4MzY=",
+      "dev": true
+    },
+    "babel-plugin-proto-to-assign": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/babel-plugin-proto-to-assign/-/babel-plugin-proto-to-assign-1.0.4.tgz",
+      "integrity": "sha1-xJ56/QL1d7xNoF6i3wAiUM980SM=",
+      "dev": true,
+      "dependencies": {
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        }
+      }
+    },
+    "babel-plugin-react-constant-elements": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-react-constant-elements/-/babel-plugin-react-constant-elements-1.0.3.tgz",
+      "integrity": "sha1-lGc26DeEKcvDSdz/YvUcFDs041o=",
+      "dev": true
+    },
+    "babel-plugin-react-display-name": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-react-display-name/-/babel-plugin-react-display-name-1.0.3.tgz",
+      "integrity": "sha1-dU/jiSboQkpOexWrbqYTne4FFPw=",
+      "dev": true
+    },
+    "babel-plugin-remove-console": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-remove-console/-/babel-plugin-remove-console-1.0.1.tgz",
+      "integrity": "sha1-2PJFVsOgUAXUKqqv0neH9T/wE6c=",
+      "dev": true
+    },
+    "babel-plugin-remove-debugger": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-remove-debugger/-/babel-plugin-remove-debugger-1.0.1.tgz",
+      "integrity": "sha1-/S6jzWGkKK0fO5yJiC/0KT6MFMc=",
+      "dev": true
+    },
+    "babel-plugin-runtime": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/babel-plugin-runtime/-/babel-plugin-runtime-1.0.7.tgz",
+      "integrity": "sha1-v3x9lm3Vbs1cF/ocslPJrLflSq8=",
+      "dev": true
+    },
+    "babel-plugin-syntax-async-functions": {
+      "version": "6.13.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-async-functions/-/babel-plugin-syntax-async-functions-6.13.0.tgz",
+      "integrity": "sha1-ytnK0RkbWtY0vzCuCHI5HgZHvpU="
+    },
+    "babel-plugin-syntax-exponentiation-operator": {
+      "version": "6.13.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-exponentiation-operator/-/babel-plugin-syntax-exponentiation-operator-6.13.0.tgz",
+      "integrity": "sha1-nufoM3KQ2pUoggGmpX9BcDF4MN4="
+    },
+    "babel-plugin-syntax-trailing-function-commas": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.22.0.tgz",
+      "integrity": "sha1-ugNgk3+NBuQBgKQ/4NVhb/9TLPM="
+    },
+    "babel-plugin-transform-async-to-generator": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-async-to-generator/-/babel-plugin-transform-async-to-generator-6.24.1.tgz",
+      "integrity": "sha1-ZTbjeK/2yx1VF6wOQOs+n8jQh2E="
+    },
+    "babel-plugin-transform-es2015-arrow-functions": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-arrow-functions/-/babel-plugin-transform-es2015-arrow-functions-6.22.0.tgz",
+      "integrity": "sha1-RSaSy3EdX3ncf4XkQM5BufJE0iE="
+    },
+    "babel-plugin-transform-es2015-block-scoped-functions": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-block-scoped-functions/-/babel-plugin-transform-es2015-block-scoped-functions-6.22.0.tgz",
+      "integrity": "sha1-u8UbSflk1wy42OC5ToICRs46YUE="
+    },
+    "babel-plugin-transform-es2015-block-scoping": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-block-scoping/-/babel-plugin-transform-es2015-block-scoping-6.26.0.tgz",
+      "integrity": "sha1-1w9SmcEwjQXBL0Y4E7CgnnOxiV8="
+    },
+    "babel-plugin-transform-es2015-classes": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-classes/-/babel-plugin-transform-es2015-classes-6.24.1.tgz",
+      "integrity": "sha1-WkxYpQyclGHlZLSyo7+ryXolhNs="
+    },
+    "babel-plugin-transform-es2015-computed-properties": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-computed-properties/-/babel-plugin-transform-es2015-computed-properties-6.24.1.tgz",
+      "integrity": "sha1-b+Ko0WiV1WNPTNmZttNICjCBWbM="
+    },
+    "babel-plugin-transform-es2015-destructuring": {
+      "version": "6.23.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-destructuring/-/babel-plugin-transform-es2015-destructuring-6.23.0.tgz",
+      "integrity": "sha1-mXux8auWf2gtKwh2/jWNYOdlxW0="
+    },
+    "babel-plugin-transform-es2015-duplicate-keys": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-duplicate-keys/-/babel-plugin-transform-es2015-duplicate-keys-6.24.1.tgz",
+      "integrity": "sha1-c+s9MQypaePvnskcU3QabxV2Qj4="
+    },
+    "babel-plugin-transform-es2015-for-of": {
+      "version": "6.23.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-for-of/-/babel-plugin-transform-es2015-for-of-6.23.0.tgz",
+      "integrity": "sha1-9HyVsrYT3x0+zC/bdXNiPHUkhpE="
+    },
+    "babel-plugin-transform-es2015-function-name": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-function-name/-/babel-plugin-transform-es2015-function-name-6.24.1.tgz",
+      "integrity": "sha1-g0yJhTvDaxrw86TF26qU/Y6sqos="
+    },
+    "babel-plugin-transform-es2015-literals": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-literals/-/babel-plugin-transform-es2015-literals-6.22.0.tgz",
+      "integrity": "sha1-T1SgLWzWbPkVKAAZox0xklN3yi4="
+    },
+    "babel-plugin-transform-es2015-modules-amd": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-amd/-/babel-plugin-transform-es2015-modules-amd-6.24.1.tgz",
+      "integrity": "sha1-Oz5UAXI5hC1tGcMBHEvS8AoA0VQ="
+    },
+    "babel-plugin-transform-es2015-modules-commonjs": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.26.0.tgz",
+      "integrity": "sha1-DYOUApt9xqvhqX7xgeAHWN0uXYo="
+    },
+    "babel-plugin-transform-es2015-modules-systemjs": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-systemjs/-/babel-plugin-transform-es2015-modules-systemjs-6.24.1.tgz",
+      "integrity": "sha1-/4mhQrkRmpBhlfXxBuzzBdlAfSM="
+    },
+    "babel-plugin-transform-es2015-modules-umd": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-modules-umd/-/babel-plugin-transform-es2015-modules-umd-6.24.1.tgz",
+      "integrity": "sha1-rJl+YoXNGO1hdq22B9YCNErThGg="
+    },
+    "babel-plugin-transform-es2015-object-super": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-object-super/-/babel-plugin-transform-es2015-object-super-6.24.1.tgz",
+      "integrity": "sha1-JM72muIcuDp/hgPa0CH1cusnj40="
+    },
+    "babel-plugin-transform-es2015-parameters": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-parameters/-/babel-plugin-transform-es2015-parameters-6.24.1.tgz",
+      "integrity": "sha1-V6w1GrScrxSpfNE7CfZv3wpiXys="
+    },
+    "babel-plugin-transform-es2015-shorthand-properties": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-shorthand-properties/-/babel-plugin-transform-es2015-shorthand-properties-6.24.1.tgz",
+      "integrity": "sha1-JPh11nIch2YbvZmkYi5R8U3jiqA="
+    },
+    "babel-plugin-transform-es2015-spread": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-spread/-/babel-plugin-transform-es2015-spread-6.22.0.tgz",
+      "integrity": "sha1-1taKmfia7cRTbIGlQujdnxdG+NE="
+    },
+    "babel-plugin-transform-es2015-sticky-regex": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-sticky-regex/-/babel-plugin-transform-es2015-sticky-regex-6.24.1.tgz",
+      "integrity": "sha1-AMHNsaynERLN8M9hJsLta0V8zbw="
+    },
+    "babel-plugin-transform-es2015-template-literals": {
+      "version": "6.22.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-template-literals/-/babel-plugin-transform-es2015-template-literals-6.22.0.tgz",
+      "integrity": "sha1-qEs0UPfp+PH2g51taH2oS7EjbY0="
+    },
+    "babel-plugin-transform-es2015-typeof-symbol": {
+      "version": "6.23.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-typeof-symbol/-/babel-plugin-transform-es2015-typeof-symbol-6.23.0.tgz",
+      "integrity": "sha1-3sCfHN3/lLUqxz1QXITfWdzOs3I="
+    },
+    "babel-plugin-transform-es2015-unicode-regex": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-es2015-unicode-regex/-/babel-plugin-transform-es2015-unicode-regex-6.24.1.tgz",
+      "integrity": "sha1-04sS9C6nMj9yk4fxinxa4frrNek="
+    },
+    "babel-plugin-transform-exponentiation-operator": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-exponentiation-operator/-/babel-plugin-transform-exponentiation-operator-6.24.1.tgz",
+      "integrity": "sha1-KrDJx/MJj6SJB3cruBP+QejeOg4="
+    },
+    "babel-plugin-transform-regenerator": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-regenerator/-/babel-plugin-transform-regenerator-6.26.0.tgz",
+      "integrity": "sha1-4HA2lvveJ/Cj78rPi03KL3s6jy8="
+    },
+    "babel-plugin-transform-strict-mode": {
+      "version": "6.24.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.24.1.tgz",
+      "integrity": "sha1-1fr3qleKZbvlkc9e2uBKDGcCB1g="
+    },
+    "babel-plugin-undeclared-variables-check": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/babel-plugin-undeclared-variables-check/-/babel-plugin-undeclared-variables-check-1.0.2.tgz",
+      "integrity": "sha1-XPGqU52BP/ZOmWQSkK9iCWX2Xe4=",
+      "dev": true
+    },
+    "babel-plugin-undefined-to-void": {
+      "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/babel-plugin-undefined-to-void/-/babel-plugin-undefined-to-void-1.1.6.tgz",
+      "integrity": "sha1-f1eO+LeN+uYAM4XYQXph7aBuL4E=",
+      "dev": true
+    },
+    "babel-polyfill": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-polyfill/-/babel-polyfill-6.26.0.tgz",
+      "integrity": "sha1-N5k3q8Z9eJWXCtxiHyhM2WbPIVM=",
+      "dependencies": {
+        "regenerator-runtime": {
+          "version": "0.10.5",
+          "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.10.5.tgz",
+          "integrity": "sha1-M2w+/BIgrc7dosn6tntaeVWjNlg="
+        }
+      }
+    },
+    "babel-preset-env": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/babel-preset-env/-/babel-preset-env-1.6.0.tgz",
+      "integrity": "sha512-OVgtQRuOZKckrILgMA5rvctvFZPv72Gua9Rt006AiPoB0DJKGN07UmaQA+qRrYgK71MVct8fFhT0EyNWYorVew=="
+    },
+    "babel-register": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-register/-/babel-register-6.26.0.tgz",
+      "integrity": "sha1-btAhFz4vy0htestFxgCahW9kcHE="
+    },
+    "babel-runtime": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.26.0.tgz",
+      "integrity": "sha1-llxwWGaOgrVde/4E/yM3vItWR/4="
+    },
+    "babel-template": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-template/-/babel-template-6.26.0.tgz",
+      "integrity": "sha1-3gPi0WOWsGn0bdn/+FIfsaDjXgI="
+    },
+    "babel-traverse": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-traverse/-/babel-traverse-6.26.0.tgz",
+      "integrity": "sha1-RqnL1+3MYsjlwGTi0tjQ9ANXZu4="
+    },
+    "babel-types": {
+      "version": "6.26.0",
+      "resolved": "https://registry.npmjs.org/babel-types/-/babel-types-6.26.0.tgz",
+      "integrity": "sha1-o7Bz+Uq0nrb6Vc1lInozQ4BjJJc="
+    },
+    "babel6-plugin-strip-class-callcheck": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/babel6-plugin-strip-class-callcheck/-/babel6-plugin-strip-class-callcheck-6.0.0.tgz",
+      "integrity": "sha1-3oQcGr6705943gr/ssmlLuIo/d8=",
+      "dev": true
+    },
+    "babel6-plugin-strip-heimdall": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/babel6-plugin-strip-heimdall/-/babel6-plugin-strip-heimdall-6.0.1.tgz",
+      "integrity": "sha1-NfgO3ewff//cAJgR371G2ZZQcrY=",
+      "dev": true
+    },
+    "babylon": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/babylon/-/babylon-6.18.0.tgz",
+      "integrity": "sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ=="
+    },
+    "backbone": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/backbone/-/backbone-1.3.3.tgz",
+      "integrity": "sha1-TMgOp8sWMaxHSInOQPL4vGg7KZk=",
+      "dev": true
+    },
+    "backo2": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/backo2/-/backo2-1.0.2.tgz",
+      "integrity": "sha1-MasayLEpNjRj41s+u2n038+6eUc=",
+      "dev": true
+    },
+    "balanced-match": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
+      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
+    },
+    "base64-arraybuffer": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-0.1.5.tgz",
+      "integrity": "sha1-c5JncZI7Whl0etZmqlzUv5xunOg=",
+      "dev": true
+    },
+    "base64id": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/base64id/-/base64id-0.1.0.tgz",
+      "integrity": "sha1-As4P3u4M709ACA4ec+g08LG/zj8=",
+      "dev": true
+    },
+    "basic-auth": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-1.1.0.tgz",
+      "integrity": "sha1-RSIe5Cn37h5QNb4/UVM/HN/SmIQ=",
+      "dev": true
+    },
+    "better-assert": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/better-assert/-/better-assert-1.0.2.tgz",
+      "integrity": "sha1-QIZrnhueC1W0gYlDEeaPr/rrxSI=",
+      "dev": true
+    },
+    "binary-extensions": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-1.10.0.tgz",
+      "integrity": "sha1-muuabF6IY4qtFx4Wf1kAq+JINdA=",
+      "dev": true
+    },
+    "binaryextensions": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/binaryextensions/-/binaryextensions-2.0.0.tgz",
+      "integrity": "sha1-5ZfRp6ajVYotHHJBoWyZll5qpA8="
+    },
+    "blank-object": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/blank-object/-/blank-object-1.0.2.tgz",
+      "integrity": "sha1-+ZB5P76ajI3QE/syGUIL7IHV9Lk="
+    },
+    "blob": {
+      "version": "0.0.4",
+      "resolved": "https://registry.npmjs.org/blob/-/blob-0.0.4.tgz",
+      "integrity": "sha1-vPEwUspURj8w+fx+lbmkdjCpSSE=",
+      "dev": true
+    },
+    "bluebird": {
+      "version": "3.5.0",
+      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.5.0.tgz",
+      "integrity": "sha1-eRQg1/VR7qKJdFOop3ZT+WYG1nw=",
+      "dev": true
+    },
+    "body": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/body/-/body-5.1.0.tgz",
+      "integrity": "sha1-5LoM5BCkaTYyM2dgnstOZVMSUGk=",
+      "dev": true
+    },
+    "boom": {
+      "version": "0.4.2",
+      "resolved": "https://registry.npmjs.org/boom/-/boom-0.4.2.tgz",
+      "integrity": "sha1-emNune1O/O+xnO9JR6PGffrukRs=",
+      "dev": true
+    },
+    "bower-config": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/bower-config/-/bower-config-1.4.0.tgz",
+      "integrity": "sha1-FsOMETX4BxwZ8lk41hsNjL8Y0/E=",
+      "dev": true
+    },
+    "bower-endpoint-parser": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/bower-endpoint-parser/-/bower-endpoint-parser-0.2.2.tgz",
+      "integrity": "sha1-ALVlrb+rby01rd3pd+l5Yqy8s/Y=",
+      "dev": true
+    },
+    "brace-expansion": {
+      "version": "1.1.8",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.8.tgz",
+      "integrity": "sha1-wHshHHyVLsH479Uad+8NHTmQopI="
+    },
+    "braces": {
+      "version": "1.8.5",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-1.8.5.tgz",
+      "integrity": "sha1-uneWLhLf+WnWt2cR6RS3N4V79qc=",
+      "dev": true
+    },
+    "breakable": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/breakable/-/breakable-1.0.0.tgz",
+      "integrity": "sha1-eEp5eRWjjq0nutRWtVcstLuqeME=",
+      "dev": true
+    },
+    "broccoli-asset-rev": {
+      "version": "2.6.0",
+      "resolved": "https://registry.npmjs.org/broccoli-asset-rev/-/broccoli-asset-rev-2.6.0.tgz",
+      "integrity": "sha1-BjP8OgsroMLB1W+p/rezMfyDvm0=",
+      "dev": true
+    },
+    "broccoli-asset-rewrite": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/broccoli-asset-rewrite/-/broccoli-asset-rewrite-1.1.0.tgz",
+      "integrity": "sha1-d6XaVhV6oxjFkRMkXouvtGF/iDA=",
+      "dev": true
+    },
+    "broccoli-babel-transpiler": {
+      "version": "6.1.2",
+      "resolved": "https://registry.npmjs.org/broccoli-babel-transpiler/-/broccoli-babel-transpiler-6.1.2.tgz",
+      "integrity": "sha512-o1OUe5RZ5EP5+QICEmRNvWlhMvIciMisVACHu6qUPt6dE0Q0UnI5lUpWTmuXg/X+QuznqD/s1PApIpahv/QMZw=="
+    },
+    "broccoli-brocfile-loader": {
+      "version": "0.18.0",
+      "resolved": "https://registry.npmjs.org/broccoli-brocfile-loader/-/broccoli-brocfile-loader-0.18.0.tgz",
+      "integrity": "sha1-LoYCHIBcNP/I0povtyHPJz6Bnks=",
+      "dev": true
+    },
+    "broccoli-builder": {
+      "version": "0.18.8",
+      "resolved": "https://registry.npmjs.org/broccoli-builder/-/broccoli-builder-0.18.8.tgz",
+      "integrity": "sha1-/lRpTVRMPN/bAQKOgC7spldJqHk=",
+      "dev": true
+    },
+    "broccoli-caching-writer": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-3.0.3.tgz",
+      "integrity": "sha1-C9LJapc41qarWQ8HujXFFX19tHY=",
+      "dev": true
+    },
+    "broccoli-clean-css": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/broccoli-clean-css/-/broccoli-clean-css-1.1.0.tgz",
+      "integrity": "sha1-nbFD2a9+CuecJuOsWpuy1yDqGfo=",
+      "dev": true
+    },
+    "broccoli-concat": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/broccoli-concat/-/broccoli-concat-3.2.2.tgz",
+      "integrity": "sha1-hv/cUmButZC6n2uJTF7HoBb1t7k=",
+      "dev": true,
+      "dependencies": {
+        "fs-extra": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz",
+          "integrity": "sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-config-loader": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/broccoli-config-loader/-/broccoli-config-loader-1.0.1.tgz",
+      "integrity": "sha512-MDKYQ50rxhn+g17DYdfzfEM9DjTuSGu42Db37A8TQHQe8geYEcUZ4SQqZRgzdAI3aRQNlA1yBHJfOeGmOjhLIg==",
+      "dev": true
+    },
+    "broccoli-config-replace": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/broccoli-config-replace/-/broccoli-config-replace-1.1.2.tgz",
+      "integrity": "sha1-bqh52SpbrWNNETKbUfxfSq/anAA=",
+      "dev": true,
+      "dependencies": {
+        "fs-extra": {
+          "version": "0.24.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.24.0.tgz",
+          "integrity": "sha1-1OQ0KpZnXLeEZjOmCZJJMytTmVI=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-debug": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/broccoli-debug/-/broccoli-debug-0.6.3.tgz",
+      "integrity": "sha512-YqpMH2QPHNtGoauVOj715dqDfurJa9O2and1UuxfzzGpM3A9mBrXeeLdWpTt8hj/Y8u8WaG/L1UBZYffPvTHVw=="
+    },
+    "broccoli-file-creator": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/broccoli-file-creator/-/broccoli-file-creator-1.1.1.tgz",
+      "integrity": "sha1-GzW2fSFavfrdjUnutpSTw55sNFA=",
+      "dev": true,
+      "dependencies": {
+        "broccoli-kitchen-sink-helpers": {
+          "version": "0.2.9",
+          "resolved": "https://registry.npmjs.org/broccoli-kitchen-sink-helpers/-/broccoli-kitchen-sink-helpers-0.2.9.tgz",
+          "integrity": "sha1-peCYbtjXb7WYS2jD8EUNOpbjbsw=",
+          "dev": true
+        },
+        "glob": {
+          "version": "5.0.15",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-5.0.15.tgz",
+          "integrity": "sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E=",
+          "dev": true
+        },
+        "rsvp": {
+          "version": "3.0.21",
+          "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-3.0.21.tgz",
+          "integrity": "sha1-ScWI/hjvKTvNCrn05nVuasQzNZ8=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-filter": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/broccoli-filter/-/broccoli-filter-1.2.4.tgz",
+      "integrity": "sha1-QJr7lLmjptqfrIE06R4gX0DMczA=",
+      "dev": true
+    },
+    "broccoli-funnel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/broccoli-funnel/-/broccoli-funnel-1.2.0.tgz",
+      "integrity": "sha1-zdw6/F/xaFqAI0iP/3TOb7WlEpY="
+    },
+    "broccoli-funnel-reducer": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/broccoli-funnel-reducer/-/broccoli-funnel-reducer-1.0.0.tgz",
+      "integrity": "sha1-ETZbKnha7JsXlyo234fu8kxcwOo=",
+      "dev": true
+    },
+    "broccoli-kitchen-sink-helpers": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/broccoli-kitchen-sink-helpers/-/broccoli-kitchen-sink-helpers-0.3.1.tgz",
+      "integrity": "sha1-d8fBgZS5ZkFj7E/O4nk0RJJuDAY=",
+      "dependencies": {
+        "glob": {
+          "version": "5.0.15",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-5.0.15.tgz",
+          "integrity": "sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E="
+        }
+      }
+    },
+    "broccoli-lint-eslint": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/broccoli-lint-eslint/-/broccoli-lint-eslint-4.1.0.tgz",
+      "integrity": "sha1-3M+hFQ3GJAfNZv1WphknPFR5oQ4=",
+      "dev": true
+    },
+    "broccoli-merge-trees": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/broccoli-merge-trees/-/broccoli-merge-trees-1.2.4.tgz",
+      "integrity": "sha1-oAFRm7UGfwZYnZGvopQkRaLQ/bU="
+    },
+    "broccoli-middleware": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/broccoli-middleware/-/broccoli-middleware-1.0.0.tgz",
+      "integrity": "sha1-kvTh+5p5HqmGJFpwd/NcxkjasJc=",
+      "dev": true
+    },
+    "broccoli-persistent-filter": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/broccoli-persistent-filter/-/broccoli-persistent-filter-1.4.3.tgz",
+      "integrity": "sha512-JwNLDvvXJlhUmr+CHcbVhCyp33NbCIAITjQZmJY9e8QzANXh3jpFWlhSFvkWghwKA8rTAKcXkW12agtiZjxr4g=="
+    },
+    "broccoli-plugin": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/broccoli-plugin/-/broccoli-plugin-1.3.0.tgz",
+      "integrity": "sha1-vucEqOQtoIy1jlE6qkNu+38O8e4="
+    },
+    "broccoli-rollup": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/broccoli-rollup/-/broccoli-rollup-1.3.0.tgz",
+      "integrity": "sha1-Q6CneYVVurVCFwCetHCk/1oFbfA=",
+      "dev": true,
+      "dependencies": {
+        "fs-extra": {
+          "version": "0.30.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.30.0.tgz",
+          "integrity": "sha1-8jP/zAjU2n1DLapEl3aYnbHfk/A=",
+          "dev": true
+        },
+        "md5-hex": {
+          "version": "1.3.0",
+          "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-1.3.0.tgz",
+          "integrity": "sha1-0sSv6YPENwZiF5uMrRRSGRNQRsQ=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-slow-trees": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/broccoli-slow-trees/-/broccoli-slow-trees-3.0.1.tgz",
+      "integrity": "sha1-m/Kp4vjrPtOj8qvd6YjaQ3zNybQ=",
+      "dev": true
+    },
+    "broccoli-source": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/broccoli-source/-/broccoli-source-1.1.0.tgz",
+      "integrity": "sha1-VPDoLItz9GWAy7xPV48LMvyo+Ak="
+    },
+    "broccoli-sri-hash": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/broccoli-sri-hash/-/broccoli-sri-hash-2.1.2.tgz",
+      "integrity": "sha1-vGmQXtejga0yXMDQLe0HEyjr8/M=",
+      "dev": true,
+      "dependencies": {
+        "broccoli-caching-writer": {
+          "version": "2.3.1",
+          "resolved": "https://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-2.3.1.tgz",
+          "integrity": "sha1-uTz1j5Jk8AMHWGjbBXdPTn8lvQc=",
+          "dev": true
+        },
+        "broccoli-kitchen-sink-helpers": {
+          "version": "0.2.9",
+          "resolved": "https://registry.npmjs.org/broccoli-kitchen-sink-helpers/-/broccoli-kitchen-sink-helpers-0.2.9.tgz",
+          "integrity": "sha1-peCYbtjXb7WYS2jD8EUNOpbjbsw=",
+          "dev": true
+        },
+        "broccoli-plugin": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/broccoli-plugin/-/broccoli-plugin-1.1.0.tgz",
+          "integrity": "sha1-c+LPoF+OoeP8FCDEDD2efcckvwI=",
+          "dev": true
+        },
+        "glob": {
+          "version": "5.0.15",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-5.0.15.tgz",
+          "integrity": "sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E=",
+          "dev": true
+        },
+        "walk-sync": {
+          "version": "0.2.7",
+          "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.2.7.tgz",
+          "integrity": "sha1-tJvk7mhnZXrrc2l4tWop0Q+jmWk=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-stew": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/broccoli-stew/-/broccoli-stew-1.5.0.tgz",
+      "integrity": "sha1-16+MGFEdzlEOSdMIpi5Zd/RhiDw=",
+      "dev": true,
+      "dependencies": {
+        "fs-extra": {
+          "version": "2.1.2",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-2.1.2.tgz",
+          "integrity": "sha1-BGxwFjzvmq1GsOSn+kZ/si1x3jU=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-string-replace": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/broccoli-string-replace/-/broccoli-string-replace-0.1.2.tgz",
+      "integrity": "sha1-HtkvhWgK+NUDAjkl51Tk4zZ2uR8=",
+      "dev": true
+    },
+    "broccoli-uglify-sourcemap": {
+      "version": "1.5.2",
+      "resolved": "https://registry.npmjs.org/broccoli-uglify-sourcemap/-/broccoli-uglify-sourcemap-1.5.2.tgz",
+      "integrity": "sha1-BPhKsNtTkDH6hozPpWPJky1Qzts=",
+      "dev": true,
+      "dependencies": {
+        "walk-sync": {
+          "version": "0.1.3",
+          "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.1.3.tgz",
+          "integrity": "sha1-igcmGgC9ps+xviXp8QD61XVG9YM=",
+          "dev": true
+        }
+      }
+    },
+    "broccoli-unwatched-tree": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/broccoli-unwatched-tree/-/broccoli-unwatched-tree-0.1.3.tgz",
+      "integrity": "sha1-qw+4IPYThFv2eoA7qtgg9oseOq4=",
+      "dev": true
+    },
+    "broccoli-writer": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/broccoli-writer/-/broccoli-writer-0.1.1.tgz",
+      "integrity": "sha1-1NcaqPKvvGejhmuRotp5CEuWqy0=",
+      "dev": true
+    },
+    "browserslist": {
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-2.4.0.tgz",
+      "integrity": "sha512-aM2Gt4x9bVlCUteADBS6JP0F+2tMWKM1jQzUulVROtdFWFIcIVvY76AJbr7GDqy0eDhn+PcnpzzivGxY4qiaKQ=="
+    },
+    "bser": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/bser/-/bser-2.0.0.tgz",
+      "integrity": "sha1-mseNPtXZFYBP2HrLFYvHlxR6Fxk=",
+      "dev": true
+    },
+    "builtins": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/builtins/-/builtins-1.0.3.tgz",
+      "integrity": "sha1-y5T662HIaWRR2zZTThQi+U8K7og=",
+      "dev": true
+    },
+    "bytes": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-2.5.0.tgz",
+      "integrity": "sha1-TJQj6i0lLCcMQbK97+/5u2tiwGo=",
+      "dev": true
+    },
+    "calculate-cache-key-for-tree": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/calculate-cache-key-for-tree/-/calculate-cache-key-for-tree-1.1.0.tgz",
+      "integrity": "sha1-DD5CycE088neU1jA8WeTYn6pdtY=",
+      "dev": true
+    },
+    "caller-path": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/caller-path/-/caller-path-0.1.0.tgz",
+      "integrity": "sha1-lAhe9jWB7NPaqSREqP6U6CV3dR8=",
+      "dev": true
+    },
+    "callsite": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/callsite/-/callsite-1.0.0.tgz",
+      "integrity": "sha1-KAOY5dZkvXQDi28JBRU+borxvCA=",
+      "dev": true
+    },
+    "callsites": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-0.2.0.tgz",
+      "integrity": "sha1-r6uWJikQp/M8GaV3WCXGnzTjUMo=",
+      "dev": true
+    },
+    "camelcase": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-1.2.1.tgz",
+      "integrity": "sha1-m7UwTS4LVmmLLHWLCKPqqdqlijk=",
+      "dev": true
+    },
+    "can-symlink": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/can-symlink/-/can-symlink-1.0.0.tgz",
+      "integrity": "sha1-l7YH2KhLtsbiKLkC2GTstZS50hk="
+    },
+    "caniuse-lite": {
+      "version": "1.0.30000727",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30000727.tgz",
+      "integrity": "sha1-IMiVdoOY3tX5ikvqtKdsKF3vQdI="
+    },
+    "capture-exit": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/capture-exit/-/capture-exit-1.2.0.tgz",
+      "integrity": "sha1-HF/MSJ/QqwDU8ax64QcuMXP7q28=",
+      "dev": true
+    },
+    "cardinal": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/cardinal/-/cardinal-1.0.0.tgz",
+      "integrity": "sha1-UOIcGwqjdyn5N33vGWtanOyTLuk=",
+      "dev": true
+    },
+    "ceibo": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ceibo/-/ceibo-2.0.0.tgz",
+      "integrity": "sha1-mmHrBUqRwJk0WI1ORdndLDvwTu4=",
+      "dev": true
+    },
+    "center-align": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/center-align/-/center-align-0.1.3.tgz",
+      "integrity": "sha1-qg0yYptu6XIgBBHL1EYckHvCt60=",
+      "dev": true
+    },
+    "chalk": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz",
+      "integrity": "sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg="
+    },
+    "charm": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/charm/-/charm-1.0.2.tgz",
+      "integrity": "sha1-it02cVOm2aWBMxBSxAkJkdqZXjU=",
+      "dev": true
+    },
+    "chokidar": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-1.6.1.tgz",
+      "integrity": "sha1-L0RHq16W5Q+z14n9kNTHLg5McMI=",
+      "dev": true
+    },
+    "circular-json": {
+      "version": "0.3.3",
+      "resolved": "https://registry.npmjs.org/circular-json/-/circular-json-0.3.3.tgz",
+      "integrity": "sha512-UZK3NBx2Mca+b5LsG7bY183pHWt5Y1xts4P3Pz7ENTwGVnJOUWbRb3ocjvX7hx9tq/yTAdclXm9sZ38gNuem4A==",
+      "dev": true
+    },
+    "clean-base-url": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/clean-base-url/-/clean-base-url-1.0.0.tgz",
+      "integrity": "sha1-yQHPCiC5ckNbDszVLQVoJKQ1G3s=",
+      "dev": true
+    },
+    "clean-css": {
+      "version": "3.4.28",
+      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-3.4.28.tgz",
+      "integrity": "sha1-vxlF6C/ICPVWlebd6uwBQA79A/8=",
+      "dev": true,
+      "dependencies": {
+        "source-map": {
+          "version": "0.4.4",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz",
+          "integrity": "sha1-66T12pwNyZneaAMti092FzZSA2s=",
+          "dev": true
+        }
+      }
+    },
+    "clean-css-promise": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/clean-css-promise/-/clean-css-promise-0.1.1.tgz",
+      "integrity": "sha1-Q/PSyN/LK/BxSBJSzZt2QzwI7ss=",
+      "dev": true
+    },
+    "cli-cursor": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-1.0.2.tgz",
+      "integrity": "sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc=",
+      "dev": true
+    },
+    "cli-spinners": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-0.1.2.tgz",
+      "integrity": "sha1-u3ZNiOGF+54eaiofGXcjGPYF4xw=",
+      "dev": true
+    },
+    "cli-table": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/cli-table/-/cli-table-0.3.1.tgz",
+      "integrity": "sha1-9TsFJmqLGguTSz0IIebi3FkUriM=",
+      "dev": true,
+      "dependencies": {
+        "colors": {
+          "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/colors/-/colors-1.0.3.tgz",
+          "integrity": "sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs=",
+          "dev": true
+        }
+      }
+    },
+    "cli-table2": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/cli-table2/-/cli-table2-0.2.0.tgz",
+      "integrity": "sha1-LR738hig54biFFQFYtS9F3/jLZc=",
+      "dev": true,
+      "dependencies": {
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        }
+      }
+    },
+    "cli-width": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-2.2.0.tgz",
+      "integrity": "sha1-/xnt6Kml5XkyQUewwR8PvLq+1jk=",
+      "dev": true
+    },
+    "cliui": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-2.1.0.tgz",
+      "integrity": "sha1-S0dXYP+AJkx2LDoXGQMukcf+oNE=",
+      "dev": true,
+      "dependencies": {
+        "wordwrap": {
+          "version": "0.0.2",
+          "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz",
+          "integrity": "sha1-t5Zpu0LstAn4PVg8rVLKF+qhZD8=",
+          "dev": true
+        }
+      }
+    },
+    "clone": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.1.tgz",
+      "integrity": "sha1-0hfR6WERjjrJpLi7oyhVU79kfNs="
+    },
+    "co": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=",
+      "dev": true
+    },
+    "code-point-at": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz",
+      "integrity": "sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=",
+      "dev": true
+    },
+    "color-convert": {
+      "version": "1.9.0",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.0.tgz",
+      "integrity": "sha1-Gsz5fdc5uYO/mU1W/sj5WFNkG3o=",
+      "dev": true
+    },
+    "color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
+      "dev": true
+    },
+    "colors": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/colors/-/colors-1.1.2.tgz",
+      "integrity": "sha1-FopHAXVran9RoSzgyXv6KMCE7WM=",
+      "dev": true,
+      "optional": true
+    },
+    "combined-stream": {
+      "version": "0.0.7",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-0.0.7.tgz",
+      "integrity": "sha1-ATfmV7qlp1QcV6w3rF/AfXO03B8=",
+      "dev": true,
+      "optional": true
+    },
+    "commander": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-2.8.1.tgz",
+      "integrity": "sha1-Br42f+v9oMMwqh4qBy09yXYkJdQ=",
+      "dev": true
+    },
+    "commoner": {
+      "version": "0.10.8",
+      "resolved": "https://registry.npmjs.org/commoner/-/commoner-0.10.8.tgz",
+      "integrity": "sha1-NPw2cs0kOT6LtH5wyqApOBH08sU=",
+      "dev": true,
+      "dependencies": {
+        "glob": {
+          "version": "5.0.15",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-5.0.15.tgz",
+          "integrity": "sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E=",
+          "dev": true
+        }
+      }
+    },
+    "component-bind": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/component-bind/-/component-bind-1.0.0.tgz",
+      "integrity": "sha1-AMYIq33Nk4l8AAllGx06jh5zu9E=",
+      "dev": true
+    },
+    "component-emitter": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.1.2.tgz",
+      "integrity": "sha1-KWWU8nU9qmOZbSrwjRWpURbJrsM=",
+      "dev": true
+    },
+    "component-inherit": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/component-inherit/-/component-inherit-0.0.3.tgz",
+      "integrity": "sha1-ZF/ErfWLcrZJ1crmUTVhnbJv8UM=",
+      "dev": true
+    },
+    "compressible": {
+      "version": "2.0.11",
+      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.11.tgz",
+      "integrity": "sha1-FnGKdd4oPtjmBAQWJaIGRYZ5fYo=",
+      "dev": true
+    },
+    "compression": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/compression/-/compression-1.7.0.tgz",
+      "integrity": "sha1-AwyfGY8WQ6BX13anOOki2kNzAS0=",
+      "dev": true
+    },
+    "concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
+    },
+    "concat-stream": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.0.tgz",
+      "integrity": "sha1-CqxmL9Ur54lk1VMvaUeE5wEQrPc=",
+      "dev": true,
+      "dependencies": {
+        "readable-stream": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz",
+          "integrity": "sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==",
+          "dev": true
+        },
+        "string_decoder": {
+          "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz",
+          "integrity": "sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==",
+          "dev": true
+        }
+      }
+    },
+    "configstore": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/configstore/-/configstore-3.1.1.tgz",
+      "integrity": "sha512-5oNkD/L++l0O6xGXxb1EWS7SivtjfGQlRyxJsYgE0Z495/L81e2h4/d3r969hoPXuFItzNOKMtsXgYG4c7dYvw==",
+      "dev": true
+    },
+    "console-control-strings": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
+      "integrity": "sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4=",
+      "dev": true
+    },
+    "console-ui": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/console-ui/-/console-ui-1.0.3.tgz",
+      "integrity": "sha1-McUkRhtjQidp+eicFzSV2ROTchw=",
+      "dev": true
+    },
+    "consolidate": {
+      "version": "0.14.5",
+      "resolved": "https://registry.npmjs.org/consolidate/-/consolidate-0.14.5.tgz",
+      "integrity": "sha1-WiUEe8dvcwcmZ8jLUsmJiI9JTGM=",
+      "dev": true
+    },
+    "content-disposition": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.2.tgz",
+      "integrity": "sha1-DPaLud318r55YcOoUXjLhdunjLQ=",
+      "dev": true
+    },
+    "content-type": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
+      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==",
+      "dev": true
+    },
+    "continuable-cache": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/continuable-cache/-/continuable-cache-0.3.1.tgz",
+      "integrity": "sha1-vXJ6f67XfnH/OYWskzUakSczrQ8=",
+      "dev": true
+    },
+    "convert-source-map": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.5.0.tgz",
+      "integrity": "sha1-ms1whRxtXf3ZPZKC5e35SgP/RrU="
+    },
+    "cookie": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
+      "integrity": "sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s=",
+      "dev": true
+    },
+    "cookie-signature": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
+      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw=",
+      "dev": true
+    },
+    "copy-dereference": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/copy-dereference/-/copy-dereference-1.0.0.tgz",
+      "integrity": "sha1-axMYZUIP2BtBO6mUtE02VTERUrY=",
+      "dev": true
+    },
+    "core-js": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.5.1.tgz",
+      "integrity": "sha1-rmh03GaTd4m4B1T/VCjfZoGcpQs="
+    },
+    "core-object": {
+      "version": "3.1.5",
+      "resolved": "https://registry.npmjs.org/core-object/-/core-object-3.1.5.tgz",
+      "integrity": "sha512-sA2/4+/PZ/KV6CKgjrVrrUVBKCkdDO02CUlQ0YKTQoYUwPYNOtOAcWlbYhd5v/1JqYaA6oZ4sDlOU4ppVw6Wbg==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": {
+          "version": "3.2.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz",
+          "integrity": "sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==",
+          "dev": true
+        },
+        "chalk": {
+          "version": "2.1.0",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.1.0.tgz",
+          "integrity": "sha512-LUHGS/dge4ujbXMJrnihYMcL4AoOweGnw9Tp3kQuqy1Kx5c1qKjqvMJZ6nVJPMWJtKCTN72ZogH3oeSO9g9rXQ==",
+          "dev": true
+        },
+        "supports-color": {
+          "version": "4.4.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-4.4.0.tgz",
+          "integrity": "sha512-rKC3+DyXWgK0ZLKwmRsrkyHVZAjNkfzeehuFWdGGcqGDTZFH73+RH6S/RDAAxl9GusSjZSUWYLmT9N5pzXFOXQ==",
+          "dev": true
+        }
+      }
+    },
+    "core-util-is": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
+      "dev": true
+    },
+    "cross-spawn": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-5.1.0.tgz",
+      "integrity": "sha1-6L0O/uWPz/b4+UUQoKVUu/ojVEk=",
+      "dev": true
+    },
+    "cryptiles": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/cryptiles/-/cryptiles-0.2.2.tgz",
+      "integrity": "sha1-7ZH/HxetE9N0gohZT4pIoNJvMlw=",
+      "dev": true,
+      "optional": true
+    },
+    "crypto-random-string": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-1.0.0.tgz",
+      "integrity": "sha1-ojD2T1aDEOFJgAmUB5DsmVRbyn4=",
+      "dev": true
+    },
+    "ctype": {
+      "version": "0.5.3",
+      "resolved": "https://registry.npmjs.org/ctype/-/ctype-0.5.3.tgz",
+      "integrity": "sha1-gsGMJGH3QRTvFsE1IkrQuRRMoS8=",
+      "dev": true,
+      "optional": true
+    },
+    "d": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/d/-/d-1.0.0.tgz",
+      "integrity": "sha1-dUu1v+VUUdpppYuU1F9MWwRi1Y8=",
+      "dev": true
+    },
+    "dag-map": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/dag-map/-/dag-map-2.0.2.tgz",
+      "integrity": "sha1-lxS0ct6CoYQ94vuptodpOMq0TGg=",
+      "dev": true
+    },
+    "debug": {
+      "version": "2.6.8",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.8.tgz",
+      "integrity": "sha1-5zFTHKLt4n0YgiJCfaF4IdaP9Pw="
+    },
+    "decamelize": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
+      "integrity": "sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=",
+      "dev": true
+    },
+    "deep-freeze": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/deep-freeze/-/deep-freeze-0.0.1.tgz",
+      "integrity": "sha1-OgsABd4YZygZ39OM0x+RF5yJPoQ=",
+      "dev": true
+    },
+    "deep-is": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz",
+      "integrity": "sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=",
+      "dev": true
+    },
+    "defined": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/defined/-/defined-1.0.0.tgz",
+      "integrity": "sha1-yY2bzvdWdBiOEQlpFRGZ45sfppM=",
+      "dev": true
+    },
+    "defs": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/defs/-/defs-1.1.1.tgz",
+      "integrity": "sha1-siYJ8sehG6ej2xFoBcE5scr/qdI=",
+      "dev": true,
+      "dependencies": {
+        "esprima-fb": {
+          "version": "15001.1001.0-dev-harmony-fb",
+          "resolved": "https://registry.npmjs.org/esprima-fb/-/esprima-fb-15001.1001.0-dev-harmony-fb.tgz",
+          "integrity": "sha1-Q761fsJujPI3092LM+QlM1d/Jlk=",
+          "dev": true
+        },
+        "window-size": {
+          "version": "0.1.4",
+          "resolved": "https://registry.npmjs.org/window-size/-/window-size-0.1.4.tgz",
+          "integrity": "sha1-+OGqHuWlPsW/FR/6CXQqatdpeHY=",
+          "dev": true
+        },
+        "yargs": {
+          "version": "3.27.0",
+          "resolved": "https://registry.npmjs.org/yargs/-/yargs-3.27.0.tgz",
+          "integrity": "sha1-ISBUaTFuk5Ex1Z8toMbX+YIh6kA=",
+          "dev": true
+        }
+      }
+    },
+    "del": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/del/-/del-2.2.2.tgz",
+      "integrity": "sha1-wSyYHQZ4RshLyvhiz/kw2Qf/0ag=",
+      "dev": true
+    },
+    "delayed-stream": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-0.0.5.tgz",
+      "integrity": "sha1-1LH0OpPoKW3+AmlPRoC8N6MTxz8=",
+      "dev": true,
+      "optional": true
+    },
+    "delegates": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
+      "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o=",
+      "dev": true
+    },
+    "depd": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.1.tgz",
+      "integrity": "sha1-V4O04cRZ8G+lyif5kfPQbnoxA1k=",
+      "dev": true
+    },
+    "destroy": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
+      "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=",
+      "dev": true
+    },
+    "detect-file": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/detect-file/-/detect-file-0.1.0.tgz",
+      "integrity": "sha1-STXe39lIhkjgBrASlWbpOGcR6mM=",
+      "dev": true
+    },
+    "detect-indent": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-4.0.0.tgz",
+      "integrity": "sha1-920GQ1LN9Docts5hnE7jqUdd4gg="
+    },
+    "detective": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/detective/-/detective-4.5.0.tgz",
+      "integrity": "sha1-blqMaybmx6JUsca210kNmOyR7dE=",
+      "dev": true,
+      "dependencies": {
+        "acorn": {
+          "version": "4.0.13",
+          "resolved": "https://registry.npmjs.org/acorn/-/acorn-4.0.13.tgz",
+          "integrity": "sha1-EFSVrlNh1pe9GVyCUZLhrX8lN4c=",
+          "dev": true
+        }
+      }
+    },
+    "diff": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/diff/-/diff-3.3.1.tgz",
+      "integrity": "sha512-MKPHZDMB0o6yHyDryUOScqZibp914ksXwAMYMTHj6KO8UeKsRYNJD3oNCKjTqZon+V488P7N/HzXF8t7ZR95ww==",
+      "dev": true
+    },
+    "doctrine": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.0.0.tgz",
+      "integrity": "sha1-xz2NKQnSIpHhoAejlYBNqLZl/mM=",
+      "dev": true
+    },
+    "dot-prop": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-4.2.0.tgz",
+      "integrity": "sha512-tUMXrxlExSW6U2EXiiKGSBVdYgtV8qlHL+C10TsW4PURY/ic+eaysnSkwB4kA/mBlCyy/IKDJ+Lc3wbWeaXtuQ==",
+      "dev": true
+    },
+    "editions": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/editions/-/editions-1.3.3.tgz",
+      "integrity": "sha1-CQcQG92iD6w8vjNMJ8vQaI3Jmls="
+    },
+    "ee-first": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
+      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=",
+      "dev": true
+    },
+    "electron-to-chromium": {
+      "version": "1.3.21",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.3.21.tgz",
+      "integrity": "sha1-qWfr3P6O0Ag/wkTRiUAiqOgRPqI="
+    },
+    "ember-ajax": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/ember-ajax/-/ember-ajax-3.0.0.tgz",
+      "integrity": "sha1-jyHp2gwdQzz4eaqFX85GTVF+mrU=",
+      "dev": true
+    },
+    "ember-cli": {
+      "version": "2.15.1",
+      "resolved": "https://registry.npmjs.org/ember-cli/-/ember-cli-2.15.1.tgz",
+      "integrity": "sha1-dzrdPMGOUGjxxfQ6d1RO+icS5Hs=",
+      "dev": true,
+      "dependencies": {
+        "broccoli-merge-trees": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/broccoli-merge-trees/-/broccoli-merge-trees-2.0.0.tgz",
+          "integrity": "sha1-EK6kbdXOvMi499WlTwqEpPC7kLk=",
+          "dev": true
+        },
+        "glob": {
+          "version": "7.1.1",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.1.tgz",
+          "integrity": "sha1-gFIR3wT6rxxjo2ADBs31reULLsg=",
+          "dev": true
+        }
+      }
+    },
+    "ember-cli-babel": {
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-6.8.2.tgz",
+      "integrity": "sha1-6sJ4WWT0dD9MgVzVPGKI8AzAh9c="
+    },
+    "ember-cli-broccoli-sane-watcher": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/ember-cli-broccoli-sane-watcher/-/ember-cli-broccoli-sane-watcher-2.0.4.tgz",
+      "integrity": "sha1-9D9C91t1CcIS+5Js2a6oauGSZMY=",
+      "dev": true
+    },
+    "ember-cli-dependency-checker": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/ember-cli-dependency-checker/-/ember-cli-dependency-checker-2.0.1.tgz",
+      "integrity": "sha512-eL7P3nCmekZ7pR1M+lTjZm2FnxTRQ14eVDbcGIFeku5v5GrCSSLYUB4wqSBlkhCmakOdmgXzAnHIpQGmk4WBuw==",
+      "dev": true
+    },
+    "ember-cli-eslint": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-eslint/-/ember-cli-eslint-4.2.0.tgz",
+      "integrity": "sha1-Pst7Dmf9rdHmjqugX7r/sDvNeGQ=",
+      "dev": true
+    },
+    "ember-cli-get-component-path-option": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-get-component-path-option/-/ember-cli-get-component-path-option-1.0.0.tgz",
+      "integrity": "sha1-DXtZVVni+QUKvtgE8djv8bCLx3E=",
+      "dev": true
+    },
+    "ember-cli-get-dependency-depth": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-get-dependency-depth/-/ember-cli-get-dependency-depth-1.0.0.tgz",
+      "integrity": "sha1-4K/s+CotUvAPKKtGgpUoGuw2jRE=",
+      "dev": true
+    },
+    "ember-cli-htmlbars": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/ember-cli-htmlbars/-/ember-cli-htmlbars-2.0.3.tgz",
+      "integrity": "sha512-oyWtJebOwxAqWZwMc0NKFJ8FJdxVixM7zl0FaXq1vTAG6bOgnU7yAhXEASlaO5f+PptZueZfOpdpvRwZW/Gk1A=="
+    },
+    "ember-cli-htmlbars-inline-precompile": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/ember-cli-htmlbars-inline-precompile/-/ember-cli-htmlbars-inline-precompile-1.0.2.tgz",
+      "integrity": "sha1-W1RPZk1dmRHwjNl5xfcNjLDKKt0=",
+      "dev": true
+    },
+    "ember-cli-inject-live-reload": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-inject-live-reload/-/ember-cli-inject-live-reload-1.7.0.tgz",
+      "integrity": "sha512-+0zOwJlf4iR5NcvyeU7E7xU1qDfniP/+mXfNTfAEhHO2eE9sjQvasKV84O1sIIyLk2LMIjFPbGt7uv5fQcIGwg==",
+      "dev": true
+    },
+    "ember-cli-is-package-missing": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-is-package-missing/-/ember-cli-is-package-missing-1.0.0.tgz",
+      "integrity": "sha1-bmGEyvuSY13ZPKbJRrEEKS1OM5A=",
+      "dev": true
+    },
+    "ember-cli-legacy-blueprints": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/ember-cli-legacy-blueprints/-/ember-cli-legacy-blueprints-0.1.5.tgz",
+      "integrity": "sha1-k8FcokLsUQfWKor37DD2rFOPOtk=",
+      "dev": true,
+      "dependencies": {
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "exists-sync": {
+          "version": "0.0.3",
+          "resolved": "https://registry.npmjs.org/exists-sync/-/exists-sync-0.0.3.tgz",
+          "integrity": "sha1-uRAAC+27ETs3i4L19adjgQdiLc8=",
+          "dev": true
+        },
+        "fs-extra": {
+          "version": "0.24.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.24.0.tgz",
+          "integrity": "sha1-1OQ0KpZnXLeEZjOmCZJJMytTmVI=",
+          "dev": true
+        }
+      }
+    },
+    "ember-cli-lodash-subset": {
+      "version": "1.0.12",
+      "resolved": "https://registry.npmjs.org/ember-cli-lodash-subset/-/ember-cli-lodash-subset-1.0.12.tgz",
+      "integrity": "sha1-ry5366XcsNd/MwjTpv19NFD25Tc=",
+      "dev": true
+    },
+    "ember-cli-mirage": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/ember-cli-mirage/-/ember-cli-mirage-0.3.1.tgz",
+      "integrity": "sha1-JUHWJPSZT64xiPzXanaOjq/3HEs=",
+      "dev": true,
+      "dependencies": {
+        "babel-core": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-5.8.38.tgz",
+          "integrity": "sha1-H8ruedfmG3ULALjlT238nQr4ZVg=",
+          "dev": true
+        },
+        "babylon": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babylon/-/babylon-5.8.38.tgz",
+          "integrity": "sha1-7JsSCxG/bM1Bc6GL8hfmC3mFn/0=",
+          "dev": true
+        },
+        "bluebird": {
+          "version": "2.11.0",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.11.0.tgz",
+          "integrity": "sha1-U0uQM8AiyVecVro7Plpcqvu2UOE=",
+          "dev": true
+        },
+        "broccoli-babel-transpiler": {
+          "version": "5.7.2",
+          "resolved": "https://registry.npmjs.org/broccoli-babel-transpiler/-/broccoli-babel-transpiler-5.7.2.tgz",
+          "integrity": "sha512-vFQ+aSR9J81fm3MXXQGgDxswYINHl2p5duLvRLVnpmgPDNdpdsa30gh3xnmhzR/GwWFBfUNle7aYxthlgvsN0w==",
+          "dev": true,
+          "dependencies": {
+            "clone": {
+              "version": "0.2.0",
+              "resolved": "https://registry.npmjs.org/clone/-/clone-0.2.0.tgz",
+              "integrity": "sha1-xhJqkK1Pctv1rNskPMN3JP6T/B8=",
+              "dev": true
+            }
+          }
+        },
+        "core-js": {
+          "version": "1.2.7",
+          "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
+          "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY=",
+          "dev": true
+        },
+        "detect-indent": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-3.0.1.tgz",
+          "integrity": "sha1-ncXl3bzu+DJXZLlFGwK8bVQIT3U=",
+          "dev": true
+        },
+        "ember-cli-babel": {
+          "version": "5.2.4",
+          "resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-5.2.4.tgz",
+          "integrity": "sha1-XOT0awjtb20h6Hhhn7aJcZ1ujhM=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "ember-inflector": {
+          "version": "1.12.1",
+          "resolved": "https://registry.npmjs.org/ember-inflector/-/ember-inflector-1.12.1.tgz",
+          "integrity": "sha1-2L0sovMntDlyD4mSP+YU1Gtdoco=",
+          "dev": true
+        },
+        "exists-sync": {
+          "version": "0.0.3",
+          "resolved": "https://registry.npmjs.org/exists-sync/-/exists-sync-0.0.3.tgz",
+          "integrity": "sha1-uRAAC+27ETs3i4L19adjgQdiLc8=",
+          "dev": true
+        },
+        "globals": {
+          "version": "6.4.1",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-6.4.1.tgz",
+          "integrity": "sha1-hJgDKzttHMge68X3lpDY/in6v08=",
+          "dev": true
+        },
+        "home-or-tmp": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-1.0.0.tgz",
+          "integrity": "sha1-S58eQIAMPlDGwn94FnavzOcfOYU=",
+          "dev": true
+        },
+        "js-tokens": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-1.0.1.tgz",
+          "integrity": "sha1-zENaXIuUrRWst5gxQPyAGCyJrq4=",
+          "dev": true
+        },
+        "json5": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/json5/-/json5-0.4.0.tgz",
+          "integrity": "sha1-BUNS5MTIDIbAkjh31EneF2pzLI0=",
+          "dev": true
+        },
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        },
+        "minimatch": {
+          "version": "2.0.10",
+          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz",
+          "integrity": "sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=",
+          "dev": true
+        },
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        },
+        "path-exists": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-1.0.0.tgz",
+          "integrity": "sha1-1aiZjrce83p0w06w2eum6HjuoIE=",
+          "dev": true
+        },
+        "repeating": {
+          "version": "1.1.3",
+          "resolved": "https://registry.npmjs.org/repeating/-/repeating-1.1.3.tgz",
+          "integrity": "sha1-PUEUIYh3U3SU+X93+Xhfq4EPpKw=",
+          "dev": true
+        },
+        "source-map-support": {
+          "version": "0.2.10",
+          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.2.10.tgz",
+          "integrity": "sha1-6lo5AKHByyUJagrozFwrSxDe09w=",
+          "dev": true,
+          "dependencies": {
+            "source-map": {
+              "version": "0.1.32",
+              "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.1.32.tgz",
+              "integrity": "sha1-yLbBZ3l7pHQKjqMyUhYv8IWRsmY=",
+              "dev": true
+            }
+          }
+        }
+      }
+    },
+    "ember-cli-node-assets": {
+      "version": "0.1.6",
+      "resolved": "https://registry.npmjs.org/ember-cli-node-assets/-/ember-cli-node-assets-0.1.6.tgz",
+      "integrity": "sha1-ZIiilJBIyAGtbZ4zdTx7zjL8EUY=",
+      "dev": true
+    },
+    "ember-cli-normalize-entity-name": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-normalize-entity-name/-/ember-cli-normalize-entity-name-1.0.0.tgz",
+      "integrity": "sha1-CxT3vLxZmqEXtf3cgeT9A8S61bc=",
+      "dev": true
+    },
+    "ember-cli-page-object": {
+      "version": "1.11.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-page-object/-/ember-cli-page-object-1.11.0.tgz",
+      "integrity": "sha1-pRJWB4+Yq7QbOI4aL0GqZ/Pa5WY=",
+      "dev": true,
+      "dependencies": {
+        "babel-core": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-5.8.38.tgz",
+          "integrity": "sha1-H8ruedfmG3ULALjlT238nQr4ZVg=",
+          "dev": true
+        },
+        "babylon": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babylon/-/babylon-5.8.38.tgz",
+          "integrity": "sha1-7JsSCxG/bM1Bc6GL8hfmC3mFn/0=",
+          "dev": true
+        },
+        "bluebird": {
+          "version": "2.11.0",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.11.0.tgz",
+          "integrity": "sha1-U0uQM8AiyVecVro7Plpcqvu2UOE=",
+          "dev": true
+        },
+        "broccoli-babel-transpiler": {
+          "version": "5.7.2",
+          "resolved": "https://registry.npmjs.org/broccoli-babel-transpiler/-/broccoli-babel-transpiler-5.7.2.tgz",
+          "integrity": "sha512-vFQ+aSR9J81fm3MXXQGgDxswYINHl2p5duLvRLVnpmgPDNdpdsa30gh3xnmhzR/GwWFBfUNle7aYxthlgvsN0w==",
+          "dev": true,
+          "dependencies": {
+            "clone": {
+              "version": "0.2.0",
+              "resolved": "https://registry.npmjs.org/clone/-/clone-0.2.0.tgz",
+              "integrity": "sha1-xhJqkK1Pctv1rNskPMN3JP6T/B8=",
+              "dev": true
+            }
+          }
+        },
+        "core-js": {
+          "version": "1.2.7",
+          "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
+          "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY=",
+          "dev": true
+        },
+        "detect-indent": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-3.0.1.tgz",
+          "integrity": "sha1-ncXl3bzu+DJXZLlFGwK8bVQIT3U=",
+          "dev": true
+        },
+        "ember-cli-babel": {
+          "version": "5.2.4",
+          "resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-5.2.4.tgz",
+          "integrity": "sha1-XOT0awjtb20h6Hhhn7aJcZ1ujhM=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "globals": {
+          "version": "6.4.1",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-6.4.1.tgz",
+          "integrity": "sha1-hJgDKzttHMge68X3lpDY/in6v08=",
+          "dev": true
+        },
+        "home-or-tmp": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-1.0.0.tgz",
+          "integrity": "sha1-S58eQIAMPlDGwn94FnavzOcfOYU=",
+          "dev": true
+        },
+        "js-tokens": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-1.0.1.tgz",
+          "integrity": "sha1-zENaXIuUrRWst5gxQPyAGCyJrq4=",
+          "dev": true
+        },
+        "json5": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/json5/-/json5-0.4.0.tgz",
+          "integrity": "sha1-BUNS5MTIDIbAkjh31EneF2pzLI0=",
+          "dev": true
+        },
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        },
+        "minimatch": {
+          "version": "2.0.10",
+          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz",
+          "integrity": "sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=",
+          "dev": true
+        },
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        },
+        "path-exists": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-1.0.0.tgz",
+          "integrity": "sha1-1aiZjrce83p0w06w2eum6HjuoIE=",
+          "dev": true
+        },
+        "repeating": {
+          "version": "1.1.3",
+          "resolved": "https://registry.npmjs.org/repeating/-/repeating-1.1.3.tgz",
+          "integrity": "sha1-PUEUIYh3U3SU+X93+Xhfq4EPpKw=",
+          "dev": true
+        },
+        "source-map-support": {
+          "version": "0.2.10",
+          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.2.10.tgz",
+          "integrity": "sha1-6lo5AKHByyUJagrozFwrSxDe09w=",
+          "dev": true,
+          "dependencies": {
+            "source-map": {
+              "version": "0.1.32",
+              "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.1.32.tgz",
+              "integrity": "sha1-yLbBZ3l7pHQKjqMyUhYv8IWRsmY=",
+              "dev": true
+            }
+          }
+        }
+      }
+    },
+    "ember-cli-path-utils": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-path-utils/-/ember-cli-path-utils-1.0.0.tgz",
+      "integrity": "sha1-Tjmvi1UwHN3FAXc5t3qAT7ogce0=",
+      "dev": true
+    },
+    "ember-cli-preprocess-registry": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/ember-cli-preprocess-registry/-/ember-cli-preprocess-registry-3.1.1.tgz",
+      "integrity": "sha1-OEVsIcTStklFhQz57Gjba6dpKIo=",
+      "dev": true,
+      "dependencies": {
+        "exists-sync": {
+          "version": "0.0.3",
+          "resolved": "https://registry.npmjs.org/exists-sync/-/exists-sync-0.0.3.tgz",
+          "integrity": "sha1-uRAAC+27ETs3i4L19adjgQdiLc8=",
+          "dev": true
+        }
+      }
+    },
+    "ember-cli-qunit": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/ember-cli-qunit/-/ember-cli-qunit-4.0.1.tgz",
+      "integrity": "sha1-kFqgdiCun9tBfH5I1FvSJ3ti+GQ=",
+      "dev": true,
+      "dependencies": {
+        "broccoli-funnel": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/broccoli-funnel/-/broccoli-funnel-2.0.1.tgz",
+          "integrity": "sha512-C8Lnp9TVsSSiZMGEF16C0dCiNg2oJqUKwuZ1K4kVC6qRPG/2Cj/rtB5kRCC9qEbwqhX71bDbfHROx0L3J7zXQg==",
+          "dev": true
+        },
+        "broccoli-merge-trees": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/broccoli-merge-trees/-/broccoli-merge-trees-2.0.0.tgz",
+          "integrity": "sha1-EK6kbdXOvMi499WlTwqEpPC7kLk=",
+          "dev": true
+        }
+      }
+    },
+    "ember-cli-shims": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-shims/-/ember-cli-shims-1.1.0.tgz",
+      "integrity": "sha1-DjuKBIvoZbT4HMgdOX/x7rE/dbY=",
+      "dev": true,
+      "dependencies": {
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        }
+      }
+    },
+    "ember-cli-sri": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/ember-cli-sri/-/ember-cli-sri-2.1.1.tgz",
+      "integrity": "sha1-lxYgk0pLkYPPeSPMA+F4uDqpB/0=",
+      "dev": true
+    },
+    "ember-cli-string-utils": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-string-utils/-/ember-cli-string-utils-1.1.0.tgz",
+      "integrity": "sha1-ObZ3/CgF9VFzc1N2/O8njqpEUqE=",
+      "dev": true
+    },
+    "ember-cli-test-info": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-test-info/-/ember-cli-test-info-1.0.0.tgz",
+      "integrity": "sha1-7U6WDySel1I8+JHkrtIHLOhFd7Q=",
+      "dev": true
+    },
+    "ember-cli-test-loader": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-test-loader/-/ember-cli-test-loader-2.2.0.tgz",
+      "integrity": "sha512-mlSXX9SciIRwGkFTX6XGyJYp4ry6oCFZRxh5jJ7VH8UXLTNx2ZACtDTwaWtNhYrWXgKyiDUvmD8enD56aePWRA==",
+      "dev": true
+    },
+    "ember-cli-uglify": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-uglify/-/ember-cli-uglify-1.2.0.tgz",
+      "integrity": "sha1-MgjDK1S8J4MFbouw1c/pu68X/7I=",
+      "dev": true
+    },
+    "ember-cli-valid-component-name": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-valid-component-name/-/ember-cli-valid-component-name-1.0.0.tgz",
+      "integrity": "sha1-cVUM44fgIzBl8wswsVEKot++h+8=",
+      "dev": true
+    },
+    "ember-cli-version-checker": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-2.0.0.tgz",
+      "integrity": "sha1-4ffY5M3NdSrDXxYR5Nqog220xMc="
+    },
+    "ember-cli-yuidoc": {
+      "version": "0.8.8",
+      "resolved": "https://registry.npmjs.org/ember-cli-yuidoc/-/ember-cli-yuidoc-0.8.8.tgz",
+      "integrity": "sha1-OFi6r4U4ipdgJPneQPEHX+pY9gY=",
+      "dev": true,
+      "dependencies": {
+        "broccoli-caching-writer": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-2.0.4.tgz",
+          "integrity": "sha1-2ZXX0ZdykuSY943wWIcjD8tKXiw=",
+          "dev": true,
+          "dependencies": {
+            "rsvp": {
+              "version": "3.6.2",
+              "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-3.6.2.tgz",
+              "integrity": "sha512-OfWGQTb9vnwRjwtA2QwpG2ICclHC3pgXZO5xt8H2EfgDquO0qVdSb5T88L4qJVAEugbS56pAuV4XZM58UX8ulw==",
+              "dev": true
+            }
+          }
+        },
+        "broccoli-kitchen-sink-helpers": {
+          "version": "0.2.9",
+          "resolved": "https://registry.npmjs.org/broccoli-kitchen-sink-helpers/-/broccoli-kitchen-sink-helpers-0.2.9.tgz",
+          "integrity": "sha1-peCYbtjXb7WYS2jD8EUNOpbjbsw=",
+          "dev": true
+        },
+        "broccoli-plugin": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/broccoli-plugin/-/broccoli-plugin-1.1.0.tgz",
+          "integrity": "sha1-c+LPoF+OoeP8FCDEDD2efcckvwI=",
+          "dev": true
+        },
+        "glob": {
+          "version": "5.0.15",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-5.0.15.tgz",
+          "integrity": "sha1-G8k2ueAvSmA/zCIuz3Yz0wuLk7E=",
+          "dev": true
+        },
+        "rsvp": {
+          "version": "3.0.14",
+          "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-3.0.14.tgz",
+          "integrity": "sha1-nSlozzbYeNO7mppaS44f9Vp23TE=",
+          "dev": true
+        },
+        "walk-sync": {
+          "version": "0.2.7",
+          "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.2.7.tgz",
+          "integrity": "sha1-tJvk7mhnZXrrc2l4tWop0Q+jmWk=",
+          "dev": true
+        }
+      }
+    },
+    "ember-data": {
+      "version": "2.15.0",
+      "resolved": "https://registry.npmjs.org/ember-data/-/ember-data-2.15.0.tgz",
+      "integrity": "sha512-eDoRu4x3JR3KG90/iTHRziaRiWupJ2nyanxdijM55FJQCSL0TGCuHPQm3WRaXtBBZBeiC+gjkcDFa5pXe9kuug==",
+      "dev": true,
+      "dependencies": {
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "exists-sync": {
+          "version": "0.0.3",
+          "resolved": "https://registry.npmjs.org/exists-sync/-/exists-sync-0.0.3.tgz",
+          "integrity": "sha1-uRAAC+27ETs3i4L19adjgQdiLc8=",
+          "dev": true
+        },
+        "heimdalljs": {
+          "version": "0.3.3",
+          "resolved": "https://registry.npmjs.org/heimdalljs/-/heimdalljs-0.3.3.tgz",
+          "integrity": "sha1-6S0sb3f9RtW/ULYQ0orTF1UFTQs=",
+          "dev": true
+        },
+        "rsvp": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-3.2.1.tgz",
+          "integrity": "sha1-B8tKXfJa3Z6Cbrxn3Mn9idsn2Eo=",
+          "dev": true
+        },
+        "testem": {
+          "version": "1.15.0",
+          "resolved": "https://registry.npmjs.org/testem/-/testem-1.15.0.tgz",
+          "integrity": "sha1-LjqeesKfFqIPcY6wxLEuekSQBnU=",
+          "dev": true
+        }
+      }
+    },
+    "ember-disable-prototype-extensions": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/ember-disable-prototype-extensions/-/ember-disable-prototype-extensions-1.1.3.tgz",
+      "integrity": "sha1-GWkTUhdlS14nj5/i2dTkm1cgMp4=",
+      "dev": true
+    },
+    "ember-export-application-global": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ember-export-application-global/-/ember-export-application-global-2.0.0.tgz",
+      "integrity": "sha1-jW12GayKGj+MQwA1Sesh6+1oW9I=",
+      "dev": true
+    },
+    "ember-inflector": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/ember-inflector/-/ember-inflector-2.0.1.tgz",
+      "integrity": "sha512-CFiWADOwuyRJwlOm2/8qvCRPLPylowvew+2vgFUFjd6UDvunwQfOJ/LS06PqnNcTfKN5Wu3Rcvj81NzIVkJmSg==",
+      "dev": true
+    },
+    "ember-load-initializers": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/ember-load-initializers/-/ember-load-initializers-1.0.0.tgz",
+      "integrity": "sha1-SRnq8G9t/sp+E0Yz2MBabJkh5uc=",
+      "dev": true
+    },
+    "ember-lodash": {
+      "version": "4.17.5",
+      "resolved": "https://registry.npmjs.org/ember-lodash/-/ember-lodash-4.17.5.tgz",
+      "integrity": "sha512-KNXi6nosrNOyYmop4J+z3lBskZQe8077nJufY7ZqjCdKNrFH9cZ0FpwANZKcYqJe+srwp4RPOW9RaMdjTdFSvw==",
+      "dev": true,
+      "dependencies": {
+        "broccoli-merge-trees": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/broccoli-merge-trees/-/broccoli-merge-trees-2.0.0.tgz",
+          "integrity": "sha1-EK6kbdXOvMi499WlTwqEpPC7kLk=",
+          "dev": true
+        }
+      }
+    },
+    "ember-qunit": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/ember-qunit/-/ember-qunit-2.2.0.tgz",
+      "integrity": "sha512-iMQT1ZCgSQpiK/VTbJjeQWNzsi4742wmPe08pzgEAf9lCruy9s3tmviz4fF98jDlPdV8w5LMIkkXQX7L2eTp6g==",
+      "dev": true
+    },
+    "ember-qunit-assert-helpers": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/ember-qunit-assert-helpers/-/ember-qunit-assert-helpers-0.2.0.tgz",
+      "integrity": "sha512-L23+Y7HzoogtUvjNNaTWyqzlJqAG0K0FHKJ6TmAULmKYgJFXR2Ntcct7QHBY8c+cHSZEeVMre4rn5nkO91j6aA==",
+      "dev": true,
+      "dependencies": {
+        "babel-core": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-5.8.38.tgz",
+          "integrity": "sha1-H8ruedfmG3ULALjlT238nQr4ZVg=",
+          "dev": true
+        },
+        "babylon": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babylon/-/babylon-5.8.38.tgz",
+          "integrity": "sha1-7JsSCxG/bM1Bc6GL8hfmC3mFn/0=",
+          "dev": true
+        },
+        "bluebird": {
+          "version": "2.11.0",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.11.0.tgz",
+          "integrity": "sha1-U0uQM8AiyVecVro7Plpcqvu2UOE=",
+          "dev": true
+        },
+        "broccoli-babel-transpiler": {
+          "version": "5.7.2",
+          "resolved": "https://registry.npmjs.org/broccoli-babel-transpiler/-/broccoli-babel-transpiler-5.7.2.tgz",
+          "integrity": "sha512-vFQ+aSR9J81fm3MXXQGgDxswYINHl2p5duLvRLVnpmgPDNdpdsa30gh3xnmhzR/GwWFBfUNle7aYxthlgvsN0w==",
+          "dev": true,
+          "dependencies": {
+            "clone": {
+              "version": "0.2.0",
+              "resolved": "https://registry.npmjs.org/clone/-/clone-0.2.0.tgz",
+              "integrity": "sha1-xhJqkK1Pctv1rNskPMN3JP6T/B8=",
+              "dev": true
+            }
+          }
+        },
+        "core-js": {
+          "version": "1.2.7",
+          "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
+          "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY=",
+          "dev": true
+        },
+        "detect-indent": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-3.0.1.tgz",
+          "integrity": "sha1-ncXl3bzu+DJXZLlFGwK8bVQIT3U=",
+          "dev": true
+        },
+        "ember-cli-babel": {
+          "version": "5.2.4",
+          "resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-5.2.4.tgz",
+          "integrity": "sha1-XOT0awjtb20h6Hhhn7aJcZ1ujhM=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "globals": {
+          "version": "6.4.1",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-6.4.1.tgz",
+          "integrity": "sha1-hJgDKzttHMge68X3lpDY/in6v08=",
+          "dev": true
+        },
+        "home-or-tmp": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-1.0.0.tgz",
+          "integrity": "sha1-S58eQIAMPlDGwn94FnavzOcfOYU=",
+          "dev": true
+        },
+        "js-tokens": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-1.0.1.tgz",
+          "integrity": "sha1-zENaXIuUrRWst5gxQPyAGCyJrq4=",
+          "dev": true
+        },
+        "json5": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/json5/-/json5-0.4.0.tgz",
+          "integrity": "sha1-BUNS5MTIDIbAkjh31EneF2pzLI0=",
+          "dev": true
+        },
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        },
+        "minimatch": {
+          "version": "2.0.10",
+          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz",
+          "integrity": "sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=",
+          "dev": true
+        },
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        },
+        "path-exists": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-1.0.0.tgz",
+          "integrity": "sha1-1aiZjrce83p0w06w2eum6HjuoIE=",
+          "dev": true
+        },
+        "repeating": {
+          "version": "1.1.3",
+          "resolved": "https://registry.npmjs.org/repeating/-/repeating-1.1.3.tgz",
+          "integrity": "sha1-PUEUIYh3U3SU+X93+Xhfq4EPpKw=",
+          "dev": true
+        },
+        "source-map-support": {
+          "version": "0.2.10",
+          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.2.10.tgz",
+          "integrity": "sha1-6lo5AKHByyUJagrozFwrSxDe09w=",
+          "dev": true,
+          "dependencies": {
+            "source-map": {
+              "version": "0.1.32",
+              "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.1.32.tgz",
+              "integrity": "sha1-yLbBZ3l7pHQKjqMyUhYv8IWRsmY=",
+              "dev": true
+            }
+          }
+        }
+      }
+    },
+    "ember-resolver": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/ember-resolver/-/ember-resolver-4.5.0.tgz",
+      "integrity": "sha512-BX8yvFWIbrh1IVZmpIY/14WUb7nD8tQzT5s0aUG/Nwq2LVqD/uNAEPcsq0XS2gLvKawwDQEQN30ptcvJApQBhA==",
+      "dev": true,
+      "dependencies": {
+        "broccoli-merge-trees": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/broccoli-merge-trees/-/broccoli-merge-trees-2.0.0.tgz",
+          "integrity": "sha1-EK6kbdXOvMi499WlTwqEpPC7kLk=",
+          "dev": true
+        }
+      }
+    },
+    "ember-rfc176-data": {
+      "version": "0.2.7",
+      "resolved": "https://registry.npmjs.org/ember-rfc176-data/-/ember-rfc176-data-0.2.7.tgz",
+      "integrity": "sha512-pJE2w+sI22UDsYmudI4nCp3WcImpUzXwe9qHfpOcEu3yM/HD1nGpDRt6kZD0KUnDmqkLeik/nYyzEwN/NU6xxA=="
+    },
+    "ember-router-generator": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/ember-router-generator/-/ember-router-generator-1.2.3.tgz",
+      "integrity": "sha1-jtLKhv8yM2MSD8FCeBkeno8TFe4=",
+      "dev": true
+    },
+    "ember-runtime-enumerable-includes-polyfill": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ember-runtime-enumerable-includes-polyfill/-/ember-runtime-enumerable-includes-polyfill-2.0.0.tgz",
+      "integrity": "sha1-bpuhGLyQnR13Yt4bA6VQ2JVTCKk=",
+      "dev": true,
+      "dependencies": {
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        }
+      }
+    },
+    "ember-source": {
+      "version": "2.15.0",
+      "resolved": "https://registry.npmjs.org/ember-source/-/ember-source-2.15.0.tgz",
+      "integrity": "sha1-kBy+Or7gkpI3Kwb2qo3TQmg74tU=",
+      "dev": true,
+      "dependencies": {
+        "broccoli-merge-trees": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/broccoli-merge-trees/-/broccoli-merge-trees-2.0.0.tgz",
+          "integrity": "sha1-EK6kbdXOvMi499WlTwqEpPC7kLk=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        }
+      }
+    },
+    "ember-test-helpers": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/ember-test-helpers/-/ember-test-helpers-0.6.3.tgz",
+      "integrity": "sha1-+GTN9vTnXz+HaNZTd4W1q26C2Qc=",
+      "dev": true
+    },
+    "ember-to-string": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/ember-to-string/-/ember-to-string-1.0.4.tgz",
+      "integrity": "sha1-+L9re71po9u4ZPWZrTkzGqJddZA=",
+      "dev": true,
+      "dependencies": {
+        "babel-core": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-5.8.38.tgz",
+          "integrity": "sha1-H8ruedfmG3ULALjlT238nQr4ZVg=",
+          "dev": true
+        },
+        "babylon": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babylon/-/babylon-5.8.38.tgz",
+          "integrity": "sha1-7JsSCxG/bM1Bc6GL8hfmC3mFn/0=",
+          "dev": true
+        },
+        "bluebird": {
+          "version": "2.11.0",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.11.0.tgz",
+          "integrity": "sha1-U0uQM8AiyVecVro7Plpcqvu2UOE=",
+          "dev": true
+        },
+        "broccoli-babel-transpiler": {
+          "version": "5.7.2",
+          "resolved": "https://registry.npmjs.org/broccoli-babel-transpiler/-/broccoli-babel-transpiler-5.7.2.tgz",
+          "integrity": "sha512-vFQ+aSR9J81fm3MXXQGgDxswYINHl2p5duLvRLVnpmgPDNdpdsa30gh3xnmhzR/GwWFBfUNle7aYxthlgvsN0w==",
+          "dev": true,
+          "dependencies": {
+            "clone": {
+              "version": "0.2.0",
+              "resolved": "https://registry.npmjs.org/clone/-/clone-0.2.0.tgz",
+              "integrity": "sha1-xhJqkK1Pctv1rNskPMN3JP6T/B8=",
+              "dev": true
+            }
+          }
+        },
+        "core-js": {
+          "version": "1.2.7",
+          "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
+          "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY=",
+          "dev": true
+        },
+        "detect-indent": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-3.0.1.tgz",
+          "integrity": "sha1-ncXl3bzu+DJXZLlFGwK8bVQIT3U=",
+          "dev": true
+        },
+        "ember-cli-babel": {
+          "version": "5.2.4",
+          "resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-5.2.4.tgz",
+          "integrity": "sha1-XOT0awjtb20h6Hhhn7aJcZ1ujhM=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "globals": {
+          "version": "6.4.1",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-6.4.1.tgz",
+          "integrity": "sha1-hJgDKzttHMge68X3lpDY/in6v08=",
+          "dev": true
+        },
+        "home-or-tmp": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-1.0.0.tgz",
+          "integrity": "sha1-S58eQIAMPlDGwn94FnavzOcfOYU=",
+          "dev": true
+        },
+        "js-tokens": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-1.0.1.tgz",
+          "integrity": "sha1-zENaXIuUrRWst5gxQPyAGCyJrq4=",
+          "dev": true
+        },
+        "json5": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/json5/-/json5-0.4.0.tgz",
+          "integrity": "sha1-BUNS5MTIDIbAkjh31EneF2pzLI0=",
+          "dev": true
+        },
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        },
+        "minimatch": {
+          "version": "2.0.10",
+          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz",
+          "integrity": "sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=",
+          "dev": true
+        },
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        },
+        "path-exists": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-1.0.0.tgz",
+          "integrity": "sha1-1aiZjrce83p0w06w2eum6HjuoIE=",
+          "dev": true
+        },
+        "repeating": {
+          "version": "1.1.3",
+          "resolved": "https://registry.npmjs.org/repeating/-/repeating-1.1.3.tgz",
+          "integrity": "sha1-PUEUIYh3U3SU+X93+Xhfq4EPpKw=",
+          "dev": true
+        },
+        "source-map-support": {
+          "version": "0.2.10",
+          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.2.10.tgz",
+          "integrity": "sha1-6lo5AKHByyUJagrozFwrSxDe09w=",
+          "dev": true,
+          "dependencies": {
+            "source-map": {
+              "version": "0.1.32",
+              "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.1.32.tgz",
+              "integrity": "sha1-yLbBZ3l7pHQKjqMyUhYv8IWRsmY=",
+              "dev": true
+            }
+          }
+        }
+      }
+    },
+    "ember-try": {
+      "version": "0.2.17",
+      "resolved": "https://registry.npmjs.org/ember-try/-/ember-try-0.2.17.tgz",
+      "integrity": "sha1-D//2h2MCkbTPlPWxlucowaktiuw=",
+      "dev": true,
+      "dependencies": {
+        "core-object": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/core-object/-/core-object-1.1.0.tgz",
+          "integrity": "sha1-htY5GHM8+doaWq5ynmLAqI5mrQo=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "fs-extra": {
+          "version": "0.26.7",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.26.7.tgz",
+          "integrity": "sha1-muH92UiXeY7at20JGM9C0MMYT6k=",
+          "dev": true
+        }
+      }
+    },
+    "ember-try-config": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/ember-try-config/-/ember-try-config-2.1.0.tgz",
+      "integrity": "sha1-4OFWIppUI0aljub2rWBRBMmO3+A=",
+      "dev": true
+    },
+    "ember-version-is": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/ember-version-is/-/ember-version-is-0.0.3.tgz",
+      "integrity": "sha1-fVTsOe1eA/DfEc+KXiLcILCBCxo=",
+      "dev": true,
+      "dependencies": {
+        "babel-core": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babel-core/-/babel-core-5.8.38.tgz",
+          "integrity": "sha1-H8ruedfmG3ULALjlT238nQr4ZVg=",
+          "dev": true
+        },
+        "babylon": {
+          "version": "5.8.38",
+          "resolved": "https://registry.npmjs.org/babylon/-/babylon-5.8.38.tgz",
+          "integrity": "sha1-7JsSCxG/bM1Bc6GL8hfmC3mFn/0=",
+          "dev": true
+        },
+        "bluebird": {
+          "version": "2.11.0",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-2.11.0.tgz",
+          "integrity": "sha1-U0uQM8AiyVecVro7Plpcqvu2UOE=",
+          "dev": true
+        },
+        "broccoli-babel-transpiler": {
+          "version": "5.7.2",
+          "resolved": "https://registry.npmjs.org/broccoli-babel-transpiler/-/broccoli-babel-transpiler-5.7.2.tgz",
+          "integrity": "sha512-vFQ+aSR9J81fm3MXXQGgDxswYINHl2p5duLvRLVnpmgPDNdpdsa30gh3xnmhzR/GwWFBfUNle7aYxthlgvsN0w==",
+          "dev": true,
+          "dependencies": {
+            "clone": {
+              "version": "0.2.0",
+              "resolved": "https://registry.npmjs.org/clone/-/clone-0.2.0.tgz",
+              "integrity": "sha1-xhJqkK1Pctv1rNskPMN3JP6T/B8=",
+              "dev": true
+            }
+          }
+        },
+        "core-js": {
+          "version": "1.2.7",
+          "resolved": "https://registry.npmjs.org/core-js/-/core-js-1.2.7.tgz",
+          "integrity": "sha1-ZSKUwUZR2yj6k70tX/KYOk8IxjY=",
+          "dev": true
+        },
+        "detect-indent": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-3.0.1.tgz",
+          "integrity": "sha1-ncXl3bzu+DJXZLlFGwK8bVQIT3U=",
+          "dev": true
+        },
+        "ember-cli-babel": {
+          "version": "5.2.4",
+          "resolved": "https://registry.npmjs.org/ember-cli-babel/-/ember-cli-babel-5.2.4.tgz",
+          "integrity": "sha1-XOT0awjtb20h6Hhhn7aJcZ1ujhM=",
+          "dev": true
+        },
+        "ember-cli-version-checker": {
+          "version": "1.3.1",
+          "resolved": "https://registry.npmjs.org/ember-cli-version-checker/-/ember-cli-version-checker-1.3.1.tgz",
+          "integrity": "sha1-C8LRNMgwFC2mS/lieg7e0QthrnI=",
+          "dev": true
+        },
+        "globals": {
+          "version": "6.4.1",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-6.4.1.tgz",
+          "integrity": "sha1-hJgDKzttHMge68X3lpDY/in6v08=",
+          "dev": true
+        },
+        "home-or-tmp": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-1.0.0.tgz",
+          "integrity": "sha1-S58eQIAMPlDGwn94FnavzOcfOYU=",
+          "dev": true
+        },
+        "js-tokens": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-1.0.1.tgz",
+          "integrity": "sha1-zENaXIuUrRWst5gxQPyAGCyJrq4=",
+          "dev": true
+        },
+        "json5": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/json5/-/json5-0.4.0.tgz",
+          "integrity": "sha1-BUNS5MTIDIbAkjh31EneF2pzLI0=",
+          "dev": true
+        },
+        "lodash": {
+          "version": "3.10.1",
+          "resolved": "https://registry.npmjs.org/lodash/-/lodash-3.10.1.tgz",
+          "integrity": "sha1-W/Rejkm6QYnhfUgnid/RW9FAt7Y=",
+          "dev": true
+        },
+        "minimatch": {
+          "version": "2.0.10",
+          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-2.0.10.tgz",
+          "integrity": "sha1-jQh8OcazjAAbl/ynzm0OHoCvusc=",
+          "dev": true
+        },
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        },
+        "path-exists": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-1.0.0.tgz",
+          "integrity": "sha1-1aiZjrce83p0w06w2eum6HjuoIE=",
+          "dev": true
+        },
+        "repeating": {
+          "version": "1.1.3",
+          "resolved": "https://registry.npmjs.org/repeating/-/repeating-1.1.3.tgz",
+          "integrity": "sha1-PUEUIYh3U3SU+X93+Xhfq4EPpKw=",
+          "dev": true
+        },
+        "source-map-support": {
+          "version": "0.2.10",
+          "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.2.10.tgz",
+          "integrity": "sha1-6lo5AKHByyUJagrozFwrSxDe09w=",
+          "dev": true,
+          "dependencies": {
+            "source-map": {
+              "version": "0.1.32",
+              "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.1.32.tgz",
+              "integrity": "sha1-yLbBZ3l7pHQKjqMyUhYv8IWRsmY=",
+              "dev": true
+            }
+          }
+        }
+      }
+    },
+    "encodeurl": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.1.tgz",
+      "integrity": "sha1-eePVhlU0aQn+bw9Fpd5oEDspTSA=",
+      "dev": true
+    },
+    "encoding": {
+      "version": "0.1.12",
+      "resolved": "https://registry.npmjs.org/encoding/-/encoding-0.1.12.tgz",
+      "integrity": "sha1-U4tm8+5izRq1HsMjgp0flIDHS+s=",
+      "dev": true
+    },
+    "engine.io": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-1.8.0.tgz",
+      "integrity": "sha1-PutfJky3XbvsG6rqJtYfWk6s4qo=",
+      "dev": true,
+      "dependencies": {
+        "accepts": {
+          "version": "1.3.3",
+          "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.3.tgz",
+          "integrity": "sha1-w8p0NJOGSMPg2cHjKN1otiLChMo=",
+          "dev": true
+        },
+        "debug": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.3.3.tgz",
+          "integrity": "sha1-QMRT5n5uE8kB3ewxeviYbNqe/4w=",
+          "dev": true
+        },
+        "ms": {
+          "version": "0.7.2",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-0.7.2.tgz",
+          "integrity": "sha1-riXPJRKziFodldfwN4aNhDESR2U=",
+          "dev": true
+        }
+      }
+    },
+    "engine.io-client": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/engine.io-client/-/engine.io-client-1.8.0.tgz",
+      "integrity": "sha1-e3MOQSdBQIdZbZvjyI0rxf22z1w=",
+      "dev": true,
+      "dependencies": {
+        "component-emitter": {
+          "version": "1.2.1",
+          "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.2.1.tgz",
+          "integrity": "sha1-E3kY1teCg/ffemt8WmPhQOaUJeY=",
+          "dev": true
+        },
+        "debug": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.3.3.tgz",
+          "integrity": "sha1-QMRT5n5uE8kB3ewxeviYbNqe/4w=",
+          "dev": true
+        },
+        "ms": {
+          "version": "0.7.2",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-0.7.2.tgz",
+          "integrity": "sha1-riXPJRKziFodldfwN4aNhDESR2U=",
+          "dev": true
+        }
+      }
+    },
+    "engine.io-parser": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-1.3.1.tgz",
+      "integrity": "sha1-lVTxrjMQfW+9FwylRm0vgz9qB88=",
+      "dev": true,
+      "dependencies": {
+        "has-binary": {
+          "version": "0.1.6",
+          "resolved": "https://registry.npmjs.org/has-binary/-/has-binary-0.1.6.tgz",
+          "integrity": "sha1-JTJvOc+k9hath4eJTjryz7x7bhA=",
+          "dev": true
+        },
+        "isarray": {
+          "version": "0.0.1",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
+          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=",
+          "dev": true
+        }
+      }
+    },
+    "ensure-posix-path": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/ensure-posix-path/-/ensure-posix-path-1.0.2.tgz",
+      "integrity": "sha1-pls+QtC3HPxYXrd0+ZQ8jZuRsMI="
+    },
+    "entities": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-1.1.1.tgz",
+      "integrity": "sha1-blwtClYhtdra7O+AuQ7ftc13cvA=",
+      "dev": true
+    },
+    "error": {
+      "version": "7.0.2",
+      "resolved": "https://registry.npmjs.org/error/-/error-7.0.2.tgz",
+      "integrity": "sha1-pfdf/02ZJhJt2sDqXcOOaJFTywI=",
+      "dev": true
+    },
+    "es5-ext": {
+      "version": "0.10.30",
+      "resolved": "https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.30.tgz",
+      "integrity": "sha1-cUGhaDZpfbq/qq7uQUlc4p9SyTk=",
+      "dev": true
+    },
+    "es6-iterator": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.1.tgz",
+      "integrity": "sha1-jjGcnwRTv1ddN0lAplWSDlnKVRI=",
+      "dev": true
+    },
+    "es6-map": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/es6-map/-/es6-map-0.1.5.tgz",
+      "integrity": "sha1-kTbgUD3MBqMBaQ8LsU/042TpSfA=",
+      "dev": true
+    },
+    "es6-set": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/es6-set/-/es6-set-0.1.5.tgz",
+      "integrity": "sha1-0rPsXU2ADO2BjbU40ol02wpzzLE=",
+      "dev": true
+    },
+    "es6-symbol": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.1.tgz",
+      "integrity": "sha1-vwDvT9q2uhtG7Le2KbTH7VcVzHc=",
+      "dev": true
+    },
+    "escape-html": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
+      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=",
+      "dev": true
+    },
+    "escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
+    },
+    "eslint": {
+      "version": "4.6.1",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-4.6.1.tgz",
+      "integrity": "sha1-3cf8f9cL+TIFsLNEm7FqHp59SVA=",
+      "dev": true,
+      "dependencies": {
+        "ansi-escapes": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-2.0.0.tgz",
+          "integrity": "sha1-W65SvkJIeN2Xg+iRDj/Cki6DyBs=",
+          "dev": true
+        },
+        "ansi-regex": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
+          "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=",
+          "dev": true
+        },
+        "ansi-styles": {
+          "version": "3.2.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz",
+          "integrity": "sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==",
+          "dev": true
+        },
+        "chalk": {
+          "version": "2.1.0",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.1.0.tgz",
+          "integrity": "sha512-LUHGS/dge4ujbXMJrnihYMcL4AoOweGnw9Tp3kQuqy1Kx5c1qKjqvMJZ6nVJPMWJtKCTN72ZogH3oeSO9g9rXQ==",
+          "dev": true
+        },
+        "cli-cursor": {
+          "version": "2.1.0",
+          "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-2.1.0.tgz",
+          "integrity": "sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU=",
+          "dev": true
+        },
+        "external-editor": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-2.0.4.tgz",
+          "integrity": "sha1-HtkZnanL/i7y96MbL96LDRI2iXI=",
+          "dev": true
+        },
+        "figures": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/figures/-/figures-2.0.0.tgz",
+          "integrity": "sha1-OrGi0qYsi/tDGgyUy3l6L84nyWI=",
+          "dev": true
+        },
+        "inquirer": {
+          "version": "3.2.3",
+          "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-3.2.3.tgz",
+          "integrity": "sha512-Bc3KbimpDTOeQdDj18Ir/rlsGuhBSSNqdOnxaAuKhpkdnMMuKsEGbZD2v5KFF9oso2OU+BPh7+/u5obmFDRmWw==",
+          "dev": true
+        },
+        "is-fullwidth-code-point": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
+          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
+          "dev": true
+        },
+        "mute-stream": {
+          "version": "0.0.7",
+          "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz",
+          "integrity": "sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s=",
+          "dev": true
+        },
+        "onetime": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/onetime/-/onetime-2.0.1.tgz",
+          "integrity": "sha1-BnQoIw/WdEOyeUsiu6UotoZ5YtQ=",
+          "dev": true
+        },
+        "restore-cursor": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-2.0.0.tgz",
+          "integrity": "sha1-n37ih/gv0ybU/RYpI9YhKe7g368=",
+          "dev": true
+        },
+        "string-width": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+          "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+          "dev": true
+        },
+        "strip-ansi": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
+          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
+          "dev": true
+        },
+        "supports-color": {
+          "version": "4.4.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-4.4.0.tgz",
+          "integrity": "sha512-rKC3+DyXWgK0ZLKwmRsrkyHVZAjNkfzeehuFWdGGcqGDTZFH73+RH6S/RDAAxl9GusSjZSUWYLmT9N5pzXFOXQ==",
+          "dev": true
+        },
+        "tmp": {
+          "version": "0.0.31",
+          "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.31.tgz",
+          "integrity": "sha1-jzirlDjhcxXl29izZX6L+yd65Kc=",
+          "dev": true
+        }
+      }
+    },
+    "eslint-scope": {
+      "version": "3.7.1",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-3.7.1.tgz",
+      "integrity": "sha1-PWPD7f2gLgbgGkUq2IyqzHzctug=",
+      "dev": true
+    },
+    "espree": {
+      "version": "3.5.0",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-3.5.0.tgz",
+      "integrity": "sha1-mDWGJb3QVYYeon4oZ+pyn69GPY0=",
+      "dev": true
+    },
+    "esprima": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz",
+      "integrity": "sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM=",
+      "dev": true
+    },
+    "esquery": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.0.0.tgz",
+      "integrity": "sha1-z7qLV9f7qT8XKYqKAGoEzaE9gPo=",
+      "dev": true
+    },
+    "esrecurse": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.0.tgz",
+      "integrity": "sha1-+pVo2Y04I/mkHZHpAtyrnqblsWM=",
+      "dev": true
+    },
+    "estraverse": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz",
+      "integrity": "sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=",
+      "dev": true
+    },
+    "esutils": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz",
+      "integrity": "sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="
+    },
+    "etag": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.0.tgz",
+      "integrity": "sha1-b2Ma7zNtbEY2K1F2QETOIWvjwFE=",
+      "dev": true
+    },
+    "event-emitter": {
+      "version": "0.3.5",
+      "resolved": "https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz",
+      "integrity": "sha1-34xp7vFkeSPHFXuc6DhAYQsCzDk=",
+      "dev": true
+    },
+    "eventemitter3": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-1.2.0.tgz",
+      "integrity": "sha1-HIaZHYFq0eUEdQ5zh0Ik7PO+xQg=",
+      "dev": true
+    },
+    "events-to-array": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/events-to-array/-/events-to-array-1.1.2.tgz",
+      "integrity": "sha1-LUH1Y+H+QA7Uli/hpNXGp1Od9/Y=",
+      "dev": true
+    },
+    "exec-sh": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/exec-sh/-/exec-sh-0.2.1.tgz",
+      "integrity": "sha512-aLt95pexaugVtQerpmE51+4QfWrNc304uez7jvj6fWnN8GeEHpttB8F36n8N7uVhUMbH/1enbxQ9HImZ4w/9qg==",
+      "dev": true
+    },
+    "execa": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/execa/-/execa-0.7.0.tgz",
+      "integrity": "sha1-lEvs00zEHuMqY6n68nrVpl/Fl3c=",
+      "dev": true
+    },
+    "exists-stat": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/exists-stat/-/exists-stat-1.0.0.tgz",
+      "integrity": "sha1-BmDjUlouidnkRhKUQMJy7foktSk=",
+      "dev": true
+    },
+    "exists-sync": {
+      "version": "0.0.4",
+      "resolved": "https://registry.npmjs.org/exists-sync/-/exists-sync-0.0.4.tgz",
+      "integrity": "sha1-l0TCxCjMA7AQYNtFTUsS8O88iHk="
+    },
+    "exit": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
+      "integrity": "sha1-BjJjj42HfMghB9MKD/8aF8uhzQw=",
+      "dev": true
+    },
+    "exit-hook": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/exit-hook/-/exit-hook-1.1.1.tgz",
+      "integrity": "sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g=",
+      "dev": true
+    },
+    "expand-brackets": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/expand-brackets/-/expand-brackets-0.1.5.tgz",
+      "integrity": "sha1-3wcoTjQqgHzXM6xa9yQR5YHRF3s=",
+      "dev": true
+    },
+    "expand-range": {
+      "version": "1.8.2",
+      "resolved": "https://registry.npmjs.org/expand-range/-/expand-range-1.8.2.tgz",
+      "integrity": "sha1-opnv/TNf4nIeuujiV+x5ZE/IUzc=",
+      "dev": true
+    },
+    "expand-tilde": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/expand-tilde/-/expand-tilde-1.2.2.tgz",
+      "integrity": "sha1-C4HrqJflo9MdHD0QL48BRB5VlEk=",
+      "dev": true
+    },
+    "express": {
+      "version": "4.15.4",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.15.4.tgz",
+      "integrity": "sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE=",
+      "dev": true
+    },
+    "extend": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.1.tgz",
+      "integrity": "sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ=",
+      "dev": true
+    },
+    "external-editor": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-1.1.1.tgz",
+      "integrity": "sha1-Etew24UPf/fnCBuvQAVwAGDEYAs=",
+      "dev": true,
+      "dependencies": {
+        "tmp": {
+          "version": "0.0.29",
+          "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.29.tgz",
+          "integrity": "sha1-8lEl/w3Z2jzLDC3Tce4SiLuRKMA=",
+          "dev": true
+        }
+      }
+    },
+    "extglob": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/extglob/-/extglob-0.3.2.tgz",
+      "integrity": "sha1-Lhj/PS9JqydlzskCPwEdqo2DSaE=",
+      "dev": true
+    },
+    "fake-xml-http-request": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/fake-xml-http-request/-/fake-xml-http-request-1.6.0.tgz",
+      "integrity": "sha512-99XPwwSg89BfzPuv4XCpZxn3EbauMCgAQCxq9MzrvS6DFD73OON6AnUTicL4A0HZtYMBwCZBWVnRqGjZDgQkTg==",
+      "dev": true
+    },
+    "faker": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/faker/-/faker-3.1.0.tgz",
+      "integrity": "sha1-D5CPr05uwCUk5UpX5DLFwBPgjJ8=",
+      "dev": true
+    },
+    "fast-deep-equal": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.0.0.tgz",
+      "integrity": "sha1-liVqO8l1WV6zbYLpkp0GDYk0Of8=",
+      "dev": true
+    },
+    "fast-levenshtein": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
+      "dev": true
+    },
+    "fast-ordered-set": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/fast-ordered-set/-/fast-ordered-set-1.0.3.tgz",
+      "integrity": "sha1-P7s2Y097555PftvbSjV97iXRhOs="
+    },
+    "fast-sourcemap-concat": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/fast-sourcemap-concat/-/fast-sourcemap-concat-1.2.3.tgz",
+      "integrity": "sha1-IvFOktc543kgM0N27IQzv2deqgQ=",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": {
+          "version": "0.2.1",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-0.2.1.tgz",
+          "integrity": "sha1-DY6UaWej2BQ/k+JOKYUl/BsiNfk=",
+          "dev": true
+        },
+        "ansi-styles": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-1.1.0.tgz",
+          "integrity": "sha1-6uy/Zs1waIJ2Cy9GkVgrj1XXp94=",
+          "dev": true
+        },
+        "chalk": {
+          "version": "0.5.1",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-0.5.1.tgz",
+          "integrity": "sha1-Zjs6ZItotV0EaQ1JFnqoN4WPIXQ=",
+          "dev": true
+        },
+        "fs-extra": {
+          "version": "0.30.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.30.0.tgz",
+          "integrity": "sha1-8jP/zAjU2n1DLapEl3aYnbHfk/A=",
+          "dev": true
+        },
+        "has-ansi": {
+          "version": "0.1.0",
+          "resolved": "https://registry.npmjs.org/has-ansi/-/has-ansi-0.1.0.tgz",
+          "integrity": "sha1-hPJlqujA5qiKEtcCKJS3VoiUxi4=",
+          "dev": true
+        },
+        "source-map": {
+          "version": "0.4.4",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz",
+          "integrity": "sha1-66T12pwNyZneaAMti092FzZSA2s=",
+          "dev": true
+        },
+        "strip-ansi": {
+          "version": "0.3.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-0.3.0.tgz",
+          "integrity": "sha1-JfSOoiynkYfzF0pNuHWTR7sSYiA=",
+          "dev": true
+        },
+        "supports-color": {
+          "version": "0.2.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-0.2.0.tgz",
+          "integrity": "sha1-2S3iaU6z9nMjlz1649i1W0wiGQo=",
+          "dev": true
+        }
+      }
+    },
+    "faye-websocket": {
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.10.0.tgz",
+      "integrity": "sha1-TkkvjQTftviQA1B/btvy1QHnxvQ=",
+      "dev": true
+    },
+    "fb-watchman": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.0.tgz",
+      "integrity": "sha1-VOmr99+i8mzZsWNsWIwa/AXeXVg=",
+      "dev": true
+    },
+    "figures": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/figures/-/figures-1.7.0.tgz",
+      "integrity": "sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4=",
+      "dev": true
+    },
+    "file-entry-cache": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-2.0.0.tgz",
+      "integrity": "sha1-w5KZDD5oR4PYOLjISkXYoEhFg2E=",
+      "dev": true
+    },
+    "filename-regex": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/filename-regex/-/filename-regex-2.0.1.tgz",
+      "integrity": "sha1-wcS5vuPglyXdsQa3XB4wH+LxiyY=",
+      "dev": true
+    },
+    "filesize": {
+      "version": "3.5.10",
+      "resolved": "https://registry.npmjs.org/filesize/-/filesize-3.5.10.tgz",
+      "integrity": "sha1-/I+iPdtO+eXgq24eZPZ5okpWdh8=",
+      "dev": true
+    },
+    "fill-range": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-2.2.3.tgz",
+      "integrity": "sha1-ULd9/X5Gm8dJJHCWNpn+eoSFpyM=",
+      "dev": true
+    },
+    "finalhandler": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.0.4.tgz",
+      "integrity": "sha512-16l/r8RgzlXKmFOhZpHBztvye+lAhC5SU7hXavnerC9UfZqZxxXl3BzL8MhffPT3kF61lj9Oav2LKEzh0ei7tg==",
+      "dev": true
+    },
+    "find-index": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/find-index/-/find-index-1.1.0.tgz",
+      "integrity": "sha1-UwB8ec0wBA1oFteUWOiDfVxXBe8=",
+      "dev": true
+    },
+    "find-up": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz",
+      "integrity": "sha1-RdG35QbHF93UgndaK3eSCjwMV6c=",
+      "dev": true
+    },
+    "findup-sync": {
+      "version": "0.4.3",
+      "resolved": "https://registry.npmjs.org/findup-sync/-/findup-sync-0.4.3.tgz",
+      "integrity": "sha1-QAQ5Kee8YK3wt/SCfExudaDeyhI=",
+      "dev": true
+    },
+    "fireworm": {
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/fireworm/-/fireworm-0.7.1.tgz",
+      "integrity": "sha1-zPIPeUHxCIg/zduZOD2+bhhhx1g=",
+      "dev": true,
+      "dependencies": {
+        "async": {
+          "version": "0.2.10",
+          "resolved": "https://registry.npmjs.org/async/-/async-0.2.10.tgz",
+          "integrity": "sha1-trvgsGdLnXGXCMo43owjfLUmw9E=",
+          "dev": true
+        }
+      }
+    },
+    "flat-cache": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-1.2.2.tgz",
+      "integrity": "sha1-+oZxTnLCHbiGAXYezy9VXRq8a5Y=",
+      "dev": true
+    },
+    "for-in": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/for-in/-/for-in-1.0.2.tgz",
+      "integrity": "sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=",
+      "dev": true
+    },
+    "for-own": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/for-own/-/for-own-0.1.5.tgz",
+      "integrity": "sha1-UmXGgaTylNq78XyVCbZ2OqhFEM4=",
+      "dev": true
+    },
+    "forever-agent": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.5.2.tgz",
+      "integrity": "sha1-bQ4JxJIflKJ/Y9O0nF/v8epMUTA=",
+      "dev": true
+    },
+    "form-data": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-0.1.4.tgz",
+      "integrity": "sha1-kavXiKupcCsaq/qLwBAxoqyeOxI=",
+      "dev": true,
+      "optional": true,
+      "dependencies": {
+        "async": {
+          "version": "0.9.2",
+          "resolved": "https://registry.npmjs.org/async/-/async-0.9.2.tgz",
+          "integrity": "sha1-rqdNXmHB+JlhO/ZL2mbUx48v0X0=",
+          "dev": true,
+          "optional": true
+        },
+        "mime": {
+          "version": "1.2.11",
+          "resolved": "https://registry.npmjs.org/mime/-/mime-1.2.11.tgz",
+          "integrity": "sha1-WCA+7Ybjpe8XrtK32evUfwpg3RA=",
+          "dev": true,
+          "optional": true
+        }
+      }
+    },
+    "forwarded": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.1.1.tgz",
+      "integrity": "sha1-ik4wxkCwU5U5mjVJxzAldygEiWE=",
+      "dev": true
+    },
+    "fresh": {
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.0.tgz",
+      "integrity": "sha1-9HTKXmqSRtb9jglTz6m5yAWvp44=",
+      "dev": true
+    },
+    "fs-exists-sync": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/fs-exists-sync/-/fs-exists-sync-0.1.0.tgz",
+      "integrity": "sha1-mC1ok6+RjnLQjeyehnP/K1qNat0=",
+      "dev": true
+    },
+    "fs-extra": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-3.0.1.tgz",
+      "integrity": "sha1-N5TzeMWLNC6n27sjCVEJxLO2IpE=",
+      "dev": true,
+      "dependencies": {
+        "jsonfile": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-3.0.1.tgz",
+          "integrity": "sha1-pezG9l9T9mLEQVx2daAzHQmS7GY=",
+          "dev": true
+        }
+      }
+    },
+    "fs-readdir-recursive": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/fs-readdir-recursive/-/fs-readdir-recursive-0.1.2.tgz",
+      "integrity": "sha1-MVtPuMHKW4xH3v7zGdBz2tNWgFk=",
+      "dev": true
+    },
+    "fs-tree-diff": {
+      "version": "0.5.6",
+      "resolved": "https://registry.npmjs.org/fs-tree-diff/-/fs-tree-diff-0.5.6.tgz",
+      "integrity": "sha1-NCZldJ6NykBoALZyJoyPUHPz5iM="
+    },
+    "fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
+    },
+    "fsevents": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-1.1.2.tgz",
+      "integrity": "sha512-Sn44E5wQW4bTHXvQmvSHwqbuiXtduD6Rrjm2ZtUEGbyrig+nUH3t/QD4M4/ZXViY556TBpRgZkHLDx3JxPwxiw==",
+      "dev": true,
+      "optional": true,
+      "dependencies": {
+        "abbrev": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.0.tgz",
+          "integrity": "sha1-0FVMIlZjbi9W58LlrRg/hZQo2B8=",
+          "dev": true,
+          "optional": true
+        },
+        "ajv": {
+          "version": "4.11.8",
+          "resolved": "https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz",
+          "integrity": "sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY=",
+          "dev": true,
+          "optional": true
+        },
+        "ansi-regex": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
+          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8=",
+          "dev": true
+        },
+        "aproba": {
+          "version": "1.1.1",
+          "resolved": "https://registry.npmjs.org/aproba/-/aproba-1.1.1.tgz",
+          "integrity": "sha1-ldNgDwdxCqDpKYxyatXs8urLq6s=",
+          "dev": true,
+          "optional": true
+        },
+        "are-we-there-yet": {
+          "version": "1.1.4",
+          "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-1.1.4.tgz",
+          "integrity": "sha1-u13KOCu5TwXhUZQ3PRb9O6HKEQ0=",
+          "dev": true,
+          "optional": true
+        },
+        "asn1": {
+          "version": "0.2.3",
+          "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.3.tgz",
+          "integrity": "sha1-2sh4dxPJlmhJ/IGAd36+nB3fO4Y=",
+          "dev": true,
+          "optional": true
+        },
+        "assert-plus": {
+          "version": "0.2.0",
+          "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-0.2.0.tgz",
+          "integrity": "sha1-104bh+ev/A24qttwIfP+SBAasjQ=",
+          "dev": true,
+          "optional": true
+        },
+        "asynckit": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+          "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k=",
+          "dev": true,
+          "optional": true
+        },
+        "aws-sign2": {
+          "version": "0.6.0",
+          "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.6.0.tgz",
+          "integrity": "sha1-FDQt0428yU0OW4fXY81jYSwOeU8=",
+          "dev": true,
+          "optional": true
+        },
+        "aws4": {
+          "version": "1.6.0",
+          "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.6.0.tgz",
+          "integrity": "sha1-g+9cqGCysy5KDe7e6MdxudtXRx4=",
+          "dev": true,
+          "optional": true
+        },
+        "balanced-match": {
+          "version": "0.4.2",
+          "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-0.4.2.tgz",
+          "integrity": "sha1-yz8+PHMtwPAe5wtAPzAuYddwmDg=",
+          "dev": true
+        },
+        "bcrypt-pbkdf": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.1.tgz",
+          "integrity": "sha1-Y7xdy2EzG5K8Bf1SiVPDNGKgb40=",
+          "dev": true,
+          "optional": true
+        },
+        "block-stream": {
+          "version": "0.0.9",
+          "resolved": "https://registry.npmjs.org/block-stream/-/block-stream-0.0.9.tgz",
+          "integrity": "sha1-E+v+d4oDIFz+A3UUgeu0szAMEmo=",
+          "dev": true
+        },
+        "boom": {
+          "version": "2.10.1",
+          "resolved": "https://registry.npmjs.org/boom/-/boom-2.10.1.tgz",
+          "integrity": "sha1-OciRjO/1eZ+D+UkqhI9iWt0Mdm8=",
+          "dev": true
+        },
+        "brace-expansion": {
+          "version": "1.1.7",
+          "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.7.tgz",
+          "integrity": "sha1-Pv/DxQ4ABTH7cg6v+A8K6O8jz1k=",
+          "dev": true
+        },
+        "buffer-shims": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/buffer-shims/-/buffer-shims-1.0.0.tgz",
+          "integrity": "sha1-mXjOMXOIxkmth5MCjDR37wRKi1E=",
+          "dev": true
+        },
+        "caseless": {
+          "version": "0.12.0",
+          "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
+          "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=",
+          "dev": true,
+          "optional": true
+        },
+        "co": {
+          "version": "4.6.0",
+          "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+          "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=",
+          "dev": true,
+          "optional": true
+        },
+        "code-point-at": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz",
+          "integrity": "sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=",
+          "dev": true
+        },
+        "combined-stream": {
+          "version": "1.0.5",
+          "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.5.tgz",
+          "integrity": "sha1-k4NwpXtKUd6ix3wV1cX9+JUWQAk=",
+          "dev": true
+        },
+        "concat-map": {
+          "version": "0.0.1",
+          "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+          "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
+          "dev": true
+        },
+        "console-control-strings": {
+          "version": "1.1.0",
+          "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
+          "integrity": "sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4=",
+          "dev": true
+        },
+        "core-util-is": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+          "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
+          "dev": true
+        },
+        "cryptiles": {
+          "version": "2.0.5",
+          "resolved": "https://registry.npmjs.org/cryptiles/-/cryptiles-2.0.5.tgz",
+          "integrity": "sha1-O9/s3GCBR8HGcgL6KR59ylnqo7g=",
+          "dev": true,
+          "optional": true
+        },
+        "dashdash": {
+          "version": "1.14.1",
+          "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
+          "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
+          "dev": true,
+          "optional": true,
+          "dependencies": {
+            "assert-plus": {
+              "version": "1.0.0",
+              "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+              "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
+              "dev": true,
+              "optional": true
+            }
+          }
+        },
+        "debug": {
+          "version": "2.6.8",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.8.tgz",
+          "integrity": "sha1-5zFTHKLt4n0YgiJCfaF4IdaP9Pw=",
+          "dev": true,
+          "optional": true
+        },
+        "deep-extend": {
+          "version": "0.4.2",
+          "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.4.2.tgz",
+          "integrity": "sha1-SLaZwn4zS/ifEIkr5DL25MfTSn8=",
+          "dev": true,
+          "optional": true
+        },
+        "delayed-stream": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+          "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
+          "dev": true
+        },
+        "delegates": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
+          "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o=",
+          "dev": true,
+          "optional": true
+        },
+        "ecc-jsbn": {
+          "version": "0.1.1",
+          "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.1.tgz",
+          "integrity": "sha1-D8c6ntXw1Tw4GTOYUj735UN3dQU=",
+          "dev": true,
+          "optional": true
+        },
+        "extend": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.1.tgz",
+          "integrity": "sha1-p1Xqe8Gt/MWjHOfnYtuq3F5jZEQ=",
+          "dev": true,
+          "optional": true
+        },
+        "extsprintf": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.0.2.tgz",
+          "integrity": "sha1-4QgOBljjALBilJkMxw4VAiNf1VA=",
+          "dev": true
+        },
+        "forever-agent": {
+          "version": "0.6.1",
+          "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
+          "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
+          "dev": true,
+          "optional": true
+        },
+        "form-data": {
+          "version": "2.1.4",
+          "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.1.4.tgz",
+          "integrity": "sha1-M8GDrPGTJ27KqYFDpp6Uv+4XUNE=",
+          "dev": true,
+          "optional": true
+        },
+        "fs.realpath": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+          "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
+          "dev": true
+        },
+        "fstream": {
+          "version": "1.0.11",
+          "resolved": "https://registry.npmjs.org/fstream/-/fstream-1.0.11.tgz",
+          "integrity": "sha1-XB+x8RdHcRTwYyoOtLcbPLD9MXE=",
+          "dev": true
+        },
+        "fstream-ignore": {
+          "version": "1.0.5",
+          "resolved": "https://registry.npmjs.org/fstream-ignore/-/fstream-ignore-1.0.5.tgz",
+          "integrity": "sha1-nDHa40dnAY/h0kmyTa2mfQktoQU=",
+          "dev": true,
+          "optional": true
+        },
+        "gauge": {
+          "version": "2.7.4",
+          "resolved": "https://registry.npmjs.org/gauge/-/gauge-2.7.4.tgz",
+          "integrity": "sha1-LANAXHU4w51+s3sxcCLjJfsBi/c=",
+          "dev": true,
+          "optional": true
+        },
+        "getpass": {
+          "version": "0.1.7",
+          "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
+          "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
+          "dev": true,
+          "optional": true,
+          "dependencies": {
+            "assert-plus": {
+              "version": "1.0.0",
+              "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+              "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
+              "dev": true,
+              "optional": true
+            }
+          }
+        },
+        "glob": {
+          "version": "7.1.2",
+          "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+          "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ==",
+          "dev": true
+        },
+        "graceful-fs": {
+          "version": "4.1.11",
+          "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.11.tgz",
+          "integrity": "sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=",
+          "dev": true
+        },
+        "har-schema": {
+          "version": "1.0.5",
+          "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-1.0.5.tgz",
+          "integrity": "sha1-0mMTX0MwfALGAq/I/pWXDAFRNp4=",
+          "dev": true,
+          "optional": true
+        },
+        "har-validator": {
+          "version": "4.2.1",
+          "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-4.2.1.tgz",
+          "integrity": "sha1-M0gdDxu/9gDdID11gSpqX7oALio=",
+          "dev": true,
+          "optional": true
+        },
+        "has-unicode": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
+          "integrity": "sha1-4Ob+aijPUROIVeCG0Wkedx3iqLk=",
+          "dev": true,
+          "optional": true
+        },
+        "hawk": {
+          "version": "3.1.3",
+          "resolved": "https://registry.npmjs.org/hawk/-/hawk-3.1.3.tgz",
+          "integrity": "sha1-B4REvXwWQLD+VA0sm3PVlnjo4cQ=",
+          "dev": true,
+          "optional": true
+        },
+        "hoek": {
+          "version": "2.16.3",
+          "resolved": "https://registry.npmjs.org/hoek/-/hoek-2.16.3.tgz",
+          "integrity": "sha1-ILt0A9POo5jpHcRxCo/xuCdKJe0=",
+          "dev": true
+        },
+        "http-signature": {
+          "version": "1.1.1",
+          "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.1.1.tgz",
+          "integrity": "sha1-33LiZwZs0Kxn+3at+OE0qPvPkb8=",
+          "dev": true,
+          "optional": true
+        },
+        "inflight": {
+          "version": "1.0.6",
+          "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+          "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
+          "dev": true
+        },
+        "inherits": {
+          "version": "2.0.3",
+          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
+          "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=",
+          "dev": true
+        },
+        "ini": {
+          "version": "1.3.4",
+          "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.4.tgz",
+          "integrity": "sha1-BTfLedr1m1mhpRff9wbIbsA5Fi4=",
+          "dev": true,
+          "optional": true
+        },
+        "is-fullwidth-code-point": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
+          "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
+          "dev": true
+        },
+        "is-typedarray": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
+          "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=",
+          "dev": true,
+          "optional": true
+        },
+        "isarray": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
+          "dev": true
+        },
+        "isstream": {
+          "version": "0.1.2",
+          "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+          "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
+          "dev": true,
+          "optional": true
+        },
+        "jodid25519": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/jodid25519/-/jodid25519-1.0.2.tgz",
+          "integrity": "sha1-BtSRIlUJNBlHfUJWM2BuDpB4KWc=",
+          "dev": true,
+          "optional": true
+        },
+        "jsbn": {
+          "version": "0.1.1",
+          "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+          "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
+          "dev": true,
+          "optional": true
+        },
+        "json-schema": {
+          "version": "0.2.3",
+          "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
+          "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=",
+          "dev": true,
+          "optional": true
+        },
+        "json-stable-stringify": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz",
+          "integrity": "sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8=",
+          "dev": true,
+          "optional": true
+        },
+        "json-stringify-safe": {
+          "version": "5.0.1",
+          "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+          "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
+          "dev": true,
+          "optional": true
+        },
+        "jsonify": {
+          "version": "0.0.0",
+          "resolved": "https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz",
+          "integrity": "sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM=",
+          "dev": true,
+          "optional": true
+        },
+        "jsprim": {
+          "version": "1.4.0",
+          "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.0.tgz",
+          "integrity": "sha1-o7h+QCmNjDgFUtjMdiigu5WiKRg=",
+          "dev": true,
+          "optional": true,
+          "dependencies": {
+            "assert-plus": {
+              "version": "1.0.0",
+              "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+              "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
+              "dev": true,
+              "optional": true
+            }
+          }
+        },
+        "mime-db": {
+          "version": "1.27.0",
+          "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.27.0.tgz",
+          "integrity": "sha1-gg9XIpa70g7CXtVeW13oaeVDbrE=",
+          "dev": true
+        },
+        "mime-types": {
+          "version": "2.1.15",
+          "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.15.tgz",
+          "integrity": "sha1-pOv1BkCUVpI3uM9wBGd20J/JKu0=",
+          "dev": true
+        },
+        "minimatch": {
+          "version": "3.0.4",
+          "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+          "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
+          "dev": true
+        },
+        "minimist": {
+          "version": "0.0.8",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz",
+          "integrity": "sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=",
+          "dev": true
+        },
+        "mkdirp": {
+          "version": "0.5.1",
+          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz",
+          "integrity": "sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=",
+          "dev": true
+        },
+        "ms": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=",
+          "dev": true,
+          "optional": true
+        },
+        "node-pre-gyp": {
+          "version": "0.6.36",
+          "resolved": "https://registry.npmjs.org/node-pre-gyp/-/node-pre-gyp-0.6.36.tgz",
+          "integrity": "sha1-22BBEst04NR3VU6bUFsXq936t4Y=",
+          "dev": true,
+          "optional": true
+        },
+        "nopt": {
+          "version": "4.0.1",
+          "resolved": "https://registry.npmjs.org/nopt/-/nopt-4.0.1.tgz",
+          "integrity": "sha1-0NRoWv1UFRk8jHUFYC0NF81kR00=",
+          "dev": true,
+          "optional": true
+        },
+        "npmlog": {
+          "version": "4.1.0",
+          "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-4.1.0.tgz",
+          "integrity": "sha512-ocolIkZYZt8UveuiDS0yAkkIjid1o7lPG8cYm05yNYzBn8ykQtaiPMEGp8fY9tKdDgm8okpdKzkvu1y9hUYugA==",
+          "dev": true,
+          "optional": true
+        },
+        "number-is-nan": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz",
+          "integrity": "sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=",
+          "dev": true
+        },
+        "oauth-sign": {
+          "version": "0.8.2",
+          "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz",
+          "integrity": "sha1-Rqarfwrq2N6unsBWV4C31O/rnUM=",
+          "dev": true,
+          "optional": true
+        },
+        "object-assign": {
+          "version": "4.1.1",
+          "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+          "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
+          "dev": true,
+          "optional": true
+        },
+        "once": {
+          "version": "1.4.0",
+          "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+          "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
+          "dev": true
+        },
+        "os-homedir": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz",
+          "integrity": "sha1-/7xJiDNuDoM94MFox+8VISGqf7M=",
+          "dev": true,
+          "optional": true
+        },
+        "os-tmpdir": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
+          "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
+          "dev": true,
+          "optional": true
+        },
+        "osenv": {
+          "version": "0.1.4",
+          "resolved": "https://registry.npmjs.org/osenv/-/osenv-0.1.4.tgz",
+          "integrity": "sha1-Qv5tWVPfBsgGS+bxdsPQWqqjRkQ=",
+          "dev": true,
+          "optional": true
+        },
+        "path-is-absolute": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+          "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
+          "dev": true
+        },
+        "performance-now": {
+          "version": "0.2.0",
+          "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-0.2.0.tgz",
+          "integrity": "sha1-M+8wxcd9TqIcWlOGnZG1bY8lVeU=",
+          "dev": true,
+          "optional": true
+        },
+        "process-nextick-args": {
+          "version": "1.0.7",
+          "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.7.tgz",
+          "integrity": "sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=",
+          "dev": true
+        },
+        "punycode": {
+          "version": "1.4.1",
+          "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
+          "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4=",
+          "dev": true,
+          "optional": true
+        },
+        "qs": {
+          "version": "6.4.0",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-6.4.0.tgz",
+          "integrity": "sha1-E+JtKK1rD/qpExLNO/cI7TUecjM=",
+          "dev": true,
+          "optional": true
+        },
+        "rc": {
+          "version": "1.2.1",
+          "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.1.tgz",
+          "integrity": "sha1-LgPo5C7kULjLPc5lvhv4l04d/ZU=",
+          "dev": true,
+          "optional": true,
+          "dependencies": {
+            "minimist": {
+              "version": "1.2.0",
+              "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+              "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+              "dev": true,
+              "optional": true
+            }
+          }
+        },
+        "readable-stream": {
+          "version": "2.2.9",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.2.9.tgz",
+          "integrity": "sha1-z3jsb0ptHrQ9JkiMrJfwQudLf8g=",
+          "dev": true
+        },
+        "request": {
+          "version": "2.81.0",
+          "resolved": "https://registry.npmjs.org/request/-/request-2.81.0.tgz",
+          "integrity": "sha1-xpKJRqDgbF+Nb4qTM0af/aRimKA=",
+          "dev": true,
+          "optional": true
+        },
+        "rimraf": {
+          "version": "2.6.1",
+          "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.1.tgz",
+          "integrity": "sha1-wjOOxkPfeht/5cVPqG9XQopV8z0=",
+          "dev": true
+        },
+        "safe-buffer": {
+          "version": "5.0.1",
+          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.0.1.tgz",
+          "integrity": "sha1-0mPKVGls2KMGtcplUekt5XkY++c=",
+          "dev": true
+        },
+        "semver": {
+          "version": "5.3.0",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-5.3.0.tgz",
+          "integrity": "sha1-myzl094C0XxgEq0yaqa00M9U+U8=",
+          "dev": true,
+          "optional": true
+        },
+        "set-blocking": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
+          "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc=",
+          "dev": true,
+          "optional": true
+        },
+        "signal-exit": {
+          "version": "3.0.2",
+          "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
+          "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=",
+          "dev": true,
+          "optional": true
+        },
+        "sntp": {
+          "version": "1.0.9",
+          "resolved": "https://registry.npmjs.org/sntp/-/sntp-1.0.9.tgz",
+          "integrity": "sha1-ZUEYTMkK7qbG57NeJlkIJEPGYZg=",
+          "dev": true,
+          "optional": true
+        },
+        "sshpk": {
+          "version": "1.13.0",
+          "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.13.0.tgz",
+          "integrity": "sha1-/yo+T9BEl1Vf7Zezmg/YL6+zozw=",
+          "dev": true,
+          "optional": true,
+          "dependencies": {
+            "assert-plus": {
+              "version": "1.0.0",
+              "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+              "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
+              "dev": true,
+              "optional": true
+            }
+          }
+        },
+        "string_decoder": {
+          "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.1.tgz",
+          "integrity": "sha1-YuIA8DmVWmgQ2N8KM//A8BNmLZg=",
+          "dev": true
+        },
+        "string-width": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
+          "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
+          "dev": true
+        },
+        "stringstream": {
+          "version": "0.0.5",
+          "resolved": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz",
+          "integrity": "sha1-TkhM1N5aC7vuGORjB3EKioFiGHg=",
+          "dev": true,
+          "optional": true
+        },
+        "strip-ansi": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
+          "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
+          "dev": true
+        },
+        "strip-json-comments": {
+          "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
+          "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
+          "dev": true,
+          "optional": true
+        },
+        "tar": {
+          "version": "2.2.1",
+          "resolved": "https://registry.npmjs.org/tar/-/tar-2.2.1.tgz",
+          "integrity": "sha1-jk0qJWwOIYXGsYrWlK7JaLg8sdE=",
+          "dev": true
+        },
+        "tar-pack": {
+          "version": "3.4.0",
+          "resolved": "https://registry.npmjs.org/tar-pack/-/tar-pack-3.4.0.tgz",
+          "integrity": "sha1-I74tf2cagzk3bL2wuP4/3r8xeYQ=",
+          "dev": true,
+          "optional": true
+        },
+        "tough-cookie": {
+          "version": "2.3.2",
+          "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.2.tgz",
+          "integrity": "sha1-8IH3bkyFcg5sN6X6ztc3FQ2EByo=",
+          "dev": true,
+          "optional": true
+        },
+        "tunnel-agent": {
+          "version": "0.6.0",
+          "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
+          "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
+          "dev": true,
+          "optional": true
+        },
+        "tweetnacl": {
+          "version": "0.14.5",
+          "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
+          "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
+          "dev": true,
+          "optional": true
+        },
+        "uid-number": {
+          "version": "0.0.6",
+          "resolved": "https://registry.npmjs.org/uid-number/-/uid-number-0.0.6.tgz",
+          "integrity": "sha1-DqEOgDXo61uOREnwbaHHMGY7qoE=",
+          "dev": true,
+          "optional": true
+        },
+        "util-deprecate": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+          "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
+          "dev": true
+        },
+        "uuid": {
+          "version": "3.0.1",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.0.1.tgz",
+          "integrity": "sha1-ZUS7ot/ajBzxfmKaOjBeK7H+5sE=",
+          "dev": true,
+          "optional": true
+        },
+        "verror": {
+          "version": "1.3.6",
+          "resolved": "https://registry.npmjs.org/verror/-/verror-1.3.6.tgz",
+          "integrity": "sha1-z/XfEpRtKX0rqu+qJoniW+AcAFw=",
+          "dev": true,
+          "optional": true
+        },
+        "wide-align": {
+          "version": "1.1.2",
+          "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.2.tgz",
+          "integrity": "sha512-ijDLlyQ7s6x1JgCLur53osjm/UXUYD9+0PbYKrBsYisYXzCxN+HC3mYDNy/dWdmf3AwqwU3CXwDCvsNgGK1S0w==",
+          "dev": true,
+          "optional": true
+        },
+        "wrappy": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+          "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
+          "dev": true
+        }
+      }
+    },
+    "functional-red-black-tree": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
+      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
+      "dev": true
+    },
+    "gauge": {
+      "version": "2.7.4",
+      "resolved": "https://registry.npmjs.org/gauge/-/gauge-2.7.4.tgz",
+      "integrity": "sha1-LANAXHU4w51+s3sxcCLjJfsBi/c=",
+      "dev": true
+    },
+    "get-caller-file": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.2.tgz",
+      "integrity": "sha1-9wLmMSfn4jHBYKgMFVSstw1QR+U=",
+      "dev": true
+    },
+    "get-stdin": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/get-stdin/-/get-stdin-4.0.1.tgz",
+      "integrity": "sha1-uWjGsKBDhDJJAui/Gl3zJXmkUP4=",
+      "dev": true
+    },
+    "get-stream": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz",
+      "integrity": "sha1-jpQ9E1jcN1VQVOy+LtsFqhdO3hQ=",
+      "dev": true
+    },
+    "git-repo-info": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/git-repo-info/-/git-repo-info-1.4.1.tgz",
+      "integrity": "sha1-KgcoIyVKr2L88HZgB9e2ZRvUGUM=",
+      "dev": true
+    },
+    "git-repo-version": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/git-repo-version/-/git-repo-version-0.2.0.tgz",
+      "integrity": "sha1-mh0AGaUPyeYjxD0cD8xDc5EgfQ0=",
+      "dev": true
+    },
+    "glob": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.2.tgz",
+      "integrity": "sha512-MJTUg1kjuLeQCJ+ccE4Vpa6kKVXkPYJ2mOCQyUuKLcLQsdrMCpBPUi8qVE6+YuaJkozeA9NusTAw3hLr8Xe5EQ=="
+    },
+    "glob-base": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/glob-base/-/glob-base-0.3.0.tgz",
+      "integrity": "sha1-27Fk9iIbHAscz4Kuoyi0l98Oo8Q=",
+      "dev": true
+    },
+    "glob-parent": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-2.0.0.tgz",
+      "integrity": "sha1-gTg9ctsFT8zPUzbaqQLxgvbtuyg=",
+      "dev": true
+    },
+    "global-modules": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/global-modules/-/global-modules-0.2.3.tgz",
+      "integrity": "sha1-6lo77ULG1s6ZWk+KEmm12uIjgo0=",
+      "dev": true
+    },
+    "global-prefix": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/global-prefix/-/global-prefix-0.1.5.tgz",
+      "integrity": "sha1-jTvGuNo8qBEqFg2NSW/wRiv+948=",
+      "dev": true
+    },
+    "globals": {
+      "version": "9.18.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-9.18.0.tgz",
+      "integrity": "sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ=="
+    },
+    "globby": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-5.0.0.tgz",
+      "integrity": "sha1-69hGZ8oNuzMLmbz8aOrCvFQ3Dg0=",
+      "dev": true
+    },
+    "graceful-fs": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.11.tgz",
+      "integrity": "sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=",
+      "dev": true
+    },
+    "graceful-readlink": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/graceful-readlink/-/graceful-readlink-1.0.1.tgz",
+      "integrity": "sha1-TK+tdrxi8C+gObL5Tpo906ORpyU=",
+      "dev": true
+    },
+    "growly": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/growly/-/growly-1.3.0.tgz",
+      "integrity": "sha1-8QdIy+dq+WS3yWyTxrzCivEgwIE=",
+      "dev": true
+    },
+    "handlebars": {
+      "version": "4.0.10",
+      "resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.0.10.tgz",
+      "integrity": "sha1-PTDHGLCaPZbyPqTMH0A8TTup/08=",
+      "dev": true,
+      "dependencies": {
+        "async": {
+          "version": "1.5.2",
+          "resolved": "https://registry.npmjs.org/async/-/async-1.5.2.tgz",
+          "integrity": "sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=",
+          "dev": true
+        },
+        "source-map": {
+          "version": "0.4.4",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.4.4.tgz",
+          "integrity": "sha1-66T12pwNyZneaAMti092FzZSA2s=",
+          "dev": true
+        }
+      }
+    },
+    "has-ansi": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz",
+      "integrity": "sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE="
+    },
+    "has-binary": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/has-binary/-/has-binary-0.1.7.tgz",
+      "integrity": "sha1-aOYesWIQyVRaClzOBqhzkS/h5ow=",
+      "dev": true,
+      "dependencies": {
+        "isarray": {
+          "version": "0.0.1",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
+          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=",
+          "dev": true
+        }
+      }
+    },
+    "has-cors": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-cors/-/has-cors-1.1.0.tgz",
+      "integrity": "sha1-XkdHk/fqmEPRu5nCPu9J/xJv/zk=",
+      "dev": true
+    },
+    "has-flag": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-2.0.0.tgz",
+      "integrity": "sha1-6CB68cx7MNRGzHC3NLXovhj4jVE=",
+      "dev": true
+    },
+    "has-unicode": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
+      "integrity": "sha1-4Ob+aijPUROIVeCG0Wkedx3iqLk=",
+      "dev": true
+    },
+    "hash-for-dep": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/hash-for-dep/-/hash-for-dep-1.2.0.tgz",
+      "integrity": "sha512-nTAMv4FEqSmV/u/LnPnw0YZJP0Qve7lLv5D8q5Zu441gI/lBZCq3BwnoZjlOn/HBLoK9DgyY+qVhCzxb1dAAiA=="
+    },
+    "hawk": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/hawk/-/hawk-1.1.1.tgz",
+      "integrity": "sha1-h81JH5tG5OKurKM1QWdmiF0tHtk=",
+      "dev": true,
+      "optional": true
+    },
+    "heimdalljs": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/heimdalljs/-/heimdalljs-0.2.5.tgz",
+      "integrity": "sha1-aqVDCO7nk7ZCz/nPlHgURfN3MKw=",
+      "dependencies": {
+        "rsvp": {
+          "version": "3.2.1",
+          "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-3.2.1.tgz",
+          "integrity": "sha1-B8tKXfJa3Z6Cbrxn3Mn9idsn2Eo="
+        }
+      }
+    },
+    "heimdalljs-fs-monitor": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/heimdalljs-fs-monitor/-/heimdalljs-fs-monitor-0.1.0.tgz",
+      "integrity": "sha1-1ASmVojGcUxIVGntNJXaSFNEAnI=",
+      "dev": true
+    },
+    "heimdalljs-graph": {
+      "version": "0.3.3",
+      "resolved": "https://registry.npmjs.org/heimdalljs-graph/-/heimdalljs-graph-0.3.3.tgz",
+      "integrity": "sha1-6oAdu6ZZyNUi/hy4Oy1gVybkkY8=",
+      "dev": true
+    },
+    "heimdalljs-logger": {
+      "version": "0.1.9",
+      "resolved": "https://registry.npmjs.org/heimdalljs-logger/-/heimdalljs-logger-0.1.9.tgz",
+      "integrity": "sha1-12raTkW3u294b8nAEKaOsuL68XY="
+    },
+    "hoek": {
+      "version": "0.9.1",
+      "resolved": "https://registry.npmjs.org/hoek/-/hoek-0.9.1.tgz",
+      "integrity": "sha1-PTIkYrrfB3Fup+uFuviAec3c5QU=",
+      "dev": true
+    },
+    "home-or-tmp": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-2.0.0.tgz",
+      "integrity": "sha1-42w/LSyufXRqhX440Y1fMqeILbg="
+    },
+    "homedir-polyfill": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/homedir-polyfill/-/homedir-polyfill-1.0.1.tgz",
+      "integrity": "sha1-TCu8inWJmP7r9e1oWA921GdotLw=",
+      "dev": true
+    },
+    "hosted-git-info": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.5.0.tgz",
+      "integrity": "sha512-pNgbURSuab90KbTqvRPsseaTxOJCZBD0a7t+haSN33piP9cCM4l0CqdzAif2hUqm716UovKB2ROmiabGAKVXyg==",
+      "dev": true
+    },
+    "http-errors": {
+      "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.2.tgz",
+      "integrity": "sha1-CgAsyFcHGSp+eUbO7cERVfYOxzY=",
+      "dev": true
+    },
+    "http-parser-js": {
+      "version": "0.4.5",
+      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.4.5.tgz",
+      "integrity": "sha512-sYaqbMBf8hoS6OZBwMygxdLD3TsWgzheP55nkQ7GiR7gsn8x+2oTMCoJSAQmNm3obzOjJYT6tdTz1XcYjKyUqg==",
+      "dev": true
+    },
+    "http-proxy": {
+      "version": "1.16.2",
+      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.16.2.tgz",
+      "integrity": "sha1-Bt/ykpUr9k2+hHH6nfcwZtTzd0I=",
+      "dev": true
+    },
+    "http-signature": {
+      "version": "0.10.1",
+      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-0.10.1.tgz",
+      "integrity": "sha1-T72sEyVZqoMjEh5UB3nAoBKyfmY=",
+      "dev": true,
+      "optional": true
+    },
+    "iconv-lite": {
+      "version": "0.4.19",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.19.tgz",
+      "integrity": "sha512-oTZqweIP51xaGPI4uPa56/Pri/480R+mo7SeU+YETByQNhDG55ycFyNLIgta9vXhILrxXDmF7ZGhqZIcuN0gJQ==",
+      "dev": true
+    },
+    "ignore": {
+      "version": "3.3.5",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-3.3.5.tgz",
+      "integrity": "sha512-JLH93mL8amZQhh/p6mfQgVBH3M6epNq3DfsXsTSuSrInVjwyYlFE1nv2AgfRCC8PoOhM0jwQ5v8s9LgbK7yGDw==",
+      "dev": true
+    },
+    "imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
+      "dev": true
+    },
+    "indexof": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/indexof/-/indexof-0.0.1.tgz",
+      "integrity": "sha1-gtwzbSMrkGIXnQWrMpOmYFn9Q10=",
+      "dev": true
+    },
+    "inflection": {
+      "version": "1.12.0",
+      "resolved": "https://registry.npmjs.org/inflection/-/inflection-1.12.0.tgz",
+      "integrity": "sha1-ogCTVlbW9fa8TcdQLhrstwMihBY=",
+      "dev": true
+    },
+    "inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk="
+    },
+    "inherits": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
+      "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
+    },
+    "ini": {
+      "version": "1.3.4",
+      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.4.tgz",
+      "integrity": "sha1-BTfLedr1m1mhpRff9wbIbsA5Fi4=",
+      "dev": true
+    },
+    "inline-source-map-comment": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/inline-source-map-comment/-/inline-source-map-comment-1.0.5.tgz",
+      "integrity": "sha1-UKikTCp5DfrEQbXJTszVRiY1+vY=",
+      "dev": true,
+      "dependencies": {
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        }
+      }
+    },
+    "inquirer": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-1.2.3.tgz",
+      "integrity": "sha1-TexvMvN+97sLLtPx0aXD9UUHSRg=",
+      "dev": true
+    },
+    "invariant": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.2.tgz",
+      "integrity": "sha1-nh9WrArNtr8wMwbzOL47IErmA2A="
+    },
+    "invert-kv": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/invert-kv/-/invert-kv-1.0.0.tgz",
+      "integrity": "sha1-EEqOSqym09jNFXqO+L+rLXo//bY=",
+      "dev": true
+    },
+    "ipaddr.js": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.4.0.tgz",
+      "integrity": "sha1-KWrKh4qCGBbluF0KKFqZvP9FgvA=",
+      "dev": true
+    },
+    "is-binary-path": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-1.0.1.tgz",
+      "integrity": "sha1-dfFmQrSA8YenEcgUFh/TpKdlWJg=",
+      "dev": true
+    },
+    "is-buffer": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.5.tgz",
+      "integrity": "sha1-Hzsm72E7IUuIy8ojzGwB2Hlh7sw=",
+      "dev": true
+    },
+    "is-dotfile": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/is-dotfile/-/is-dotfile-1.0.3.tgz",
+      "integrity": "sha1-pqLzL/0t+wT1yiXs0Pa4PPeYoeE=",
+      "dev": true
+    },
+    "is-equal-shallow": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz",
+      "integrity": "sha1-IjgJj8Ih3gvPpdnqxMRdY4qhxTQ=",
+      "dev": true
+    },
+    "is-extendable": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
+      "integrity": "sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=",
+      "dev": true
+    },
+    "is-extglob": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-1.0.0.tgz",
+      "integrity": "sha1-rEaBd8SUNAWgkvyPKXYMb/xiBsA=",
+      "dev": true
+    },
+    "is-finite": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-finite/-/is-finite-1.0.2.tgz",
+      "integrity": "sha1-zGZ3aVYCvlUO8R6LSqYwU0K20Ko="
+    },
+    "is-fullwidth-code-point": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
+      "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
+      "dev": true
+    },
+    "is-git-url": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-git-url/-/is-git-url-1.0.0.tgz",
+      "integrity": "sha1-U/aEzRQyhbUsMkS05vKCU1J69ms=",
+      "dev": true
+    },
+    "is-glob": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-2.0.1.tgz",
+      "integrity": "sha1-0Jb5JqPe1WAPP9/ZEZjLCIjC2GM=",
+      "dev": true
+    },
+    "is-integer": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/is-integer/-/is-integer-1.0.7.tgz",
+      "integrity": "sha1-a96Bqs3feLZZtmKdYpytxRqIbVw=",
+      "dev": true
+    },
+    "is-number": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-2.1.0.tgz",
+      "integrity": "sha1-Afy7s5NGOlSPL0ZszhbezknbkI8=",
+      "dev": true
+    },
+    "is-obj": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
+      "integrity": "sha1-PkcprB9f3gJc19g6iW2rn09n2w8=",
+      "dev": true
+    },
+    "is-path-cwd": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-1.0.0.tgz",
+      "integrity": "sha1-0iXsIxMuie3Tj9p2dHLmLmXxEG0=",
+      "dev": true
+    },
+    "is-path-in-cwd": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-path-in-cwd/-/is-path-in-cwd-1.0.0.tgz",
+      "integrity": "sha1-ZHdYK4IU1gI0YJRWcAO+ip6sBNw=",
+      "dev": true
+    },
+    "is-path-inside": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-1.0.0.tgz",
+      "integrity": "sha1-/AbloWg/vaE95mev9xe7wQpI838=",
+      "dev": true
+    },
+    "is-posix-bracket": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz",
+      "integrity": "sha1-MzTceXdDaOkvAW5vvAqI9c1ua8Q=",
+      "dev": true
+    },
+    "is-primitive": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/is-primitive/-/is-primitive-2.0.0.tgz",
+      "integrity": "sha1-IHurkWOEmcB7Kt8kCkGochADRXU=",
+      "dev": true
+    },
+    "is-promise": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-2.1.0.tgz",
+      "integrity": "sha1-eaKp7OfwlugPNtKy87wWwf9L8/o=",
+      "dev": true
+    },
+    "is-resolvable": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-resolvable/-/is-resolvable-1.0.0.tgz",
+      "integrity": "sha1-jfV8YeouPFAUCNEA+wE8+NbgzGI=",
+      "dev": true
+    },
+    "is-stream": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
+      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ=",
+      "dev": true
+    },
+    "is-type": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/is-type/-/is-type-0.0.1.tgz",
+      "integrity": "sha1-9lHYXDZdRJVdFKUdjXBh8/a0d5w=",
+      "dev": true
+    },
+    "is-windows": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/is-windows/-/is-windows-0.2.0.tgz",
+      "integrity": "sha1-3hqm1j6indJIc3tp8f+LgALSEIw=",
+      "dev": true
+    },
+    "isarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
+      "dev": true
+    },
+    "isbinaryfile": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-3.0.2.tgz",
+      "integrity": "sha1-Sj6XTsDLqQBNP8bN5yCeppNopiE=",
+      "dev": true
+    },
+    "isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
+      "dev": true
+    },
+    "isobject": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/isobject/-/isobject-2.1.0.tgz",
+      "integrity": "sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=",
+      "dev": true
+    },
+    "istextorbinary": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/istextorbinary/-/istextorbinary-2.1.0.tgz",
+      "integrity": "sha1-2+0qb1G+L3R1to+JRlgRFBt1iHQ="
+    },
+    "jquery": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/jquery/-/jquery-3.2.1.tgz",
+      "integrity": "sha1-XE2d5lKvbNCncBVKYxu6ErAVx4c=",
+      "dev": true
+    },
+    "js-reporters": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/js-reporters/-/js-reporters-1.2.0.tgz",
+      "integrity": "sha1-fPLLaYGWaEeQNQ0MTKB/Su2ewX4=",
+      "dev": true
+    },
+    "js-tokens": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-3.0.2.tgz",
+      "integrity": "sha1-mGbfOVECEw449/mWvOtlRDIJwls="
+    },
+    "js-yaml": {
+      "version": "3.10.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.10.0.tgz",
+      "integrity": "sha512-O2v52ffjLa9VeM43J4XocZE//WT9N0IiwDa3KSHH7Tu8CtH+1qM8SIZvnsTh6v+4yFy5KUY3BHUVwjpfAWsjIA==",
+      "dev": true,
+      "dependencies": {
+        "esprima": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.0.tgz",
+          "integrity": "sha512-oftTcaMu/EGrEIu904mWteKIv8vMuOgGYo7EhVJJN00R/EED9DCua/xxHRdYnKtcECzVg7xOWhflvJMnqcFZjw==",
+          "dev": true
+        }
+      }
+    },
+    "jschardet": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/jschardet/-/jschardet-1.5.1.tgz",
+      "integrity": "sha512-vE2hT1D0HLZCLLclfBSfkfTTedhVj0fubHpJBHKwwUWX0nSbhPAfk+SG9rTX95BYNmau8rGFfCeaT6T5OW1C2A==",
+      "dev": true
+    },
+    "jsesc": {
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-0.5.0.tgz",
+      "integrity": "sha1-597mbjXW/Bb3EP6R1c9p9w8IkR0="
+    },
+    "json-schema-traverse": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz",
+      "integrity": "sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=",
+      "dev": true
+    },
+    "json-stable-stringify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify/-/json-stable-stringify-1.0.1.tgz",
+      "integrity": "sha1-mnWdOcXy/1A/1TAGRu1EX4jE+a8="
+    },
+    "json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
+      "dev": true
+    },
+    "json3": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/json3/-/json3-3.3.2.tgz",
+      "integrity": "sha1-PAQ0dD35Pi9cQq7nsZvLSDV19OE=",
+      "dev": true
+    },
+    "json5": {
+      "version": "0.5.1",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-0.5.1.tgz",
+      "integrity": "sha1-Hq3nrMASA0rYTiOWdn6tn6VJWCE="
+    },
+    "jsonfile": {
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz",
+      "integrity": "sha1-NzaitCi4e72gzIO1P6PWM6NcKug=",
+      "dev": true
+    },
+    "jsonify": {
+      "version": "0.0.0",
+      "resolved": "https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz",
+      "integrity": "sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM="
+    },
+    "kind-of": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
+      "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
+      "dev": true
+    },
+    "klaw": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz",
+      "integrity": "sha1-QIhDO0azsbolnXh4XY6W9zugJDk=",
+      "dev": true
+    },
+    "lazy-cache": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/lazy-cache/-/lazy-cache-1.0.4.tgz",
+      "integrity": "sha1-odePw6UEdMuAhF07O24dpJpEbo4=",
+      "dev": true
+    },
+    "lcid": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/lcid/-/lcid-1.0.0.tgz",
+      "integrity": "sha1-MIrMr6C8SDo4Z7S28rlQYlHRuDU=",
+      "dev": true
+    },
+    "leek": {
+      "version": "0.0.24",
+      "resolved": "https://registry.npmjs.org/leek/-/leek-0.0.24.tgz",
+      "integrity": "sha1-5ADlfw5g2O8r1NBo3EKKVDRdvNo=",
+      "dev": true
+    },
+    "leven": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-1.0.2.tgz",
+      "integrity": "sha1-kUS27ryl8dBoAWnxpncNzqYLdcM=",
+      "dev": true
+    },
+    "levn": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
+      "integrity": "sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=",
+      "dev": true
+    },
+    "linkify-it": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-2.0.3.tgz",
+      "integrity": "sha1-2UpGSPmxwXnWT6lykSaL22zpQ08=",
+      "dev": true
+    },
+    "livereload-js": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/livereload-js/-/livereload-js-2.2.2.tgz",
+      "integrity": "sha1-bIclfmSKtHW8JOoldFftzB+NC8I=",
+      "dev": true
+    },
+    "loader.js": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/loader.js/-/loader.js-4.6.0.tgz",
+      "integrity": "sha512-NjAnzMq/BM2VlXA9er0Nx1Runocgi+hEU53ENhCtTx82GX6/l9NXwfIqg81om6QvmhUlv2zH+4R+N+wOoeXytQ==",
+      "dev": true
+    },
+    "locate-path": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz",
+      "integrity": "sha1-K1aLJl7slExtnA3pw9u7ygNUzY4=",
+      "dev": true
+    },
+    "lodash": {
+      "version": "4.17.4",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.4.tgz",
+      "integrity": "sha1-eCA6TRwyiuHYbcpkYONptX9AVa4="
+    },
+    "lodash-es": {
+      "version": "4.17.4",
+      "resolved": "https://registry.npmjs.org/lodash-es/-/lodash-es-4.17.4.tgz",
+      "integrity": "sha1-3MHXVS4VCgZABzupyzHXDwMpUOc=",
+      "dev": true
+    },
+    "lodash-node": {
+      "version": "3.10.2",
+      "resolved": "https://registry.npmjs.org/lodash-node/-/lodash-node-3.10.2.tgz",
+      "integrity": "sha1-JZjVsbVOami0y1ROXHMJU8v2Mvc=",
+      "dev": true
+    },
+    "lodash._baseassign": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/lodash._baseassign/-/lodash._baseassign-3.2.0.tgz",
+      "integrity": "sha1-jDigmVAPIVrQnlnxci/QxSv+Ck4=",
+      "dev": true,
+      "dependencies": {
+        "lodash.keys": {
+          "version": "3.1.2",
+          "resolved": "https://registry.npmjs.org/lodash.keys/-/lodash.keys-3.1.2.tgz",
+          "integrity": "sha1-TbwEcrFWvlCgsoaFXRvQsMZWCYo=",
+          "dev": true
+        }
+      }
+    },
+    "lodash._basebind": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._basebind/-/lodash._basebind-2.3.0.tgz",
+      "integrity": "sha1-K1vEUqDhBhQ7IYafIzvbWHQX0kg=",
+      "dev": true
+    },
+    "lodash._basecopy": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/lodash._basecopy/-/lodash._basecopy-3.0.1.tgz",
+      "integrity": "sha1-jaDmqHbPNEwK2KVIghEd08XHyjY=",
+      "dev": true
+    },
+    "lodash._basecreate": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._basecreate/-/lodash._basecreate-2.3.0.tgz",
+      "integrity": "sha1-m4ioak3P97fzxh2Dovz8BnHsneA=",
+      "dev": true
+    },
+    "lodash._basecreatecallback": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._basecreatecallback/-/lodash._basecreatecallback-2.3.0.tgz",
+      "integrity": "sha1-N7KrF1kaM56YjbMln81GAZ16w2I=",
+      "dev": true
+    },
+    "lodash._basecreatewrapper": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._basecreatewrapper/-/lodash._basecreatewrapper-2.3.0.tgz",
+      "integrity": "sha1-qgxhrZYETDkzN2ExSDqXWcNlEkc=",
+      "dev": true
+    },
+    "lodash._baseflatten": {
+      "version": "3.1.4",
+      "resolved": "https://registry.npmjs.org/lodash._baseflatten/-/lodash._baseflatten-3.1.4.tgz",
+      "integrity": "sha1-B3D/gBMa9uNPO1EXlqe6UhTmX/c=",
+      "dev": true
+    },
+    "lodash._bindcallback": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/lodash._bindcallback/-/lodash._bindcallback-3.0.1.tgz",
+      "integrity": "sha1-5THCdkTPi1epnhftlbNcdIeJOS4=",
+      "dev": true
+    },
+    "lodash._createassigner": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/lodash._createassigner/-/lodash._createassigner-3.1.1.tgz",
+      "integrity": "sha1-g4pbri/aymOsIt7o4Z+k5taXCxE=",
+      "dev": true
+    },
+    "lodash._createwrapper": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._createwrapper/-/lodash._createwrapper-2.3.0.tgz",
+      "integrity": "sha1-0arhEC2t9EDo4G/BM6bt1/4UYHU=",
+      "dev": true
+    },
+    "lodash._escapehtmlchar": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._escapehtmlchar/-/lodash._escapehtmlchar-2.3.0.tgz",
+      "integrity": "sha1-0D2mvYLu3zjcCltQPXQOzQ6JRZI=",
+      "dev": true
+    },
+    "lodash._escapestringchar": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._escapestringchar/-/lodash._escapestringchar-2.3.0.tgz",
+      "integrity": "sha1-zOc65g/G2lXSv4oGecI8orqxSfw=",
+      "dev": true
+    },
+    "lodash._getnative": {
+      "version": "3.9.1",
+      "resolved": "https://registry.npmjs.org/lodash._getnative/-/lodash._getnative-3.9.1.tgz",
+      "integrity": "sha1-VwvH3t5G1hzc3mh9ZdPuy6o6r/U=",
+      "dev": true
+    },
+    "lodash._htmlescapes": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._htmlescapes/-/lodash._htmlescapes-2.3.0.tgz",
+      "integrity": "sha1-HKmIY8rfH6HYLITzXzHkBVagTzo=",
+      "dev": true
+    },
+    "lodash._isiterateecall": {
+      "version": "3.0.9",
+      "resolved": "https://registry.npmjs.org/lodash._isiterateecall/-/lodash._isiterateecall-3.0.9.tgz",
+      "integrity": "sha1-UgOte6Ql+uhCRg5pbbnPPmqsBXw=",
+      "dev": true
+    },
+    "lodash._objecttypes": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._objecttypes/-/lodash._objecttypes-2.3.0.tgz",
+      "integrity": "sha1-aj6jmH3W7rgCGy1cnDA1Scwrrh4=",
+      "dev": true
+    },
+    "lodash._reinterpolate": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._reinterpolate/-/lodash._reinterpolate-2.3.0.tgz",
+      "integrity": "sha1-A+6dhcDlXL1ZDXFgiilb3aURKOw=",
+      "dev": true
+    },
+    "lodash._renative": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._renative/-/lodash._renative-2.3.0.tgz",
+      "integrity": "sha1-d9jt1M7SbdWXH54Vpfdy5OMX+9M=",
+      "dev": true
+    },
+    "lodash._reunescapedhtml": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._reunescapedhtml/-/lodash._reunescapedhtml-2.3.0.tgz",
+      "integrity": "sha1-25ILVax/P/glk5rOubosIxcT0k0=",
+      "dev": true
+    },
+    "lodash._setbinddata": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._setbinddata/-/lodash._setbinddata-2.3.0.tgz",
+      "integrity": "sha1-5WEEkKzRMnfVmFjZW18nJ/FQjwQ=",
+      "dev": true
+    },
+    "lodash._shimkeys": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._shimkeys/-/lodash._shimkeys-2.3.0.tgz",
+      "integrity": "sha1-YR+TFJ4+bHIQlrSHae8pU3rai6k=",
+      "dev": true
+    },
+    "lodash._slice": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash._slice/-/lodash._slice-2.3.0.tgz",
+      "integrity": "sha1-FHGYEyhZly5GgMoppZkshVZpqlw=",
+      "dev": true
+    },
+    "lodash.assign": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/lodash.assign/-/lodash.assign-3.2.0.tgz",
+      "integrity": "sha1-POnwI0tLIiPilrj6CsH+6OvKZPo=",
+      "dev": true,
+      "dependencies": {
+        "lodash.keys": {
+          "version": "3.1.2",
+          "resolved": "https://registry.npmjs.org/lodash.keys/-/lodash.keys-3.1.2.tgz",
+          "integrity": "sha1-TbwEcrFWvlCgsoaFXRvQsMZWCYo=",
+          "dev": true
+        }
+      }
+    },
+    "lodash.assignin": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/lodash.assignin/-/lodash.assignin-4.2.0.tgz",
+      "integrity": "sha1-uo31+4QesKPoBEIysOJjqNxqKKI=",
+      "dev": true
+    },
+    "lodash.bind": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.bind/-/lodash.bind-2.3.0.tgz",
+      "integrity": "sha1-wqjhi2jl7MFS4rFoJmEW/qWwFsw=",
+      "dev": true
+    },
+    "lodash.clonedeep": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
+      "integrity": "sha1-4j8/nE+Pvd6HJSnBBxhXoIblzO8=",
+      "dev": true
+    },
+    "lodash.debounce": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-3.1.1.tgz",
+      "integrity": "sha1-gSIRw3ipTMKdWqTjNGzwv846ffU=",
+      "dev": true
+    },
+    "lodash.defaults": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-2.3.0.tgz",
+      "integrity": "sha1-qDKwAfE487uXIcKBmip8xa4h7SU=",
+      "dev": true
+    },
+    "lodash.defaultsdeep": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/lodash.defaultsdeep/-/lodash.defaultsdeep-4.6.0.tgz",
+      "integrity": "sha1-vsECT4WxvZbL6kBbI8FK1kQ6b4E=",
+      "dev": true
+    },
+    "lodash.escape": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.escape/-/lodash.escape-2.3.0.tgz",
+      "integrity": "sha1-hEw4xY+EThNi6+lnJhWbYs9fKlg=",
+      "dev": true
+    },
+    "lodash.find": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/lodash.find/-/lodash.find-4.6.0.tgz",
+      "integrity": "sha1-ywcE1Hq3F4n/oN6Ll92Sb7iLE7E=",
+      "dev": true
+    },
+    "lodash.flatten": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-3.0.2.tgz",
+      "integrity": "sha1-3hz1d1j49EeTGdNcPpzGDEUBk4w=",
+      "dev": true
+    },
+    "lodash.foreach": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.foreach/-/lodash.foreach-2.3.0.tgz",
+      "integrity": "sha1-CDQEyR6EbudyRf3512UZxosq8Wg=",
+      "dev": true
+    },
+    "lodash.forown": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.forown/-/lodash.forown-2.3.0.tgz",
+      "integrity": "sha1-JPtKr4ANRfwtxgv+w84EyDajrX8=",
+      "dev": true
+    },
+    "lodash.identity": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.identity/-/lodash.identity-2.3.0.tgz",
+      "integrity": "sha1-awGiEMlIU1XCqRO0i2cRIZoXPe0=",
+      "dev": true
+    },
+    "lodash.isarguments": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
+      "integrity": "sha1-L1c9hcaiQon/AGY7SRwdM4/zRYo=",
+      "dev": true
+    },
+    "lodash.isarray": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/lodash.isarray/-/lodash.isarray-3.0.4.tgz",
+      "integrity": "sha1-eeTriMNqgSKvhvhEqpvNhRtfu1U=",
+      "dev": true
+    },
+    "lodash.isfunction": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.isfunction/-/lodash.isfunction-2.3.0.tgz",
+      "integrity": "sha1-aylz5HpkfPEucNZ2rqE2Q3BuUmc=",
+      "dev": true
+    },
+    "lodash.isobject": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.isobject/-/lodash.isobject-2.3.0.tgz",
+      "integrity": "sha1-LhbT/Fg9qYMZaJU/LY5tc0NPZ5k=",
+      "dev": true
+    },
+    "lodash.keys": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.keys/-/lodash.keys-2.3.0.tgz",
+      "integrity": "sha1-s1D0+Syqn0WkouzwGEVM8vKK4lM=",
+      "dev": true
+    },
+    "lodash.merge": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.0.tgz",
+      "integrity": "sha1-aYhLoUSsM/5plzemCG3v+t0PicU=",
+      "dev": true
+    },
+    "lodash.noop": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.noop/-/lodash.noop-2.3.0.tgz",
+      "integrity": "sha1-MFnWKNUbv5N80qC2/Dp/ISpmnCw=",
+      "dev": true
+    },
+    "lodash.omit": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.omit/-/lodash.omit-4.5.0.tgz",
+      "integrity": "sha1-brGa5aHuHdnfC5aeZs4Lf6MLXmA=",
+      "dev": true
+    },
+    "lodash.restparam": {
+      "version": "3.6.1",
+      "resolved": "https://registry.npmjs.org/lodash.restparam/-/lodash.restparam-3.6.1.tgz",
+      "integrity": "sha1-k2pOMJ7zMKdkXtQUWYbIWuWyCAU=",
+      "dev": true
+    },
+    "lodash.support": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.support/-/lodash.support-2.3.0.tgz",
+      "integrity": "sha1-fq8DivTw1qq3drRKptz8gDNMm/0=",
+      "dev": true
+    },
+    "lodash.template": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/lodash.template/-/lodash.template-4.4.0.tgz",
+      "integrity": "sha1-5zoDhcg1VZF0bgILmWecaQ5o+6A=",
+      "dev": true,
+      "dependencies": {
+        "lodash._reinterpolate": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/lodash._reinterpolate/-/lodash._reinterpolate-3.0.0.tgz",
+          "integrity": "sha1-DM8tiRZq8Ds2Y8eWU4t1rG4RTZ0=",
+          "dev": true
+        },
+        "lodash.templatesettings": {
+          "version": "4.1.0",
+          "resolved": "https://registry.npmjs.org/lodash.templatesettings/-/lodash.templatesettings-4.1.0.tgz",
+          "integrity": "sha1-K01OlbpEDZFf8IvImeRVNmZxMxY=",
+          "dev": true
+        }
+      }
+    },
+    "lodash.templatesettings": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.templatesettings/-/lodash.templatesettings-2.3.0.tgz",
+      "integrity": "sha1-MD0TLDQnEAQNWhjvqi1XL9A/jNw=",
+      "dev": true
+    },
+    "lodash.uniq": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
+      "integrity": "sha1-0CJTc662Uq3BvILklFM5qEJ1R3M=",
+      "dev": true
+    },
+    "lodash.uniqby": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/lodash.uniqby/-/lodash.uniqby-4.7.0.tgz",
+      "integrity": "sha1-2ZwHpmnp5tJOE2Lf4mbGdhavEwI=",
+      "dev": true
+    },
+    "lodash.values": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.values/-/lodash.values-2.3.0.tgz",
+      "integrity": "sha1-ypb75gogsLDsK6K6X8anZb0Uo7o=",
+      "dev": true
+    },
+    "longest": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/longest/-/longest-1.0.1.tgz",
+      "integrity": "sha1-MKCy2jj3N3DoKUoNIuZiXtd9AJc=",
+      "dev": true
+    },
+    "loose-envify": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.3.1.tgz",
+      "integrity": "sha1-0aitM/qc4OcT1l/dCsi3SNR4yEg="
+    },
+    "lru-cache": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.1.tgz",
+      "integrity": "sha512-q4spe4KTfsAS1SUHLO0wz8Qiyf1+vMIAgpRYioFYDMNqKfHQbg+AVDH3i4fvpl71/P1L0dBl+fQi+P37UYf0ew==",
+      "dev": true
+    },
+    "make-dir": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-1.0.0.tgz",
+      "integrity": "sha1-l6ARdR6R3YfPre9Ygy67BJNt6Xg=",
+      "dev": true
+    },
+    "makeerror": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.11.tgz",
+      "integrity": "sha1-4BpckQnyr3lmDk6LlYd5AYT1qWw=",
+      "dev": true
+    },
+    "markdown-it": {
+      "version": "8.4.0",
+      "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-8.4.0.tgz",
+      "integrity": "sha512-tNuOCCfunY5v5uhcO2AUMArvKAyKMygX8tfup/JrgnsDqcCATQsAExBq7o5Ml9iMmO82bk6jYNLj6khcrl0JGA==",
+      "dev": true
+    },
+    "markdown-it-terminal": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/markdown-it-terminal/-/markdown-it-terminal-0.1.0.tgz",
+      "integrity": "sha1-VFq9jdAcPWI1O/zqcdtYC1HSK9k=",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": {
+          "version": "3.2.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.0.tgz",
+          "integrity": "sha512-NnSOmMEYtVR2JVMIGTzynRkkaxtiq1xnFBcdQD/DnNCYPoEPsVJhM98BDyaoNOQIi7p4okdi3E27eN7GQbsUug==",
+          "dev": true
+        }
+      }
+    },
+    "matcher-collection": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/matcher-collection/-/matcher-collection-1.0.4.tgz",
+      "integrity": "sha1-L2auCGmZbynkPQtiyD3R1D5YF1U="
+    },
+    "md5-hex": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-2.0.0.tgz",
+      "integrity": "sha1-0FiOnxx0lUSS7NJKwKxs6ZfZLjM=",
+      "dev": true
+    },
+    "md5-o-matic": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/md5-o-matic/-/md5-o-matic-0.1.1.tgz",
+      "integrity": "sha1-givM1l4RfFFPqxdrJZRdVBAKA8M=",
+      "dev": true
+    },
+    "mdn-links": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/mdn-links/-/mdn-links-0.1.0.tgz",
+      "integrity": "sha1-4kyDuXy0xYhsw58veAcF+/4nOqU=",
+      "dev": true
+    },
+    "mdurl": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz",
+      "integrity": "sha1-/oWy7HWlkDfyrf7BAP1sYBdhFS4=",
+      "dev": true
+    },
+    "media-typer": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
+      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=",
+      "dev": true
+    },
+    "memory-streams": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/memory-streams/-/memory-streams-0.1.2.tgz",
+      "integrity": "sha1-Jz/3d6tg/sWZsRY1UlUoLMosUMI=",
+      "dev": true
+    },
+    "merge": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/merge/-/merge-1.2.0.tgz",
+      "integrity": "sha1-dTHjnUlJwoGma4xabgJl6LBYlNo=",
+      "dev": true
+    },
+    "merge-descriptors": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
+      "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=",
+      "dev": true
+    },
+    "merge-trees": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/merge-trees/-/merge-trees-1.0.1.tgz",
+      "integrity": "sha1-zL5nRWl4f53vF/1G5lJfVwC70j4=",
+      "dev": true
+    },
+    "methods": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
+      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=",
+      "dev": true
+    },
+    "micromatch": {
+      "version": "2.3.11",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-2.3.11.tgz",
+      "integrity": "sha1-hmd8l9FyCzY0MdBNDRUpO9OMFWU=",
+      "dev": true
+    },
+    "mime": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-1.4.0.tgz",
+      "integrity": "sha512-n9ChLv77+QQEapYz8lV+rIZAW3HhAPW2CXnzb1GN5uMkuczshwvkW7XPsbzU0ZQN3sP47Er2KVkp2p3KyqZKSQ==",
+      "dev": true
+    },
+    "mime-db": {
+      "version": "1.30.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.30.0.tgz",
+      "integrity": "sha1-dMZD2i3Z1qRTmZY0ZbJtXKfXHwE=",
+      "dev": true
+    },
+    "mime-types": {
+      "version": "2.1.17",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.17.tgz",
+      "integrity": "sha1-Cdejk/A+mVp5+K+Fe3Cp4KsWVXo=",
+      "dev": true
+    },
+    "mimic-fn": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.1.0.tgz",
+      "integrity": "sha1-5md4PZLonb00KBi1IwudYqZyrRg=",
+      "dev": true
+    },
+    "minimatch": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA=="
+    },
+    "minimist": {
+      "version": "0.0.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz",
+      "integrity": "sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0="
+    },
+    "mkdirp": {
+      "version": "0.5.1",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz",
+      "integrity": "sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM="
+    },
+    "mktemp": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/mktemp/-/mktemp-0.4.0.tgz",
+      "integrity": "sha1-bQUVYRyKjITkhKogABKbmOmB/ws="
+    },
+    "morgan": {
+      "version": "1.8.2",
+      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.8.2.tgz",
+      "integrity": "sha1-eErHc05KRTqcbm6GgKkyknXItoc=",
+      "dev": true
+    },
+    "mout": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/mout/-/mout-1.0.0.tgz",
+      "integrity": "sha1-m98dSvV9ZtR8s1OmM1oygQmOFQE=",
+      "dev": true
+    },
+    "ms": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
+    },
+    "mustache": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/mustache/-/mustache-2.3.0.tgz",
+      "integrity": "sha1-QCj3d4sXcIpImTCm5SrDvKDaQdA=",
+      "dev": true
+    },
+    "mute-stream": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.6.tgz",
+      "integrity": "sha1-SJYrGeFp/R38JAs/HnMXYnu8R9s=",
+      "dev": true
+    },
+    "nan": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/nan/-/nan-2.7.0.tgz",
+      "integrity": "sha1-2Vv3IeyHfgjbJ27T/G63j5CDrUY=",
+      "dev": true,
+      "optional": true
+    },
+    "natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
+      "dev": true
+    },
+    "negotiator": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz",
+      "integrity": "sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk=",
+      "dev": true
+    },
+    "node-fetch": {
+      "version": "1.7.3",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-1.7.3.tgz",
+      "integrity": "sha512-NhZ4CsKx7cYm2vSrBAr2PvFOe6sWDf0UYLRqA6svUYg7+/TSfVAu49jYC4BvQ4Sms9SZgdqGBgroqfDhJdTyKQ==",
+      "dev": true
+    },
+    "node-int64": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
+      "integrity": "sha1-h6kGXNs1XTGC2PlM4RGIuCXGijs=",
+      "dev": true
+    },
+    "node-modules-path": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/node-modules-path/-/node-modules-path-1.0.1.tgz",
+      "integrity": "sha1-QAlrCM560OoUaAhjr0ScfHWl0cg=",
+      "dev": true
+    },
+    "node-notifier": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/node-notifier/-/node-notifier-5.1.2.tgz",
+      "integrity": "sha1-L6nhJgX6EACdRFSdb82KY93g5P8=",
+      "dev": true
+    },
+    "nopt": {
+      "version": "3.0.6",
+      "resolved": "https://registry.npmjs.org/nopt/-/nopt-3.0.6.tgz",
+      "integrity": "sha1-xkZdvwirzU2zWTF/eaxopkayj/k=",
+      "dev": true
+    },
+    "normalize-path": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-2.1.1.tgz",
+      "integrity": "sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=",
+      "dev": true
+    },
+    "npm-git-info": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/npm-git-info/-/npm-git-info-1.0.3.tgz",
+      "integrity": "sha1-qTPELsMh6A02RuDW6ESv6UYw4dU=",
+      "dev": true
+    },
+    "npm-package-arg": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/npm-package-arg/-/npm-package-arg-4.2.1.tgz",
+      "integrity": "sha1-WTMD/eqF98Qid18X+et2cPaA4+w=",
+      "dev": true
+    },
+    "npm-run-path": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
+      "integrity": "sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=",
+      "dev": true
+    },
+    "npmlog": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-4.1.2.tgz",
+      "integrity": "sha512-2uUqazuKlTaSI/dC8AzicUck7+IrEaOnN/e0jd3Xtt1KcGpwx30v50mL7oPyr/h9bL3E4aZccVwpwP+5W9Vjkg==",
+      "dev": true
+    },
+    "number-is-nan": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz",
+      "integrity": "sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="
+    },
+    "oauth-sign": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.3.0.tgz",
+      "integrity": "sha1-y1QPk7srIqfVlBaRoojWDo6pOG4=",
+      "dev": true,
+      "optional": true
+    },
+    "object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
+    },
+    "object-component": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/object-component/-/object-component-0.0.3.tgz",
+      "integrity": "sha1-8MaapQ78lbhmwYb0AKM3acsvEpE=",
+      "dev": true
+    },
+    "object.omit": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/object.omit/-/object.omit-2.0.1.tgz",
+      "integrity": "sha1-Gpx0SCnznbuFjHbKNXmuKlTr0fo=",
+      "dev": true
+    },
+    "on-finished": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
+      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
+      "dev": true
+    },
+    "on-headers": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.1.tgz",
+      "integrity": "sha1-ko9dD0cNSTQmUepnlLCFfBAGk/c=",
+      "dev": true
+    },
+    "once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E="
+    },
+    "onetime": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-1.1.0.tgz",
+      "integrity": "sha1-ofeDj4MUxRbwXs78vEzP4EtO14k=",
+      "dev": true
+    },
+    "optimist": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/optimist/-/optimist-0.6.1.tgz",
+      "integrity": "sha1-2j6nRob6IaGaERwybpDrFaAZZoY=",
+      "dev": true
+    },
+    "optionator": {
+      "version": "0.8.2",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.2.tgz",
+      "integrity": "sha1-NkxeQJ0/TWMB1sC0wFu6UBgK62Q=",
+      "dev": true,
+      "dependencies": {
+        "wordwrap": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
+          "integrity": "sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=",
+          "dev": true
+        }
+      }
+    },
+    "options": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/options/-/options-0.0.6.tgz",
+      "integrity": "sha1-7CLTEoBrtT5zF3Pnza788cZDEo8=",
+      "dev": true
+    },
+    "ora": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/ora/-/ora-0.2.3.tgz",
+      "integrity": "sha1-N1J9Igrc1Tw5tzVx11QVbV22V6Q=",
+      "dev": true
+    },
+    "os-homedir": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz",
+      "integrity": "sha1-/7xJiDNuDoM94MFox+8VISGqf7M="
+    },
+    "os-locale": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-1.4.0.tgz",
+      "integrity": "sha1-IPnxeuKe00XoveWDsT0gCYA8FNk=",
+      "dev": true
+    },
+    "os-shim": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/os-shim/-/os-shim-0.1.3.tgz",
+      "integrity": "sha1-a2LDeRz3kJ6jXtRuF2WLtBfLORc=",
+      "dev": true
+    },
+    "os-tmpdir": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
+      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ="
+    },
+    "osenv": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/osenv/-/osenv-0.1.4.tgz",
+      "integrity": "sha1-Qv5tWVPfBsgGS+bxdsPQWqqjRkQ=",
+      "dev": true
+    },
+    "output-file-sync": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/output-file-sync/-/output-file-sync-1.1.2.tgz",
+      "integrity": "sha1-0KM+7+YaIF+suQCS6CZZjVJFznY=",
+      "dev": true
+    },
+    "p-finally": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
+      "integrity": "sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=",
+      "dev": true
+    },
+    "p-limit": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-1.1.0.tgz",
+      "integrity": "sha1-sH/y2aXYi+yAYDWJWiurZqJ5iLw=",
+      "dev": true
+    },
+    "p-locate": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz",
+      "integrity": "sha1-IKAQOyIqcMj9OcwuWAaA893l7EM=",
+      "dev": true
+    },
+    "parse-glob": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/parse-glob/-/parse-glob-3.0.4.tgz",
+      "integrity": "sha1-ssN2z7EfNVE7rdFz7wu246OIORw=",
+      "dev": true
+    },
+    "parse-passwd": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/parse-passwd/-/parse-passwd-1.0.0.tgz",
+      "integrity": "sha1-bVuTSkVpk7I9N/QKOC1vFmao5cY=",
+      "dev": true
+    },
+    "parsejson": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/parsejson/-/parsejson-0.0.3.tgz",
+      "integrity": "sha1-q343WfIJ7OmUN5c/fQ8fZK4OZKs=",
+      "dev": true
+    },
+    "parseqs": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/parseqs/-/parseqs-0.0.5.tgz",
+      "integrity": "sha1-1SCKNzjkZ2bikbouoXNoSSGouJ0=",
+      "dev": true
+    },
+    "parseuri": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/parseuri/-/parseuri-0.0.5.tgz",
+      "integrity": "sha1-gCBKUNTbt3m/3G6+J3jZDkvOMgo=",
+      "dev": true
+    },
+    "parseurl": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.2.tgz",
+      "integrity": "sha1-/CidTtiZMRlGDBViUyYs3I3mW/M=",
+      "dev": true
+    },
+    "path-exists": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
+      "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=",
+      "dev": true
+    },
+    "path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
+    },
+    "path-is-inside": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.2.tgz",
+      "integrity": "sha1-NlQX3t5EQw0cEa9hAn+s8HS9/FM=",
+      "dev": true
+    },
+    "path-key": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
+      "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=",
+      "dev": true
+    },
+    "path-parse": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.5.tgz",
+      "integrity": "sha1-PBrfhx6pzWyUMbbqK9dKD/BVxME="
+    },
+    "path-posix": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/path-posix/-/path-posix-1.0.0.tgz",
+      "integrity": "sha1-BrJhE/Vr6rBCVFojv6iAA8ysJg8="
+    },
+    "path-to-regexp": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
+      "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=",
+      "dev": true
+    },
+    "pify": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
+      "integrity": "sha1-7RQaasBDqEnqWISY59yosVMw6Qw=",
+      "dev": true
+    },
+    "pinkie": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
+      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA=",
+      "dev": true
+    },
+    "pinkie-promise": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
+      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
+      "dev": true
+    },
+    "pluralize": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/pluralize/-/pluralize-4.0.0.tgz",
+      "integrity": "sha1-WbcIwcAZCi9pLxx2GMRGsFL9F2I=",
+      "dev": true
+    },
+    "portfinder": {
+      "version": "1.0.13",
+      "resolved": "https://registry.npmjs.org/portfinder/-/portfinder-1.0.13.tgz",
+      "integrity": "sha1-uzLs2HwnEErm7kS1o8y/Drsa7ek=",
+      "dev": true,
+      "dependencies": {
+        "async": {
+          "version": "1.5.2",
+          "resolved": "https://registry.npmjs.org/async/-/async-1.5.2.tgz",
+          "integrity": "sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=",
+          "dev": true
+        }
+      }
+    },
+    "prelude-ls": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
+      "integrity": "sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=",
+      "dev": true
+    },
+    "preserve": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/preserve/-/preserve-0.2.0.tgz",
+      "integrity": "sha1-gV7R9uvGWSb4ZbMQwHE7yzMVzks=",
+      "dev": true
+    },
+    "pretender": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/pretender/-/pretender-1.5.1.tgz",
+      "integrity": "sha512-ay0fJGTt9iKLQSOQDCU+YeKuPfF1h9k8Oqbhy3Xgquya0+5R9UHZtWVLECamdA4+djftxE+lJaELwtTZ93K2Rw==",
+      "dev": true,
+      "dependencies": {
+        "route-recognizer": {
+          "version": "0.3.3",
+          "resolved": "https://registry.npmjs.org/route-recognizer/-/route-recognizer-0.3.3.tgz",
+          "integrity": "sha1-HTZeJ/ppleCRZ199yUCowANTvSk=",
+          "dev": true
+        }
+      }
+    },
+    "printf": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/printf/-/printf-0.2.5.tgz",
+      "integrity": "sha1-xDjKLKM+OSdnHbSracDlL5NqTw8=",
+      "dev": true
+    },
+    "private": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/private/-/private-0.1.7.tgz",
+      "integrity": "sha1-aM5eih7woju1cMwoU3tTMqumPvE="
+    },
+    "process-nextick-args": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-1.0.7.tgz",
+      "integrity": "sha1-FQ4gt1ZZCtP5EJPyWk8q2L/zC6M=",
+      "dev": true
+    },
+    "process-relative-require": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/process-relative-require/-/process-relative-require-1.0.0.tgz",
+      "integrity": "sha1-FZDfz1uPKYO6U+OYRGtoJAtMxoo=",
+      "dev": true
+    },
+    "progress": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.0.tgz",
+      "integrity": "sha1-ihvjZr+Pwj2yvSPxDG/pILQ4nR8=",
+      "dev": true
+    },
+    "promise-map-series": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/promise-map-series/-/promise-map-series-0.2.3.tgz",
+      "integrity": "sha1-wtN3r8kyU/a9A9u3d1XriKsgqEc="
+    },
+    "proxy-addr": {
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-1.1.5.tgz",
+      "integrity": "sha1-ccDuOxAt4/IC87ZPYI0XP8uhqRg=",
+      "dev": true
+    },
+    "pseudomap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
+      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM=",
+      "dev": true
+    },
+    "punycode": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
+      "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4=",
+      "dev": true,
+      "optional": true
+    },
+    "q": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/q/-/q-1.5.0.tgz",
+      "integrity": "sha1-3QG6ydBtMObyGa7LglPunr3DCPE=",
+      "dev": true
+    },
+    "qs": {
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.0.tgz",
+      "integrity": "sha512-fjVFjW9yhqMhVGwRExCXLhJKrLlkYSaxNWdyc9rmHlrVZbk35YHH312dFd7191uQeXkI3mKLZTIbSvIeFwFemg==",
+      "dev": true
+    },
+    "quick-temp": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/quick-temp/-/quick-temp-0.1.8.tgz",
+      "integrity": "sha1-urAqJCq4+w3XWKPJd2sy+aXZRAg="
+    },
+    "qunit-notifications": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/qunit-notifications/-/qunit-notifications-0.1.1.tgz",
+      "integrity": "sha1-MAGvxqanffvZYsy83d4S3sUobAk=",
+      "dev": true
+    },
+    "qunitjs": {
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/qunitjs/-/qunitjs-2.4.0.tgz",
+      "integrity": "sha1-WPOoHoRmh/Ln9jfFvtycJn+IcmE=",
+      "dev": true,
+      "dependencies": {
+        "commander": {
+          "version": "2.9.0",
+          "resolved": "https://registry.npmjs.org/commander/-/commander-2.9.0.tgz",
+          "integrity": "sha1-nJkJQXbhIkDLItbFFGCYQA/g99Q=",
+          "dev": true
+        },
+        "resolve": {
+          "version": "1.3.2",
+          "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.3.2.tgz",
+          "integrity": "sha1-HwRCyeDLuBNuh7kwX5MvRsfygjU=",
+          "dev": true
+        },
+        "walk-sync": {
+          "version": "0.3.1",
+          "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.3.1.tgz",
+          "integrity": "sha1-VYoWrqyMDbWcAotzxm85doTs5GU=",
+          "dev": true
+        }
+      }
+    },
+    "randomatic": {
+      "version": "1.1.7",
+      "resolved": "https://registry.npmjs.org/randomatic/-/randomatic-1.1.7.tgz",
+      "integrity": "sha512-D5JUjPyJbaJDkuAazpVnSfVkLlpeO3wDlPROTMLGKG1zMFNFRgrciKo1ltz/AzNTkqE0HzDx655QOL51N06how==",
+      "dev": true,
+      "dependencies": {
+        "is-number": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz",
+          "integrity": "sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=",
+          "dev": true,
+          "dependencies": {
+            "kind-of": {
+              "version": "3.2.2",
+              "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
+              "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
+              "dev": true
+            }
+          }
+        },
+        "kind-of": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-4.0.0.tgz",
+          "integrity": "sha1-IIE989cSkosgc3hpGkUGb65y3Vc=",
+          "dev": true
+        }
+      }
+    },
+    "range-parser": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.0.tgz",
+      "integrity": "sha1-9JvmtIeJTdxA3MlKMi9hEJLgDV4=",
+      "dev": true
+    },
+    "raw-body": {
+      "version": "1.1.7",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-1.1.7.tgz",
+      "integrity": "sha1-HQJ8K/oRasxmI7yo8AAWVyqH1CU=",
+      "dev": true,
+      "dependencies": {
+        "bytes": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/bytes/-/bytes-1.0.0.tgz",
+          "integrity": "sha1-NWnt6Lo0MV+rmcPpLLBMciDeH6g=",
+          "dev": true
+        }
+      }
+    },
+    "readable-stream": {
+      "version": "1.0.34",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz",
+      "integrity": "sha1-Elgg40vIQtLyqq+v5MKRbuMsFXw=",
+      "dev": true,
+      "dependencies": {
+        "isarray": {
+          "version": "0.0.1",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
+          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=",
+          "dev": true
+        }
+      }
+    },
+    "readdirp": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-2.1.0.tgz",
+      "integrity": "sha1-TtCtBg3zBzMAxIRANz9y0cxkLXg=",
+      "dev": true,
+      "dependencies": {
+        "readable-stream": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz",
+          "integrity": "sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==",
+          "dev": true
+        },
+        "string_decoder": {
+          "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz",
+          "integrity": "sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==",
+          "dev": true
+        }
+      }
+    },
+    "recast": {
+      "version": "0.11.23",
+      "resolved": "https://registry.npmjs.org/recast/-/recast-0.11.23.tgz",
+      "integrity": "sha1-RR/TAEqx5N+bTktmN2sqIZEkYtM=",
+      "dev": true
+    },
+    "redeyed": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/redeyed/-/redeyed-1.0.1.tgz",
+      "integrity": "sha1-6WwZO0DAgWsArshCaY5hGF5VSYo=",
+      "dev": true,
+      "dependencies": {
+        "esprima": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/esprima/-/esprima-3.0.0.tgz",
+          "integrity": "sha1-U88kes2ncxPlUcOqLnM0LT+099k=",
+          "dev": true
+        }
+      }
+    },
+    "regenerate": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.3.2.tgz",
+      "integrity": "sha1-0ZQcZ7rUN+G+dkM63Vs4X5WxkmA="
+    },
+    "regenerator": {
+      "version": "0.8.40",
+      "resolved": "https://registry.npmjs.org/regenerator/-/regenerator-0.8.40.tgz",
+      "integrity": "sha1-oORXxY69uuV1yfjNdRJ+k3VkNdg=",
+      "dev": true,
+      "dependencies": {
+        "ast-types": {
+          "version": "0.8.12",
+          "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.8.12.tgz",
+          "integrity": "sha1-oNkOQ1G7iHcWyD/WN+v4GK9K38w=",
+          "dev": true
+        },
+        "esprima-fb": {
+          "version": "15001.1001.0-dev-harmony-fb",
+          "resolved": "https://registry.npmjs.org/esprima-fb/-/esprima-fb-15001.1001.0-dev-harmony-fb.tgz",
+          "integrity": "sha1-Q761fsJujPI3092LM+QlM1d/Jlk=",
+          "dev": true
+        },
+        "recast": {
+          "version": "0.10.33",
+          "resolved": "https://registry.npmjs.org/recast/-/recast-0.10.33.tgz",
+          "integrity": "sha1-lCgI96oBbx+nFCxGHX5XBKqo1pc=",
+          "dev": true
+        }
+      }
+    },
+    "regenerator-runtime": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.11.0.tgz",
+      "integrity": "sha512-/aA0kLeRb5N9K0d4fw7ooEbI+xDe+DKD499EQqygGqeS8N3xto15p09uY2xj7ixP81sNPXvRLnAQIqdVStgb1A=="
+    },
+    "regenerator-transform": {
+      "version": "0.10.1",
+      "resolved": "https://registry.npmjs.org/regenerator-transform/-/regenerator-transform-0.10.1.tgz",
+      "integrity": "sha512-PJepbvDbuK1xgIgnau7Y90cwaAmO/LCLMI2mPvaXq2heGMR3aWW5/BQvYrhJ8jgmQjXewXvBjzfqKcVOmhjZ6Q=="
+    },
+    "regex-cache": {
+      "version": "0.4.4",
+      "resolved": "https://registry.npmjs.org/regex-cache/-/regex-cache-0.4.4.tgz",
+      "integrity": "sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==",
+      "dev": true
+    },
+    "regexpu": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/regexpu/-/regexpu-1.3.0.tgz",
+      "integrity": "sha1-5TTcmRqeWEYFDJjebX3UpVyeoW0=",
+      "dev": true,
+      "dependencies": {
+        "ast-types": {
+          "version": "0.8.15",
+          "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.8.15.tgz",
+          "integrity": "sha1-ju8IJ/BN/w7IhXupJavj/qYZTlI=",
+          "dev": true
+        },
+        "esprima": {
+          "version": "2.7.3",
+          "resolved": "https://registry.npmjs.org/esprima/-/esprima-2.7.3.tgz",
+          "integrity": "sha1-luO3DVd59q1JzQMmc9HDEnZ7pYE=",
+          "dev": true
+        },
+        "recast": {
+          "version": "0.10.43",
+          "resolved": "https://registry.npmjs.org/recast/-/recast-0.10.43.tgz",
+          "integrity": "sha1-uV1Q9tYHYaX2JS4V2AZ4FoSRzn8=",
+          "dev": true,
+          "dependencies": {
+            "esprima-fb": {
+              "version": "15001.1001.0-dev-harmony-fb",
+              "resolved": "https://registry.npmjs.org/esprima-fb/-/esprima-fb-15001.1001.0-dev-harmony-fb.tgz",
+              "integrity": "sha1-Q761fsJujPI3092LM+QlM1d/Jlk=",
+              "dev": true
+            }
+          }
+        }
+      }
+    },
+    "regexpu-core": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-2.0.0.tgz",
+      "integrity": "sha1-SdA4g3uNz4v6W5pCE5k45uoq4kA="
+    },
+    "regjsgen": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.2.0.tgz",
+      "integrity": "sha1-bAFq3qxVT3WCP+N6wFuS1aTtsfc="
+    },
+    "regjsparser": {
+      "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.1.5.tgz",
+      "integrity": "sha1-fuj4Tcb6eS0/0K4ijSS9lJ6tIFw="
+    },
+    "remove-trailing-separator": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz",
+      "integrity": "sha1-wkvOKig62tW8P1jg1IJJuSN52O8=",
+      "dev": true
+    },
+    "repeat-element": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/repeat-element/-/repeat-element-1.1.2.tgz",
+      "integrity": "sha1-7wiaF40Ug7quTZPrmLT55OEdmQo=",
+      "dev": true
+    },
+    "repeat-string": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
+      "integrity": "sha1-jcrkcOHIirwtYA//Sndihtp15jc=",
+      "dev": true
+    },
+    "repeating": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/repeating/-/repeating-2.0.1.tgz",
+      "integrity": "sha1-UhTFOpJtNVJwdSf7q0FdvAjQbdo="
+    },
+    "request": {
+      "version": "2.40.0",
+      "resolved": "https://registry.npmjs.org/request/-/request-2.40.0.tgz",
+      "integrity": "sha1-TdZw9pbx5uhC5mtLXoOTAaub62c=",
+      "dev": true,
+      "dependencies": {
+        "mime-types": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-1.0.2.tgz",
+          "integrity": "sha1-mVrhOSq4r/y/yyZB3QVOlDwNXc4=",
+          "dev": true
+        },
+        "node-uuid": {
+          "version": "1.4.8",
+          "resolved": "https://registry.npmjs.org/node-uuid/-/node-uuid-1.4.8.tgz",
+          "integrity": "sha1-sEDrCSOWivq/jTL7HxfxFn/auQc=",
+          "dev": true
+        },
+        "qs": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-1.0.2.tgz",
+          "integrity": "sha1-UKk+K1r2aRwxvOpdrnjubqGQN2g=",
+          "dev": true
+        }
+      }
+    },
+    "require-uncached": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/require-uncached/-/require-uncached-1.0.3.tgz",
+      "integrity": "sha1-Tg1W1slmL9MeQwEcS5WqSZVUIdM=",
+      "dev": true
+    },
+    "requires-port": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
+      "integrity": "sha1-kl0mAdOaxIXgkc8NpcbmlNw9yv8=",
+      "dev": true
+    },
+    "resolve": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.4.0.tgz",
+      "integrity": "sha512-aW7sVKPufyHqOmyyLzg/J+8606v5nevBgaliIlV7nUpVMsDnoBGV/cbSLNjZAg9q0Cfd/+easKVKQ8vOu8fn1Q=="
+    },
+    "resolve-dir": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/resolve-dir/-/resolve-dir-0.1.1.tgz",
+      "integrity": "sha1-shklmlYC+sXFxJatiUpujMQwJh4=",
+      "dev": true
+    },
+    "resolve-from": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-1.0.1.tgz",
+      "integrity": "sha1-Jsv+k10a7uq7Kbw/5a6wHpPUQiY=",
+      "dev": true
+    },
+    "restore-cursor": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-1.0.1.tgz",
+      "integrity": "sha1-NGYfRohjJ/7SmRR5FSJS35LapUE=",
+      "dev": true
+    },
+    "right-align": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/right-align/-/right-align-0.1.3.tgz",
+      "integrity": "sha1-YTObci/mo1FWiSENJOFMlhSGE+8=",
+      "dev": true
+    },
+    "rimraf": {
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.2.tgz",
+      "integrity": "sha512-lreewLK/BlghmxtfH36YYVg1i8IAce4TI7oao75I1g245+6BctqTVQiBP3YUJ9C6DQOXJmkYR9X9fCLtCOJc5w=="
+    },
+    "rollup": {
+      "version": "0.41.6",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-0.41.6.tgz",
+      "integrity": "sha1-4NBUl4d6OYwQTYFtJzOnGKepTio=",
+      "dev": true
+    },
+    "route-recognizer": {
+      "version": "0.2.10",
+      "resolved": "https://registry.npmjs.org/route-recognizer/-/route-recognizer-0.2.10.tgz",
+      "integrity": "sha1-Aksig8LmjROnx/UXOlkkZF6JAt8=",
+      "dev": true
+    },
+    "rsvp": {
+      "version": "3.6.2",
+      "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-3.6.2.tgz",
+      "integrity": "sha512-OfWGQTb9vnwRjwtA2QwpG2ICclHC3pgXZO5xt8H2EfgDquO0qVdSb5T88L4qJVAEugbS56pAuV4XZM58UX8ulw=="
+    },
+    "run-async": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.3.0.tgz",
+      "integrity": "sha1-A3GrSuC91yDUFm19/aZP96RFpsA=",
+      "dev": true
+    },
+    "rx": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/rx/-/rx-4.1.0.tgz",
+      "integrity": "sha1-pfE/957zt0D+MKqAP7CfmIBdR4I=",
+      "dev": true
+    },
+    "rx-lite": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/rx-lite/-/rx-lite-4.0.8.tgz",
+      "integrity": "sha1-Cx4Rr4vESDbwSmQH6S2kJGe3lEQ=",
+      "dev": true
+    },
+    "rx-lite-aggregates": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/rx-lite-aggregates/-/rx-lite-aggregates-4.0.8.tgz",
+      "integrity": "sha1-dTuHqJoRyVRnxKwWJsTvxOBcZ74=",
+      "dev": true
+    },
+    "safe-buffer": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz",
+      "integrity": "sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==",
+      "dev": true
+    },
+    "safe-json-parse": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/safe-json-parse/-/safe-json-parse-1.0.1.tgz",
+      "integrity": "sha1-PnZyPjjf3aE8mx0poeB//uSzC1c=",
+      "dev": true
+    },
+    "sane": {
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/sane/-/sane-1.7.0.tgz",
+      "integrity": "sha1-s1ebzLRclM8gNVzIESSZDf00bjA=",
+      "dev": true,
+      "dependencies": {
+        "minimist": {
+          "version": "1.2.0",
+          "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
+          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
+          "dev": true
+        }
+      }
+    },
+    "semver": {
+      "version": "5.4.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.4.1.tgz",
+      "integrity": "sha512-WfG/X9+oATh81XtllIo/I8gOiY9EXRdv1cQdyykeXK17YcUW3EXUAi2To4pcH6nZtJPr7ZOpM5OMyWJZm+8Rsg=="
+    },
+    "send": {
+      "version": "0.15.4",
+      "resolved": "https://registry.npmjs.org/send/-/send-0.15.4.tgz",
+      "integrity": "sha1-mF+qPihLAnPHkzZKNcZze9k5Bbk=",
+      "dev": true,
+      "dependencies": {
+        "mime": {
+          "version": "1.3.4",
+          "resolved": "https://registry.npmjs.org/mime/-/mime-1.3.4.tgz",
+          "integrity": "sha1-EV+eO2s9rylZmDyzjxSaLUDrXVM=",
+          "dev": true
+        }
+      }
+    },
+    "serve-static": {
+      "version": "1.12.4",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.12.4.tgz",
+      "integrity": "sha1-m2qpjutyU8Tu3Ewfb9vKYJkBqWE=",
+      "dev": true
+    },
+    "set-blocking": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
+      "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc=",
+      "dev": true
+    },
+    "set-immediate-shim": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/set-immediate-shim/-/set-immediate-shim-1.0.1.tgz",
+      "integrity": "sha1-SysbJ+uAip+NzEgaWOXlb1mfP2E=",
+      "dev": true
+    },
+    "setprototypeof": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.0.3.tgz",
+      "integrity": "sha1-ZlZ+NwQ+608E2RvWWMDL77VbjgQ=",
+      "dev": true
+    },
+    "shebang-command": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
+      "integrity": "sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
+      "dev": true
+    },
+    "shebang-regex": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
+      "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=",
+      "dev": true
+    },
+    "shellwords": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/shellwords/-/shellwords-0.1.1.tgz",
+      "integrity": "sha512-vFwSUfQvqybiICwZY5+DAWIPLKsWO31Q91JSKl3UYv+K5c2QRPzn0qzec6QPu1Qc9eHYItiP3NdJqNVqetYAww==",
+      "dev": true
+    },
+    "signal-exit": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
+      "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0=",
+      "dev": true
+    },
+    "silent-error": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/silent-error/-/silent-error-1.1.0.tgz",
+      "integrity": "sha1-IglwbxyFCp8dENDYQJGLRvJuG8k=",
+      "dev": true
+    },
+    "simple-dom": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/simple-dom/-/simple-dom-0.3.2.tgz",
+      "integrity": "sha1-BmPRDxVW8VAFUdUY9W46ughxNx0=",
+      "dev": true
+    },
+    "simple-fmt": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/simple-fmt/-/simple-fmt-0.1.0.tgz",
+      "integrity": "sha1-GRv1ZqWeZTBILLJatTtKjchcOms=",
+      "dev": true
+    },
+    "simple-html-tokenizer": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/simple-html-tokenizer/-/simple-html-tokenizer-0.4.1.tgz",
+      "integrity": "sha1-AomIu3/osuZkVnbYIFJYfUQLAtM=",
+      "dev": true
+    },
+    "simple-is": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/simple-is/-/simple-is-0.2.0.tgz",
+      "integrity": "sha1-Krt1qt453rXMgVzhDmGRFkhQuvA=",
+      "dev": true
+    },
+    "slash": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-1.0.0.tgz",
+      "integrity": "sha1-xB8vbDn8FtHNF61LXYlhFK5HDVU="
+    },
+    "slice-ansi": {
+      "version": "0.0.4",
+      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-0.0.4.tgz",
+      "integrity": "sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU=",
+      "dev": true
+    },
+    "sntp": {
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/sntp/-/sntp-0.2.4.tgz",
+      "integrity": "sha1-+4hfGLDzqtGJ+CSGJTa87ux1CQA=",
+      "dev": true,
+      "optional": true
+    },
+    "socket.io": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-1.6.0.tgz",
+      "integrity": "sha1-PkDZMmN+a9kjmBslyvfFPoO24uE=",
+      "dev": true,
+      "dependencies": {
+        "debug": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.3.3.tgz",
+          "integrity": "sha1-QMRT5n5uE8kB3ewxeviYbNqe/4w=",
+          "dev": true
+        },
+        "ms": {
+          "version": "0.7.2",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-0.7.2.tgz",
+          "integrity": "sha1-riXPJRKziFodldfwN4aNhDESR2U=",
+          "dev": true
+        },
+        "object-assign": {
+          "version": "4.1.0",
+          "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.0.tgz",
+          "integrity": "sha1-ejs9DpgGPUP0wD8uiubNUahog6A=",
+          "dev": true
+        }
+      }
+    },
+    "socket.io-adapter": {
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-0.5.0.tgz",
+      "integrity": "sha1-y21LuL7IHhB4uZZ3+c7QBGBmu4s=",
+      "dev": true,
+      "dependencies": {
+        "debug": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.3.3.tgz",
+          "integrity": "sha1-QMRT5n5uE8kB3ewxeviYbNqe/4w=",
+          "dev": true
+        },
+        "ms": {
+          "version": "0.7.2",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-0.7.2.tgz",
+          "integrity": "sha1-riXPJRKziFodldfwN4aNhDESR2U=",
+          "dev": true
+        }
+      }
+    },
+    "socket.io-client": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-1.6.0.tgz",
+      "integrity": "sha1-W2aPT3cTBN/u0XkGRwg4b6ZxeFM=",
+      "dev": true,
+      "dependencies": {
+        "component-emitter": {
+          "version": "1.2.1",
+          "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.2.1.tgz",
+          "integrity": "sha1-E3kY1teCg/ffemt8WmPhQOaUJeY=",
+          "dev": true
+        },
+        "debug": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.3.3.tgz",
+          "integrity": "sha1-QMRT5n5uE8kB3ewxeviYbNqe/4w=",
+          "dev": true
+        },
+        "ms": {
+          "version": "0.7.2",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-0.7.2.tgz",
+          "integrity": "sha1-riXPJRKziFodldfwN4aNhDESR2U=",
+          "dev": true
+        }
+      }
+    },
+    "socket.io-parser": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-2.3.1.tgz",
+      "integrity": "sha1-3VMgJRA85Clpcya+/WQAX8/ltKA=",
+      "dev": true,
+      "dependencies": {
+        "debug": {
+          "version": "2.2.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.2.0.tgz",
+          "integrity": "sha1-+HBX6ZWxofauaklgZkE3vFbwOdo=",
+          "dev": true
+        },
+        "isarray": {
+          "version": "0.0.1",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
+          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=",
+          "dev": true
+        },
+        "ms": {
+          "version": "0.7.1",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-0.7.1.tgz",
+          "integrity": "sha1-nNE8A62/8ltl7/3nzoZO6VIBcJg=",
+          "dev": true
+        }
+      }
+    },
+    "sort-object-keys": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/sort-object-keys/-/sort-object-keys-1.1.2.tgz",
+      "integrity": "sha1-06bEjcKsl+a8lDZ2luA/bQnTeVI=",
+      "dev": true
+    },
+    "sort-package-json": {
+      "version": "1.7.1",
+      "resolved": "https://registry.npmjs.org/sort-package-json/-/sort-package-json-1.7.1.tgz",
+      "integrity": "sha1-8uX7/+hCDMG7BEhfRQnwXnO0wPI=",
+      "dev": true
+    },
+    "source-map": {
+      "version": "0.5.7",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
+      "integrity": "sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="
+    },
+    "source-map-support": {
+      "version": "0.4.18",
+      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.4.18.tgz",
+      "integrity": "sha512-try0/JqxPLF9nOjvSta7tVondkP5dwgyLDjVoyMDlmjugT2lRZ1OfsrYTkCd2hkDnJTKRbO/Rl3orm8vlsUzbA=="
+    },
+    "source-map-url": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/source-map-url/-/source-map-url-0.3.0.tgz",
+      "integrity": "sha1-fsrxO1e80J2opAxdJp2zN5nUqvk=",
+      "dev": true
+    },
+    "sourcemap-validator": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/sourcemap-validator/-/sourcemap-validator-1.0.5.tgz",
+      "integrity": "sha1-+blg9IxkaeKIoZrzBfAF2j3B3zo=",
+      "dev": true,
+      "dependencies": {
+        "jsesc": {
+          "version": "0.3.0",
+          "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-0.3.0.tgz",
+          "integrity": "sha1-G/XuY7RTn+LibQwemcJAuXpFeXI=",
+          "dev": true
+        },
+        "lodash.template": {
+          "version": "2.3.0",
+          "resolved": "https://registry.npmjs.org/lodash.template/-/lodash.template-2.3.0.tgz",
+          "integrity": "sha1-Tj4pxDO0z+pnXsg15vEjkcYf0is=",
+          "dev": true
+        },
+        "source-map": {
+          "version": "0.1.43",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.1.43.tgz",
+          "integrity": "sha1-wkvBRspRfBRx9drL4lcbK3+eM0Y=",
+          "dev": true
+        }
+      }
+    },
+    "spawn-args": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/spawn-args/-/spawn-args-0.2.0.tgz",
+      "integrity": "sha1-+30L0dcP1DFr2ePew4nmX51jYbs=",
+      "dev": true
+    },
+    "spawn-sync": {
+      "version": "1.0.15",
+      "resolved": "https://registry.npmjs.org/spawn-sync/-/spawn-sync-1.0.15.tgz",
+      "integrity": "sha1-sAeZVX63+wyDdsKdROih6mfldHY=",
+      "dev": true
+    },
+    "sprintf-js": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.1.tgz",
+      "integrity": "sha1-Nr54Mgr+WAH2zqPueLblqrlA6gw="
+    },
+    "sri-toolbox": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/sri-toolbox/-/sri-toolbox-0.2.0.tgz",
+      "integrity": "sha1-p/6lw/3lXmdc8cjAbz67XCk1g14=",
+      "dev": true
+    },
+    "stable": {
+      "version": "0.1.6",
+      "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.6.tgz",
+      "integrity": "sha1-kQ9dKu17Ugxud3SZwfMuE5/eyxA=",
+      "dev": true
+    },
+    "statuses": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.3.1.tgz",
+      "integrity": "sha1-+vUbnrdKrvOzrPStX2Gr8ky3uT4=",
+      "dev": true
+    },
+    "string_decoder": {
+      "version": "0.10.31",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
+      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=",
+      "dev": true
+    },
+    "string-template": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/string-template/-/string-template-0.2.1.tgz",
+      "integrity": "sha1-QpMuWYo1LQH8IuwzZ9nYTuxsmt0=",
+      "dev": true
+    },
+    "string-width": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
+      "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
+      "dev": true
+    },
+    "stringmap": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/stringmap/-/stringmap-0.2.2.tgz",
+      "integrity": "sha1-VWwTeyWPlCuHdvWy71gqoGnX0bE=",
+      "dev": true
+    },
+    "stringset": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/stringset/-/stringset-0.2.1.tgz",
+      "integrity": "sha1-7yWcTjSTRDd/zRyRPdLoSMnAQrU=",
+      "dev": true
+    },
+    "stringstream": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.5.tgz",
+      "integrity": "sha1-TkhM1N5aC7vuGORjB3EKioFiGHg=",
+      "dev": true,
+      "optional": true
+    },
+    "strip-ansi": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
+      "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8="
+    },
+    "strip-bom": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
+      "integrity": "sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM="
+    },
+    "strip-eof": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz",
+      "integrity": "sha1-u0P/VZim6wXYm1n80SnJgzE2Br8=",
+      "dev": true
+    },
+    "strip-json-comments": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
+      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
+      "dev": true
+    },
+    "styled_string": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/styled_string/-/styled_string-0.0.1.tgz",
+      "integrity": "sha1-0ieCvYEpVFm8Tx3xjEutjpTdEko=",
+      "dev": true
+    },
+    "sum-up": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/sum-up/-/sum-up-1.0.3.tgz",
+      "integrity": "sha1-HGYfZnBX9jvLeHWqFDi8FiUlFW4=",
+      "dev": true
+    },
+    "supports-color": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz",
+      "integrity": "sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="
+    },
+    "symlink-or-copy": {
+      "version": "1.1.8",
+      "resolved": "https://registry.npmjs.org/symlink-or-copy/-/symlink-or-copy-1.1.8.tgz",
+      "integrity": "sha1-yr5h4AEMHAI8Fzsl7lEIs39LSqM="
+    },
+    "table": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/table/-/table-4.0.1.tgz",
+      "integrity": "sha1-qBFsEz+sLGH0pCCrbN9cTWHw5DU=",
+      "dev": true,
+      "dependencies": {
+        "ajv": {
+          "version": "4.11.8",
+          "resolved": "https://registry.npmjs.org/ajv/-/ajv-4.11.8.tgz",
+          "integrity": "sha1-gv+wKynmYq5TvcIK8VlHcGc5xTY=",
+          "dev": true
+        },
+        "ansi-regex": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
+          "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=",
+          "dev": true
+        },
+        "is-fullwidth-code-point": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
+          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
+          "dev": true
+        },
+        "string-width": {
+          "version": "2.1.1",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
+          "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+          "dev": true
+        },
+        "strip-ansi": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
+          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
+          "dev": true
+        }
+      }
+    },
+    "tap-parser": {
+      "version": "5.4.0",
+      "resolved": "https://registry.npmjs.org/tap-parser/-/tap-parser-5.4.0.tgz",
+      "integrity": "sha512-BIsIaGqv7uTQgTW1KLTMNPSEQf4zDDPgYOBRdgOfuB+JFOLRBfEu6cLa/KvMvmqggu1FKXDfitjLwsq4827RvA==",
+      "dev": true,
+      "dependencies": {
+        "readable-stream": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.3.tgz",
+          "integrity": "sha512-m+qzzcn7KUxEmd1gMbchF+Y2eIUbieUaxkWtptyHywrX0rE8QEYqPC07Vuy4Wm32/xE16NcdBctb8S0Xe/5IeQ==",
+          "dev": true,
+          "optional": true
+        },
+        "string_decoder": {
+          "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.0.3.tgz",
+          "integrity": "sha512-4AH6Z5fzNNBcH+6XDMfA/BTt87skxqJlO0lAh3Dker5zThcAxG6mKz+iGu308UKoPPQ8Dcqx/4JhujzltRa+hQ==",
+          "dev": true,
+          "optional": true
+        }
+      }
+    },
+    "temp": {
+      "version": "0.8.3",
+      "resolved": "https://registry.npmjs.org/temp/-/temp-0.8.3.tgz",
+      "integrity": "sha1-4Ma8TSa5AxJEEOT+2BEDAU38H1k=",
+      "dev": true,
+      "dependencies": {
+        "rimraf": {
+          "version": "2.2.8",
+          "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.2.8.tgz",
+          "integrity": "sha1-5Dm+Kq7jJzIZUnMPmaiSnk/FBYI=",
+          "dev": true
+        }
+      }
+    },
+    "testem": {
+      "version": "1.18.4",
+      "resolved": "https://registry.npmjs.org/testem/-/testem-1.18.4.tgz",
+      "integrity": "sha1-5F/tkivsL1SmFsQ/EZIlmKyX60E=",
+      "dev": true
+    },
+    "text-table": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
+      "integrity": "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
+      "dev": true
+    },
+    "textextensions": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/textextensions/-/textextensions-2.1.0.tgz",
+      "integrity": "sha1-G+DcKg3CRNRL6KCa9qha+5PE28M="
+    },
+    "through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=",
+      "dev": true
+    },
+    "tiny-lr": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/tiny-lr/-/tiny-lr-1.0.5.tgz",
+      "integrity": "sha512-YrxUSiMgOVh3PnAqtdAUQuUVEVRnqcRCxJ3BHrl/aaWV2fplKKB60oClM0GH2Gio2hcXvkxMUxsC/vXZrQePlg==",
+      "dev": true
+    },
+    "tmp": {
+      "version": "0.0.28",
+      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.28.tgz",
+      "integrity": "sha1-Fyc1t/YU6nrzlmT6hM8N5OUV0SA="
+    },
+    "tmpl": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.4.tgz",
+      "integrity": "sha1-I2QN17QtAEM5ERQIIOXPRA5SHdE=",
+      "dev": true
+    },
+    "to-array": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/to-array/-/to-array-0.1.4.tgz",
+      "integrity": "sha1-F+bBH3PdTz10zaek/zI46a2b+JA=",
+      "dev": true
+    },
+    "to-fast-properties": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-1.0.3.tgz",
+      "integrity": "sha1-uDVx+k2MJbguIxsG46MFXeTKGkc="
+    },
+    "tough-cookie": {
+      "version": "2.3.2",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.2.tgz",
+      "integrity": "sha1-8IH3bkyFcg5sN6X6ztc3FQ2EByo=",
+      "dev": true,
+      "optional": true
+    },
+    "tree-sync": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/tree-sync/-/tree-sync-1.2.2.tgz",
+      "integrity": "sha1-LPdrhYn1n/7bWNtaOsfLAT0BWLc=",
+      "dependencies": {
+        "walk-sync": {
+          "version": "0.2.7",
+          "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.2.7.tgz",
+          "integrity": "sha1-tJvk7mhnZXrrc2l4tWop0Q+jmWk="
+        }
+      }
+    },
+    "trim-right": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/trim-right/-/trim-right-1.0.1.tgz",
+      "integrity": "sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="
+    },
+    "try-resolve": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/try-resolve/-/try-resolve-1.0.1.tgz",
+      "integrity": "sha1-z95vq9ctY+V5fPqrhzq76OcA6RI=",
+      "dev": true
+    },
+    "tryit": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/tryit/-/tryit-1.0.3.tgz",
+      "integrity": "sha1-OTvnMKlEb9Hq1tpZoBQwjzbCics=",
+      "dev": true
+    },
+    "tryor": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/tryor/-/tryor-0.1.2.tgz",
+      "integrity": "sha1-gUXkynyv9ArN48z5Rui4u3W0Fys=",
+      "dev": true
+    },
+    "tunnel-agent": {
+      "version": "0.4.3",
+      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.4.3.tgz",
+      "integrity": "sha1-Y3PbdpCf5XDgjXNYM2Xtgop07us=",
+      "dev": true,
+      "optional": true
+    },
+    "type-check": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
+      "integrity": "sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=",
+      "dev": true
+    },
+    "type-is": {
+      "version": "1.6.15",
+      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.15.tgz",
+      "integrity": "sha1-yrEPtJCeRByChC6v4a1kbIGARBA=",
+      "dev": true
+    },
+    "typedarray": {
+      "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
+      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=",
+      "dev": true
+    },
+    "uc.micro": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-1.0.3.tgz",
+      "integrity": "sha1-ftUNXg+an7ClczeSWfKndFjVAZI=",
+      "dev": true
+    },
+    "uglify-js": {
+      "version": "2.8.29",
+      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-2.8.29.tgz",
+      "integrity": "sha1-KcVzMUgFe7Th913zW3qcty5qWd0=",
+      "dev": true
+    },
+    "uglify-to-browserify": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/uglify-to-browserify/-/uglify-to-browserify-1.0.2.tgz",
+      "integrity": "sha1-bgkk1r2mta/jSeOabWMoUKD4grc=",
+      "dev": true,
+      "optional": true
+    },
+    "ultron": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/ultron/-/ultron-1.0.2.tgz",
+      "integrity": "sha1-rOEWq1V80Zc4ak6I9GhTeMiy5Po=",
+      "dev": true
+    },
+    "underscore": {
+      "version": "1.8.3",
+      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.8.3.tgz",
+      "integrity": "sha1-Tz+1OxBuYJf8+ctBCfKl6b36UCI=",
+      "dev": true
+    },
+    "underscore.string": {
+      "version": "3.3.4",
+      "resolved": "https://registry.npmjs.org/underscore.string/-/underscore.string-3.3.4.tgz",
+      "integrity": "sha1-LCo/n4PmR2L9xF5s6sZRQoZCE9s="
+    },
+    "unique-string": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-1.0.0.tgz",
+      "integrity": "sha1-nhBXzKhRq7kzmPizOuGHuZyuwRo=",
+      "dev": true
+    },
+    "universalify": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.1.tgz",
+      "integrity": "sha1-+nG63UQ3r0wUiEHjs7Fl+enlkLc=",
+      "dev": true
+    },
+    "unpipe": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
+      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=",
+      "dev": true
+    },
+    "untildify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/untildify/-/untildify-2.1.0.tgz",
+      "integrity": "sha1-F+soB5h/dpUunASF/DEdBqgmouA=",
+      "dev": true
+    },
+    "user-home": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/user-home/-/user-home-1.1.1.tgz",
+      "integrity": "sha1-K1viOjK2Onyd640PKNSFcko98ZA=",
+      "dev": true
+    },
+    "username-sync": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/username-sync/-/username-sync-1.0.1.tgz",
+      "integrity": "sha1-HN6H7vz5S4gimE2Ti6K3l0Jtrh8="
+    },
+    "util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
+    },
+    "utils-merge": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.0.tgz",
+      "integrity": "sha1-ApT7kiu5N1FTVBxPcJYjHyh8ivg=",
+      "dev": true
+    },
+    "uuid": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.1.0.tgz",
+      "integrity": "sha512-DIWtzUkw04M4k3bf1IcpS2tngXEL26YUD2M0tMDUpnUrz2hgzUBlD55a4FjdLGPvfHxS6uluGWvaVEqgBcVa+g==",
+      "dev": true
+    },
+    "validate-npm-package-name": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-name/-/validate-npm-package-name-3.0.0.tgz",
+      "integrity": "sha1-X6kS2B630MdK/BQN5zF/DKffQ34=",
+      "dev": true
+    },
+    "vary": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.1.tgz",
+      "integrity": "sha1-Z1Neu2lMHVIldFeYRmUyP1h+jTc=",
+      "dev": true
+    },
+    "walk-sync": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/walk-sync/-/walk-sync-0.3.2.tgz",
+      "integrity": "sha512-FMB5VqpLqOCcqrzA9okZFc0wq0Qbmdm396qJxvQZhDpyu0W95G9JCmp74tx7iyYnyOcBtUuKJsgIKAqjozvmmQ=="
+    },
+    "walker": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.7.tgz",
+      "integrity": "sha1-L3+bj9ENZ3JisYqITijRlhjgKPs=",
+      "dev": true
+    },
+    "watch": {
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/watch/-/watch-0.10.0.tgz",
+      "integrity": "sha1-d3mLLaD5kQ1ZXxrOWwwiWFIfIdw=",
+      "dev": true
+    },
+    "websocket-driver": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.0.tgz",
+      "integrity": "sha1-DK+dLXVdk67gSdS90NP+LMoqJOs=",
+      "dev": true
+    },
+    "websocket-extensions": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.2.tgz",
+      "integrity": "sha1-Dhh4HeYpoYMIzhSBZQ9n/6JpOl0=",
+      "dev": true
+    },
+    "which": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/which/-/which-1.3.0.tgz",
+      "integrity": "sha512-xcJpopdamTuY5duC/KnTTNBraPK54YwpenP4lzxU8H91GudWpFv38u0CKjclE1Wi2EH2EDz5LRcHcKbCIzqGyg==",
+      "dev": true
+    },
+    "wide-align": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.2.tgz",
+      "integrity": "sha512-ijDLlyQ7s6x1JgCLur53osjm/UXUYD9+0PbYKrBsYisYXzCxN+HC3mYDNy/dWdmf3AwqwU3CXwDCvsNgGK1S0w==",
+      "dev": true
+    },
+    "window-size": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/window-size/-/window-size-0.1.0.tgz",
+      "integrity": "sha1-VDjNLqk7IC76Ohn+iIeu58lPnJ0=",
+      "dev": true
+    },
+    "wordwrap": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.3.tgz",
+      "integrity": "sha1-o9XabNXAvAAI03I0u68b7WMFkQc=",
+      "dev": true
+    },
+    "workerpool": {
+      "version": "2.2.4",
+      "resolved": "https://registry.npmjs.org/workerpool/-/workerpool-2.2.4.tgz",
+      "integrity": "sha512-gE7StiPAOM6318V3EzlR0sFgedAF11PjDZ1xt3SpbuF/vTTDFX2XEnkbFUNqhIHBEKzBDFLPgJSIXyJKP4wZBQ=="
+    },
+    "wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
+    },
+    "write": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/write/-/write-0.2.1.tgz",
+      "integrity": "sha1-X8A4KOJkzqP+kUVUdvejxWbLB1c=",
+      "dev": true
+    },
+    "write-file-atomic": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.3.0.tgz",
+      "integrity": "sha512-xuPeK4OdjWqtfi59ylvVL0Yn35SF3zgcAcv7rBPFHVaEapaDr4GdGgm3j7ckTwH9wHL7fGmgfAnb0+THrHb8tA==",
+      "dev": true
+    },
+    "ws": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-1.1.1.tgz",
+      "integrity": "sha1-CC3bbGQehdS7RR8D1S8G6r2x8Bg=",
+      "dev": true
+    },
+    "wtf-8": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/wtf-8/-/wtf-8-1.0.0.tgz",
+      "integrity": "sha1-OS2LotDxw00e4tYw8V0O+2jhBIo=",
+      "dev": true
+    },
+    "xdg-basedir": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-3.0.0.tgz",
+      "integrity": "sha1-SWsswQnsqNus/i3HK2A8F8WHCtQ=",
+      "dev": true
+    },
+    "xmldom": {
+      "version": "0.1.27",
+      "resolved": "https://registry.npmjs.org/xmldom/-/xmldom-0.1.27.tgz",
+      "integrity": "sha1-1QH5ezvbQDr4757MIFcxh6rawOk=",
+      "dev": true
+    },
+    "xmlhttprequest-ssl": {
+      "version": "1.5.3",
+      "resolved": "https://registry.npmjs.org/xmlhttprequest-ssl/-/xmlhttprequest-ssl-1.5.3.tgz",
+      "integrity": "sha1-GFqIjATspGw+QHDZn3tJ3jUomS0=",
+      "dev": true
+    },
+    "xtend": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.1.tgz",
+      "integrity": "sha1-pcbVMr5lbiPbgg77lDofBJmNY68=",
+      "dev": true
+    },
+    "y18n": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-3.2.1.tgz",
+      "integrity": "sha1-bRX7qITAhnnA136I53WegR4H+kE=",
+      "dev": true
+    },
+    "yallist": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
+      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI=",
+      "dev": true
+    },
+    "yam": {
+      "version": "0.0.22",
+      "resolved": "https://registry.npmjs.org/yam/-/yam-0.0.22.tgz",
+      "integrity": "sha1-OKdst5oZKE2SBu1JAx41mhNAvQY=",
+      "dev": true,
+      "dependencies": {
+        "fs-extra": {
+          "version": "0.30.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-0.30.0.tgz",
+          "integrity": "sha1-8jP/zAjU2n1DLapEl3aYnbHfk/A=",
+          "dev": true
+        }
+      }
+    },
+    "yargs": {
+      "version": "3.10.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-3.10.0.tgz",
+      "integrity": "sha1-9+572FfdfB0tOMDnTvvWgdFDH9E=",
+      "dev": true
+    },
+    "yeast": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/yeast/-/yeast-0.1.2.tgz",
+      "integrity": "sha1-AI4G2AlDIMNy28L47XagymyKxBk=",
+      "dev": true
+    },
+    "yui": {
+      "version": "3.18.1",
+      "resolved": "https://registry.npmjs.org/yui/-/yui-3.18.1.tgz",
+      "integrity": "sha1-4AAmnsCntvvHQcu4/L0OZRF7AUw=",
+      "dev": true
+    },
+    "yuidocjs": {
+      "version": "0.10.2",
+      "resolved": "https://registry.npmjs.org/yuidocjs/-/yuidocjs-0.10.2.tgz",
+      "integrity": "sha1-M5JJZ85hkCTNcO9pTiZ9L5iPc/Y=",
+      "dev": true,
+      "dependencies": {
+        "linkify-it": {
+          "version": "1.2.4",
+          "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-1.2.4.tgz",
+          "integrity": "sha1-B3NSbDF8j9E71TTuHRgP+Iq/iBo=",
+          "dev": true
+        },
+        "markdown-it": {
+          "version": "4.4.0",
+          "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-4.4.0.tgz",
+          "integrity": "sha1-PfNz2+pYepp/7z5WMRtokI91xBQ=",
+          "dev": true
+        }
+      }
+    }
+  }
+}
Index: tests/dummy/app/templates/custom/action.hbs
===================================================================
--- tests/dummy/app/templates/custom/action.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/action.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<div class="action" {{action 'sendAction' 'action' record}}>{{record.index}}</div>
Index: tests/dummy/app/templates/custom/checkbox-all.hbs
===================================================================
--- tests/dummy/app/templates/custom/checkbox-all.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/dummy/app/templates/custom/checkbox-all.hbs	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,1 +0,0 @@
-<span {{action "toggleAllSelection"}} class="{{if (is-equal _selectedItems.length data.length) icons.select-all-rows icons.deselect-all-rows}}"></span>
\ No newline at end of file
Index: tests/helpers/dom.js
===================================================================
--- tests/helpers/dom.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
+++ tests/helpers/dom.js	(revision a74a35b505180c3beb772c7b2ce9994eaa55a927)
@@ -1,264 +0,0 @@
-const selectors = {
-  firstColumn: 'tbody tr td:nth-child(1)',
-  secondColumn: 'tbody tr td:nth-child(2)',
-  allRows: 'tbody tr',
-  summary: '.table-summary',
-  filterString: '.filterString',
-  filterStringClearIcon: '.filterString~.clearFilterIcon',
-  navigationLinks: '.table-nav a',
-  navigationButtons: '.table-nav button',
-  theadSecondRowCells: 'thead tr:eq(1) th',
-  theadSecondRowFirstColumnFilter: 'thead tr:eq(1) th:eq(0) input',
-  theadSecondRowFirstColumnClearFilterIcon: 'thead tr:eq(1) th:eq(0) .clearFilterIcon',
-  theadSecondRowFirstColumnFilterSelect: 'thead tr:eq(1) th:eq(0) select',
-  theadSecondRowSecondColumnFilter: 'thead tr:eq(1) th:eq(1) input',
-  theadSecondRowSecondColumnClearFilterIcon: 'thead tr:eq(1) th:eq(1) .clearFilterIcon',
-  theadSecondRowSecondColumnFilterSelect: 'thead tr:eq(1) th:eq(1) select',
-  theadFirstRowFirstCell: 'thead tr th:eq(0)',
-  theadFirstRowFirstCellSort: 'thead tr th:eq(0) span',
-  theadFirstRowSecondCell: 'thead tr th:eq(1)',
-  theadFirstRowCells: 'thead tr:eq(0) th',
-  tbodyFirstRowCells: 'tbody tr:eq(0) td',
-  tbodyFirstRowExpand: 'tbody tr.expand-0',
-  tbodyFirstColumnCells: 'tbody td:first-child',
-  tbodySecondColumnCells: 'tbody td:nth-child(2)',
-  tbodyAllRows: 'tbody tr',
-  tbodyAllCells: 'tbody tr td',
-  expandAllRowsLink: 'thead .expand-all-rows',
-  collapseAllRowsLink: 'thead .collapse-all-rows',
-  columnsDropdown: '.columns-dropdown li',
-  tableNavBtnLast: '.table-nav a:eq(3)',
-  tableNavBtnNext: '.table-nav a:eq(2)',
-  tableNavBtnBack: '.table-nav a:eq(1)',
-  tableNavBtnFirst: '.table-nav a:eq(0)',
-  pageSizeDropdown: 'select.changePageSize',
-  expandRow: 'a.expand-row',
-  collapseRow: 'a.collapse-row',
-  clearAllFilters: 'a.clearFilters'
-};
-
-export {selectors};
-
-/**
- * @param {string} selector
- * @param {string} [delimiter]
- * @returns {string}
- */
-export function getEachAsString (selector, delimiter) {
-  delimiter = delimiter || '';
-  return this
-    .$(selector)
-    .map((index, cell) => $(cell).text().trim())
-    .get()
-    .join(delimiter);
-}
-
-/**
- * @param {string} selector
- * @param {string} [delimiter]
- * @returns {string}
- */
-export function getEachClassAsString (selector, delimiter) {
-  return getEachAttrAsString.bind(this)(selector, 'class', delimiter);
-}
-
-/**
- * @param {string} selector
- * @param {string} attr
- * @param {string} [delimiter]
- * @returns {string}
- */
-export function getEachAttrAsString(selector, attr, delimiter) {
-  delimiter = delimiter || '';
-  return this
-    .$(selector)
-    .map((index, cell) => ($(cell).prop(attr) + '').trim())
-    .get()
-    .join(delimiter);
-}
-
-/**
- * @param {string} selector
- * @param {string} [delimiter]
- * @returns {string}
- */
-export function getEachValueAsString (selector, delimiter) {
-  return this
-    .$(selector)
-    .map((index, cell) => $(cell).val())
-    .get()
-    .join(delimiter);
-}
-
-/**
- * @param {string} selector
- * @returns {number}
- */
-export function getCount(selector) {
-  return this
-    .$(selector)
-    .length;
-}
-
-/**
- *
- * @param {string} selector
- * @returns {boolean}
- */
-export function elementExist(selector) {
-  return !!this.$(selector).length;
-}
-
-export function elementVisible(selector) {
-  return !this.$(selector).hasClass('invisible');
-}
-
-export function nextPage() {
-  this.$(selectors.tableNavBtnNext).click();
-}
-
-export function globalFilter(str) {
-  this.$(selectors.filterString).val(str).change().blur();
-}
-
-export function clearGlobalFilterByIcon() {
-  this.$(selectors.filterStringClearIcon).click();
-}
-
-export function  clearAllFiltersByIcon() {
-  this.$(selectors.clearAllFilters).click();
-}
-
-export function filterFirstColumn(str) {
-  this.$(selectors.theadSecondRowFirstColumnFilter).val(str).change().blur();
-}
-
-export function filterSecondColumn(str) {
-  this.$(selectors.theadSecondRowSecondColumnFilter).val(str).change().blur();
-}
-
-export function filterWithSelectFirstColumn(str) {
-  this.$(selectors.theadSecondRowFirstColumnFilterSelect).val(str).change();
-}
-
-export function filterWithSelectSecondColumn(str) {
-  this.$(selectors.theadSecondRowSecondColumnFilterSelect).val(str).change();
-}
-
-export function clearFirstColumnFilterByIcon() {
-  this.$(selectors.theadSecondRowFirstColumnClearFilterIcon).click();
-}
-
-export function clearSecondColumnFilterByIcon() {
-  this.$(selectors.theadSecondRowSecondColumnClearFilterIcon).click();
-}
-export function sortFirstColumn() {
-  this.$(selectors.theadFirstRowFirstCell).click();
-}
-
-export function sortSecondColumn() {
-  this.$(selectors.theadFirstRowSecondCell).click();
-}
-
-export function changePageSize(val) {
-  this.$(selectors.pageSizeDropdown).val(val).change();
-}
-
-function _columnsDropdownClick (index) {
-  this.$(`${selectors.columnsDropdown}:eq(${index}) a`).click();
-}
-
-export function toggleFirstColumnVisibility() {
-  _columnsDropdownClick.bind(this)(4);
-}
-
-export function toggleSecondColumnVisibility() {
-  _columnsDropdownClick.bind(this)(5);
-}
-
-export function toggleColumnsDropdownItem(i) {
-  _columnsDropdownClick.bind(this)(i);
-}
-
-export function hideAllColumns() {
-  _columnsDropdownClick.bind(this)(1);
-}
-
-export function showAllColumns() {
-  _columnsDropdownClick.bind(this)(0);
-}
-
-function _expandRow(index) {
-  this.$(`${selectors.allRows}`).not('.expand-row').eq(index).find(`${selectors.expandRow}`).click();
-}
-
-export function expandAllRows() {
-  this.$(`${selectors.expandAllRowsLink}`).click();
-}
-
-export function collapseAllRows() {
-  this.$(`${selectors.collapseAllRowsLink}`).click();
-}
-
-export function expandFirstRow() {
-  return _expandRow.bind(this)(0);
-}
-
-export function expandSecondRow() {
-  return _expandRow.bind(this)(1);
-}
-
-function _collapseRow(index) {
-  this.$(`${selectors.allRows}`).not('.expand-row').eq(index).find(`${selectors.collapseRow}`).click();
-}
-
-export function collapseFirstRow() {
-  return _collapseRow.bind(this)(0);
-}
-export function collapseSecondRow() {
-  return _collapseRow.bind(this)(1);
-}
-
-function _rowIsExpanded(index) {
-  return !!this.$(`${selectors.allRows}`).not('.expand-row').eq(index).find(`${selectors.collapseRow}`).length;
-}
-
-export function firstRowIsExpanded() {
-  return _rowIsExpanded.bind(this)(0);
-}
-
-export function secondRowIsExpanded() {
-  return _rowIsExpanded.bind(this)(1);
-}
-
-function _rowIsCollapsed(index) {
-  return !!this.$(`${selectors.allRows}`).not('.expand-row').eq(index).find(`${selectors.expandRow}`).length;
-}
-
-export function firstRowIsCollapsed() {
-  return _rowIsCollapsed.bind(this)(0);
-}
-
-export function secondRowIsCollapsed() {
-  return _rowIsCollapsed.bind(this)(1);
-}
-
-function _rowIsSelected(index) {
-  return this.$(`${selectors.allRows}`).not('.expand-row').eq(index).hasClass('selected-row');
-}
-
-export function firstRowIsSelected() {
-  return _rowIsSelected.bind(this)(0);
-}
-
-export function secondRowIsSelected() {
-  return _rowIsSelected.bind(this)(1);
-}
-
-export function getAllSelectedRows() {
-  return this.$(`${selectors.allRows}.selected-row`).length;
-}
-
-export function clickOnRow(index) {
-  return this.$(`${selectors.allRows}`).not('.expand-row').eq(index).click();
-}
\ No newline at end of file

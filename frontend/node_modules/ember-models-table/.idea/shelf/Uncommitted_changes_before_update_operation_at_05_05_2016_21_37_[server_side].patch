Index: app/templates/components/models-table/models-table-server-paginated.hbs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/templates/components/models-table/models-table-server-paginated.hbs	(revision )
+++ app/templates/components/models-table/models-table-server-paginated.hbs	(revision )
@@ -0,0 +1,1 @@
+{{yield}}
\ No newline at end of file
Index: addon/components/models-table-server-paginated.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- addon/components/models-table-server-paginated.js	(revision 2565f037fea2a850ffd6e067a7bcddc67ec98793)
+++ addon/components/models-table-server-paginated.js	(revision )
@@ -1,11 +1,16 @@
 import Ember from 'ember';
 import ModelsTable from './models-table';
-import layout from 'templates/components/models-table';
 
-var { get, set, computed, observer, typeOf, run } = Ember;
+const {
+  get,
+  set,
+  computed,
+  observer,
+  typeOf,
+  run
+} = Ember;
 
 export default ModelsTable.extend({
-  layout: layout,
 
   /**
    * True if data is currently being loaded from the server.
@@ -125,7 +130,7 @@
    * This function actually loads the data from the server.
    * It takes the store, modelName and query from the passed in data-object and adds page, sorting & filtering to it.
    */
-  _loadData: function () {
+  _loadData () {
     var data = get(this, 'data');
     var currentPageNumber = get(this, 'currentPageNumber');
     var pageSize = get(this, 'pageSize');
@@ -221,11 +226,11 @@
       var newSorting = sortMap[currentSorting.toLowerCase()];
       var sortingArgs = [column, sortedBy, newSorting];
       this._singleColumnSorting(...sortingArgs);
-    },
+    }
 
   },
 
-  didReceiveAttrs: function () {
+  didReceiveAttrs () {
     set(this, 'filteredContent', get(this, 'data'));
-  },
+  }
 });
